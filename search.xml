<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>人工智能与知识工程 第一部分</title>
    <url>/2021/12/29/AI-01/</url>
    <content><![CDATA[<h1 id="概论"><a class="markdownIt-Anchor" href="#概论"></a> 概论</h1>
<p>人工智能就是研究如何使一个计算机系统具有像人一样的智能特征，使其能模拟、延伸、扩展人类智能。</p>
<p><strong>智能的特征</strong>：具有感知能力、具有记忆与思维能力、具有学习能力、具有行为能力</p>
<p><strong>基本研究内容</strong>：知识表示、机器感知、机器思维、机器学习、机器行为</p>
<h2 id="人工智能发展史"><a class="markdownIt-Anchor" href="#人工智能发展史"></a> 人工智能发展史</h2>
<ul>
<li>1937年，开发出世界上第一台电子计算机ABC，为人工智能的研究奠定了物质基础</li>
<li>1943年，M-P模型的提出，奠定了人工神经网络发展的基础。</li>
<li>1950年，图灵提出了著名的机器智能测试模型——图灵测试</li>
<li>1956年，麦卡锡(McCarthy)等10人正式提出了“人工智能” 这一术语</li>
<li>1982: John Hopfield 掀起神经网络的研究</li>
<li>1986年，Rumelhart发现了BP算法，解决了多层网的学习问题</li>
<li>1997: IBM 深蓝第一次击败国际象棋世界冠军</li>
<li>2016：AlphGo成为第一个击败人类职业棋手的软件</li>
</ul>
<h1 id="知识表示"><a class="markdownIt-Anchor" href="#知识表示"></a> 知识表示</h1>
<h2 id="状态空间法"><a class="markdownIt-Anchor" href="#状态空间法"></a> 状态空间法</h2>
<p><strong>状态</strong>：描述某类不同事物间的差别而引入的一组<u><span>最少变量</span></u>q0,q1,…,qn的有序集合</p>
<p><strong>算符</strong>：使问题从一种状态变化为另一种状态的手段。（走步、过程、规划、数学算子、运算符号、逻辑符号等）</p>
<p>解题流程：</p>
<ul>
<li>
<p>定义状态</p>
</li>
<li>
<p>初始状态</p>
</li>
<li>
<p>目标状态</p>
</li>
<li>
<p>列举所有可能的状态</p>
</li>
<li>
<p>定义算符</p>
</li>
<li>
<p>构建状态空间图</p>
</li>
<li>
<p>问题的解是<strong>由初始状态到目标状态所用算符的序列</strong></p>
</li>
</ul>
<p>例：从苏州大学去北京天安门的行程安排（状态空间法）（略）</p>
<h2 id="产生式表示法"><a class="markdownIt-Anchor" href="#产生式表示法"></a> 产生式表示法</h2>
<ul>
<li>确定性规则知识的表示方法： P -&gt; Q 或者 <code>IF P THEN Q</code>
<ul>
<li>三元组表示：（对象，属性，值）    或     （关系，对象1，对象2）</li>
</ul>
</li>
<li>不确定性规则知识的表示方法： P -&gt; Q （置信度） 或者  <code>IF P THEN Q （置信度）</code>
<ul>
<li>四元组表示： （对象，属性，值，可信度值）    或 （关系，对象1，对象2 ，可信度值）</li>
</ul>
</li>
</ul>
<h3 id="产生式系统的组成"><a class="markdownIt-Anchor" href="#产生式系统的组成"></a> 产生式系统的组成</h3>
<ol>
<li><strong>规则库</strong>：产生式集合</li>
<li><strong>综合数据库</strong>：存放输入的事实、中间的运行结果和最后结果</li>
<li><strong>推理机</strong>：选择什么规则和如何应用规则
<ol>
<li><strong>匹配</strong>：将当前综合数据库的事实与规则中的条件进行比较，如果匹配则这一规则称为匹配规则</li>
<li><strong>冲突解决</strong>：专一性排序、规则排序、规模排序和就近排序</li>
<li><strong>操作</strong>：当前综合数据库将被修改</li>
</ol>
</li>
</ol>
<p>例：天气产生式系统</p>
<ul>
<li>规则：
<ul>
<li>R1:IF 有风，THEN 云高速移动</li>
<li>R2:IF 云高速移动 AND 高温， THEN 明天天晴</li>
</ul>
</li>
<li>综合数据库：今天有风，高温</li>
<li>推理：明天天气如何？<br />
取规则R1，检查综合数据库中是否有已知事实匹配，存在“有风”这一事实，将“云高速移动”放入综合数据库中；<br />
取规则R2，检查综合数据库中是否有已知事实匹配，存在“云高速移动”和“高温”事实，将“明天天晴”放入综合数据库中；<br />
检查综合数据库中已经存在了“明天天晴”的事实，推出“明天天晴”的结论。</li>
</ul>
<h2 id="谓词逻辑法"><a class="markdownIt-Anchor" href="#谓词逻辑法"></a> 谓词逻辑法</h2>
<p>例：下列知识是一些规则性知识：</p>
<p>人人爱劳动。所有整数不是偶数就是奇数。自然数都是大于零的整数。请用谓词公式表示这些知识。</p>
<p>解：定义谓词如下：</p>
<p>MAN(x): x是人。 LOVE(x,y): x爱y。</p>
<p>N(x): x是自然数。I(x): x是整数。</p>
<p>E(x): x是偶数。 O(x): x是奇数。</p>
<p>GZ(x): x大于零。</p>
<p>“人人爱劳动”用谓词公式表示为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">∀</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>N</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>→</mo><mi>L</mi><mi>O</mi><mi>V</mi><mi>E</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>l</mi><mi>a</mi><mi>b</mi><mi>o</mi><mi>u</mi><mi>r</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\forall x)(MAN(x)\to LOVE(x,labour))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">∀</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>“所有整数不是偶数就是奇数”</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">∀</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>→</mo><mi>E</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∨</mo><mi>O</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\forall x)(I(x)\to E(x)\vee O(x))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">∀</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>“自然数都是大于零的整数”</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">∀</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>→</mo><mi>G</mi><mi>Z</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∧</mo><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\forall x)(N(x)\to GZ(x)\wedge I(x))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">∀</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<h2 id="语义网络法"><a class="markdownIt-Anchor" href="#语义网络法"></a> 语义网络法</h2>
<p>例：用语义网络表示下列事实：</p>
<p>苏州大学坐落于历史文化名城<a href="https://baike.baidu.com/item/%E8%8B%8F%E5%B7%9E/122945">苏州</a>，是国家“<a href="https://baike.baidu.com/item/211%E5%B7%A5%E7%A8%8B/203547">211</a><a href="https://baike.baidu.com/item/211%E5%B7%A5%E7%A8%8B/203547">工程</a>”、“<a href="https://baike.baidu.com/item/2011%E8%AE%A1%E5%88%92/2913309">2011</a><a href="https://baike.baidu.com/item/2011%E8%AE%A1%E5%88%92/2913309">计划</a>”首批入列高校。张三同志今年42岁，男性，中等身材，他工作于苏州大学。</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-1.png" style="zoom:48%;" />
<h2 id="框架表示"><a class="markdownIt-Anchor" href="#框架表示"></a> 框架表示</h2>
<p>框架可以由框架名、槽、侧面和值四部分组成。框架一般可表示成如下格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;框架名&gt;</span><br><span class="line">&lt;槽名1&gt;&lt;侧面11&gt;&lt;值111&gt; …</span><br><span class="line">       &lt;侧面12&gt;&lt;值121&gt; …</span><br><span class="line">    …</span><br><span class="line">&lt;槽名2&gt;&lt;侧面21&gt;&lt;值211&gt; …</span><br><span class="line">       &lt;侧面22&gt;&lt;值221&gt; …</span><br><span class="line">    …</span><br><span class="line">&lt;槽名n&gt;&lt;侧面n1&gt;&lt;值n11&gt; …</span><br><span class="line">    …</span><br><span class="line">       &lt;侧面nm&gt;&lt;值nm1&gt; …</span><br></pre></td></tr></table></figure>
<h1 id="确定性推理"><a class="markdownIt-Anchor" href="#确定性推理"></a> 确定性推理</h1>
<h2 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h2>
<h3 id="按推出结论的途径"><a class="markdownIt-Anchor" href="#按推出结论的途径"></a> 按推出结论的途径</h3>
<ul>
<li>
<p><strong>演绎推理</strong> (deductive reasoning) :  一般  → 个别</p>
<p>三段论法：大前提、小前提、结论</p>
</li>
<li>
<p><strong>归纳推理</strong> (inductive reasoning): 个别 → 一般</p>
<ul>
<li><strong>完全归纳推理</strong>（必然性推理）</li>
<li><strong>不完全归纳推理</strong>（非必然性推理）</li>
</ul>
</li>
<li>
<p><strong>默认推理</strong>（default reasoning，缺省推理）：知识不完全的情况下假设某些条件已经具备所进行的推理。</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-2.png" style="zoom:48%;" />
</li>
</ul>
<h3 id="按广泛性"><a class="markdownIt-Anchor" href="#按广泛性"></a> 按广泛性</h3>
<ul>
<li><strong>确定性推理</strong>：推理时所用的知识与证据都是确定的，推出的结论也是确定的，其真值或者为真或者为假。</li>
<li><strong>不确定性推理</strong>：推理时所用的知识与证据不都是确定的，推出的结论也是不确定的。</li>
</ul>
<h3 id="按结论是否越来越接近目标"><a class="markdownIt-Anchor" href="#按结论是否越来越接近目标"></a> 按结论是否越来越接近目标</h3>
<ul>
<li><strong>单调推理</strong>：随着推理向前推进及新知识的加入，推出的结论越来越接近最终目标。</li>
<li><strong>非单调推理</strong>：由于新知识的加入，不仅没有加强已推出的结论，反而要否定它，使推理退回到前面的某一步，重新开始。</li>
</ul>
<h3 id="按是否利用启发性知识"><a class="markdownIt-Anchor" href="#按是否利用启发性知识"></a> 按是否利用启发性知识</h3>
<p><strong>启发性知识</strong>：与问题有关且能加快推理过程、提高搜索效率的知识。</p>
<ul>
<li><strong>启发式推理</strong></li>
<li><strong>非启发式推理</strong></li>
</ul>
<h2 id="方向"><a class="markdownIt-Anchor" href="#方向"></a> 方向</h2>
<ul>
<li><strong>正向推理</strong>（事实驱动推理）: 已知事实 →  结论
<ul>
<li>简单，易实现，但目的性不强，效率低。</li>
</ul>
</li>
<li><strong>逆向推理</strong>（目标驱动推理）：以某个假设目标作为出发点，寻找证据。
<ul>
<li>主要优点：不必使用与目标无关的知识，目的性强，同时它还有利于向用户提供解释。</li>
<li>主要缺点：起始目标的选择有盲目性。</li>
</ul>
</li>
<li><strong>混合推理</strong>
<ul>
<li>先正向后逆向：先进行正向推理，帮助选择某个目标，即从已知事实演绎出部分结果，然后再用逆向推理证实该目标或提高其可信度；</li>
<li>先逆向后正向：先假设一个目标进行逆向推理，然后再利用逆向推理中得到的信息进行正向推理，以推出更多的结论</li>
</ul>
</li>
<li><strong>双向推理</strong>：正向推理与逆向推理同时进行，且在推理过程中的某一步骤上“<strong>碰头</strong>”的一种推理。</li>
</ul>
<h2 id="冲突消解策略"><a class="markdownIt-Anchor" href="#冲突消解策略"></a> <strong>冲突消解策略</strong></h2>
<ol>
<li>按针对性排序</li>
<li>按已知事实的新鲜性排序</li>
<li>按匹配度排序</li>
<li>按条件个数排序</li>
<li>按上下文限制排序</li>
<li>按冗余限制排序</li>
<li>根据领域问题的特点排序</li>
</ol>
<h2 id="自然演绎推理"><a class="markdownIt-Anchor" href="#自然演绎推理"></a> <strong>自然演绎推理</strong></h2>
<p><strong>自然演绎推理</strong>：从一组已知为真的事实出发，运用经典逻辑的推理规则推出结论的过程。</p>
<p>推理规则：P规则、T规则、假言推理、拒取式推理</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-3.png" style="zoom:48%;" />
<img src="https://repo.live.holgerbest.top/img/ai-1-4.png" style="zoom:48%;" />
<p><strong>优点</strong>：</p>
<ul>
<li>表达定理证明过程自然，易理解。</li>
<li>拥有丰富的推理规则，推理过程灵活。</li>
<li>便于嵌入领域启发式知识。</li>
</ul>
<p><strong>缺点</strong>：易产生组合爆炸，得到的中间结论一般呈指数形式递增。</p>
<h2 id="归结反演"><a class="markdownIt-Anchor" href="#归结反演"></a> 归结反演</h2>
<h3 id="谓词公式化为子句集"><a class="markdownIt-Anchor" href="#谓词公式化为子句集"></a> 谓词公式化为子句集</h3>
<ul>
<li>原子（atom）谓词公式： 一个不能再分解的命题。</li>
<li>文字（literal）：原子谓词公式及其否定。</li>
<li><strong>子句</strong>（clause）：任何文字的析取式。任何文字本身也都是子句。</li>
<li><strong>空子句</strong>（<strong>NIL</strong>）：不包含任何文字的子句。</li>
<li>子句集：由子句构成的集合。</li>
</ul>
<hr />
<ol>
<li>
<p>消去谓词公式中的“-&gt;”和“&lt;-&gt;”符号</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>→</mo><mi>Q</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant="normal">¬</mi><mi>P</mi><mo>∨</mo><mi>Q</mi></mrow><annotation encoding="application/x-tex">P \to Q \iff \neg P \vee Q
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">¬</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>↔</mo><mi>Q</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo stretchy="false">(</mo><mi>P</mi><mo>∧</mo><mi>Q</mi><mo stretchy="false">)</mo><mo>∨</mo><mo stretchy="false">(</mo><mi mathvariant="normal">¬</mi><mi>P</mi><mo>∧</mo><mi mathvariant="normal">¬</mi><mi>Q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P \leftrightarrow Q \iff (P\wedge Q)\vee(\neg P\wedge \neg Q)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↔</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">Q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">¬</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">¬</span><span class="mord mathdefault">Q</span><span class="mclose">)</span></span></span></span></span></p>
</li>
<li>
<p>把否定符号移到紧靠谓词的位置上</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-5.png" style="zoom:48%;" />
</li>
<li>
<p>变量标准化</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-6.png" style="zoom:48%;" />
</li>
<li>
<p>消去<strong>存在量词</strong></p>
<ol>
<li>存在量词不出现在全称量词的辖域内。</li>
<li>存在量词出现在一个或者多个全称量词的辖域内。</li>
</ol>
<img src="https://repo.live.holgerbest.top/img/ai-1-7.png" style="zoom:48%;" />
</li>
<li>
<p>化为前束形：<code>前束形=（前缀）&#123;母式&#125;</code></p>
</li>
<li>
<p>化为 Skolem 标准形 <img src="https://repo.live.holgerbest.top/img/image-20211230154606634.png" alt="image-20211230154606634" /></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>∨</mo><mo stretchy="false">(</mo><mi>Q</mi><mo>∧</mo><mi>R</mi><mo stretchy="false">)</mo><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo stretchy="false">(</mo><mi>P</mi><mo>∨</mo><mi>Q</mi><mo stretchy="false">)</mo><mo>∧</mo><mo stretchy="false">(</mo><mi>P</mi><mo>∨</mo><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P\vee (Q\wedge R) \iff (P\vee Q)\wedge(P\vee R)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">Q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>∧</mo><mo stretchy="false">(</mo><mi>Q</mi><mo>∨</mo><mi>R</mi><mo stretchy="false">)</mo><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo stretchy="false">(</mo><mi>P</mi><mo>∧</mo><mi>Q</mi><mo stretchy="false">)</mo><mo>∨</mo><mo stretchy="false">(</mo><mi>P</mi><mo>∧</mo><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P\wedge (Q\vee R) \iff (P\wedge Q)\vee(P\wedge R)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">Q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></span></p>
</li>
<li>
<p>略去<strong>全称量词</strong></p>
</li>
<li>
<p>消去合取词 （转换为集合）</p>
</li>
<li>
<p>子句变量标准化 （使用不同的变量）</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-8.png" style="zoom:48%;" />
</li>
</ol>
<hr />
<h3 id="鲁滨逊归结原理"><a class="markdownIt-Anchor" href="#鲁滨逊归结原理"></a> 鲁滨逊归结原理</h3>
<p>基本思想：</p>
<ul>
<li>检查子句集 S 中是否包含<strong>空子句</strong>，若包含，则 S <strong>不可满足</strong>。</li>
<li>若不包含，在 S 中选择合适的子句进行归结，一旦归结出<strong>空子句</strong>，就说明 S 是不可满足的。</li>
</ul>
<blockquote>
<p>若未能归结得空子句，则既不能说明 S 是可满足的，也不能说明 S 是不可满足的。</p>
</blockquote>
<img src="https://repo.live.holgerbest.top/img/ai-1-9.png" style="zoom:88%;" />
<img src="https://repo.live.holgerbest.top/img/ai-1-10.png" style="zoom:48%;" />
<h3 id="归结反演-2"><a class="markdownIt-Anchor" href="#归结反演-2"></a> 归结反演</h3>
<ol>
<li>将已知前提表示为谓词公式<em>F</em>。</li>
<li>将待证明的结论表示为谓词公式<em>Q</em>，并<strong>否定</strong>得到﹁ <em>Q</em> 。</li>
<li>把谓词公式集{<em>F</em>，﹁<em>Q</em>} 化为子句集<em>S</em>。</li>
<li>应用归结原理对子句集<em>S</em>中的子句进行归结，并把每次归结得到的归结式都并入到<em>S</em>中。如此反复进行，若出现了<strong>空子句</strong>，则停止归结，此时就证明了<em>Q</em>为真。</li>
</ol>
<img src="https://repo.live.holgerbest.top/img/ai-1-11.png" style="zoom:48%;" />
<h3 id="应用归结原理求解问题"><a class="markdownIt-Anchor" href="#应用归结原理求解问题"></a> 应用归结原理求解问题</h3>
<ol>
<li>已知前提 F 用谓词公式表示，并化为子句集 S ；</li>
<li>把待求解的问题 Q 用谓词公式表示，并<strong>否定</strong> Q，再与  <em>ANSWER</em> 构成<strong>析取式</strong>（﹁ Q ∨ <em>ANSWER</em> ）；</li>
<li>把（﹁ Q ∨ ANSWER） 化为子句集，并入到子句集 S中，得到子句集S’；</li>
<li>对子句集S’应用归结原理进行归结，若得到归结式 <em>ANSWER</em> ，则答案就在 <em>ANSWER</em> 中。</li>
</ol>
<img src="https://repo.live.holgerbest.top/img/ai-1-12.png" style="zoom:48%;" />
<h1 id="不确定性推理"><a class="markdownIt-Anchor" href="#不确定性推理"></a> 不确定性推理</h1>
<h2 id="可信度方法"><a class="markdownIt-Anchor" href="#可信度方法"></a> 可信度方法</h2>
<p><strong>可信度</strong>：根据经验对一个事物或现象为真的<strong>相信程度</strong>。</p>
<p>C-F模型：<code>IF E THEN H (CF(H, E))</code></p>
<blockquote>
<p><code>CF(H, E)</code>：可信度因子。范围[-1, 1]，&gt; 0 越大越支持 H 为真；&lt; 0越小越支持 H 为假；=0无关。</p>
</blockquote>
<ul>
<li>静态强度 CF（H，E）：知识的强度，即当 E 所对应的证据为<strong>真</strong>时对 H 的<strong>影响程度</strong>。</li>
<li>动态强度 CF（E）：证据 E 当前的<strong>不确定性程度</strong>。</li>
</ul>
<p><strong>组合证据</strong>：合取（AND）取min，析取（OR）取max</p>
<p><strong>传递算法</strong>：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>F</mi><mo stretchy="false">(</mo><mi>H</mi><mo stretchy="false">)</mo><mo>=</mo><mi>C</mi><mi>F</mi><mo stretchy="false">(</mo><mi>H</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo><mo>×</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>C</mi><mi>F</mi><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">CF(H)= CF(H, E) \times \max (0, CF(E))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p><strong>合成算法</strong>:</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-13.png" style="zoom:48%;" />
<h2 id="证据理论"><a class="markdownIt-Anchor" href="#证据理论"></a> 证据理论</h2>
<p><strong>概率分配函数</strong>：把D的任意一个子集A都映射为[0，1]上的一个数M(A)。</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-14.png" style="zoom:88%;" />
<p><strong>信任函数</strong>（为真信任度）：Bel(A)为A的所有非空子集B的M(B)之和。</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-15.png" style="zoom:88%;" />
<p><strong>似然函数</strong>（非假信任度）：</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-16.png" style="zoom:88%;" />
<p><strong>证据组合</strong>：概率分配函数的正交和</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-17.png" style="zoom:88%;" />
<p>基于证据理论的不确定性推理的<strong>步骤</strong>：</p>
<ol>
<li>
<p>建立问题的样本空间D。</p>
</li>
<li>
<p>由经验（题目）给出<strong>基本概率分配函数</strong>M。</p>
<p>利用<strong>传递算法</strong>：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>F</mi><mo stretchy="false">(</mo><mi>H</mi><mo stretchy="false">)</mo><mo>=</mo><mi>C</mi><mi>F</mi><mo stretchy="false">(</mo><mi>H</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo><mo>×</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>C</mi><mi>F</mi><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">CF(H)= CF(H, E) \times \max (0, CF(E))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>以及<strong>合成算法</strong>。</p>
</li>
<li>
<p>计算所关心的子集A的<strong>信任函数值</strong>Bel(A)、<strong>似然函数值</strong>Pl(A)。</p>
</li>
<li>
<p>得出结论为真信任度：Bel(A)，非假信任度：Pl(A)。</p>
</li>
</ol>


	<div class="row">
    <embed src="https://repo.live.holgerbest.top/pdf/ai-ex-4.pdf" width="100%" height="550" type="application/pdf">
	</div>



<h2 id="模糊推理"><a class="markdownIt-Anchor" href="#模糊推理"></a> 模糊推理</h2>
<p>模糊逻辑给集合中每一个元素赋予一个介于0和1之间的实数，描述其属于一个集合的强度，该实数称为元素属于一个集合的<strong>隶属度</strong>。集合中所有元素的隶属度全体构成集合的<strong>隶属函数</strong>。</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-18.png" style="zoom:88%;" />
<p>运算：</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-19.png" style="zoom:70%;" />
<p>模糊关系：</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-20.png" style="zoom:70%;" />
<p>模糊关系的合成：</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-21.png" style="zoom:50%;" />
<ul>
<li>最大-最小合成：<strong>乘积取小</strong>，<strong>求和取大</strong></li>
<li>最大-代数合成：<strong>乘积代数运算</strong>，<strong>求和取大</strong></li>
</ul>
<p><strong>模糊推理</strong>：已知 A-&gt;B，给定输入A’，计算：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>=</mo><msup><mi>A</mi><mi>T</mi></msup><mo>∘</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">R = A^T \circ B
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>B</mi><mo mathvariant="normal">′</mo></msup><mo>=</mo><msup><mi>A</mi><mo mathvariant="normal">′</mo></msup><mo>∘</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">B&#x27; = A&#x27; \circ R
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span></span></p>
<p>决策：</p>
<ul>
<li>
<p><strong>最大隶属度法</strong></p>
</li>
<li>
<p><strong>加权平均判决法</strong>：</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-22.png" style="zoom:50%;" />
</li>
<li>
<p><strong>中位数法</strong>：</p>
<img src="https://repo.live.holgerbest.top/img/ai-1-23.png" style="zoom:50%;" />
</li>
</ul>
<h1 id="搜索"><a class="markdownIt-Anchor" href="#搜索"></a> 搜索</h1>
<p>搜索：根据问题的实际情况，按照一定的策略或规则，从知识库中寻找可利用的知识，从而构造出一条使问题获得解决的推理路线的过程。</p>
<p>图搜索策略：</p>
<ol>
<li>将问题的初始状态（状态空间图中的初始节点）当作当前节点，选择一适当的算符作用于当前状态，生成一组后继状态（或后继节点）。</li>
<li>检查这组后继状态中有没有目标状态，如果有，则说明搜索成功，从初始状态到目标状态的一系列算符即是问题的解。</li>
<li>若没有，则按照某种控制策略从已生成的状态中再选择一个状态作为当前状态。</li>
<li>重复上述过程，直到目标状态出现或不再有可供操作的状态及算符时为止。</li>
</ol>
<h2 id="盲目搜索"><a class="markdownIt-Anchor" href="#盲目搜索"></a> 盲目搜索</h2>
<p>特点：</p>
<ul>
<li>搜索线路是<strong>事先决定好的</strong>，没有利用被求解问题的任何信息。</li>
<li>在决定要被扩展的节点时，没有考虑节点是否可能出现在解的路径上。</li>
<li>没有考虑它是否有利于问题的求解以及所求的解是否为最优解。</li>
</ul>
<p><strong>宽度优先搜索</strong>：搜索是以<strong>接近起始节点的程度</strong>来依次扩展节点。搜索是<strong>逐层</strong>进行的，在对下一层的任意节点进行搜索之前，必须搜索完本层的所有节点。</p>
<p><strong>深度优先搜索</strong>：先扩展最新产生的节点，深度相等的节点可以任意排列。</p>
<blockquote>
<p>为了避免考虑太长的路径，往往给出一个节点扩展的<strong>最大深度</strong>——深度界限。达到深度界限，认为没有后继节点。</p>
</blockquote>
<h2 id="启发式搜索"><a class="markdownIt-Anchor" href="#启发式搜索"></a> 启发式搜索</h2>
<p>启发式搜索（有信息搜索）：找到一种方法用于排列待扩展节点的顺序，即选择最有希望的节点加以扩展，搜索效率将会大大提高。</p>
<p><strong>估价函数</strong>：从初始节点经过节点x到达目标节点的<strong>最小代价路径的代价估算值</strong>。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)=g(x)+h(x)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></span></p>
<ul>
<li>g(x)从初始节点S<sub>0</sub>到节点x已实际付出的代价；</li>
<li>h(x)从节点x到目标节点S<sub>g</sub>的最优路径的估价代价。</li>
</ul>
<blockquote>
<p>g(x)的比重越大，搜索方向倾向于广度优先搜索；h(x)的比重越大，越倾向于深度优先搜索。</p>
</blockquote>
<hr />
<p>A*算法：</p>
<ol>
<li>
<p>将开始节点放入Open(开始节点的F和G值都视为0);</p>
</li>
<li>
<p>作如下循环</p>
<ol>
<li>在Open表中查找具有最小F值的节点,并把查找到的节点作为当前节点;</li>
<li>把当前节点从Open表删除, 加入到Closed表;</li>
<li>对当前节点相邻的每一个节点依次执行以下步骤：
<ol>
<li>如果该相邻节点不可通行或者该相邻节点已经在Closed表中,则什么操作也不执行,继续检验下一个节点;</li>
<li>如果该相邻节点不在Open表中,则将该节点添加到Open表中, 并将该相邻节点的父节点设为当前节点,同时保存该相邻节点的G和F值;</li>
<li>如果该相邻节点在开放列表中, 则判断若经由当前节点到达该相邻节点的G值是否小于原来保存的G值,若小于,则将该相邻节点的父节点设为当前节点,并重新设置该相邻节点的G和F值.</li>
</ol>
</li>
</ol>
<p>循环结束条件：</p>
<ul>
<li>当终点节点被加入到开放列表作为待检验节点时, 表示路径被找到,此时应终止循环;</li>
<li>或者当开放列表为空,表明已无可以添加的新节点,而已检验的节点中没有终点节点则意味着路径无法被找到,此时也结束循环</li>
</ul>
</li>
<li>
<p>从终点节点开始沿父节点遍历, 并保存整个遍历到的节点坐标,遍历所得的节点就是最后得到的路径。</p>
</li>
</ol>
<hr />
<ul>
<li>可采纳性：指对于<strong>可求解</strong>的状态空间图（即从状态空间图的初始节点到目标节点有路径存在）来说，如果一个搜索算法能<strong>在有限步内终止</strong>，并且能找到<strong>最优解</strong>。</li>
<li>单调性：在A*算法中，如果对其估价函数中的h(x)部分，加以适当的单调性限制，就可以使它对所扩展的节点的估价函数值单调递增，从而减少对OPEN表或CLOSED表的检查和调整，提高搜索效率。</li>
<li>信息性：A*算法的搜索效率主要取决于启发函数h(x),h(x)携带信息的多少。</li>
</ul>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>人工智能</tag>
        <tag>考试不挂科</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能与知识工程 第二部分</title>
    <url>/2022/01/01/AI-02/</url>
    <content><![CDATA[<h1 id="智能计算遗传算法"><a class="markdownIt-Anchor" href="#智能计算遗传算法"></a> 智能计算——遗传算法</h1>
<h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2>
<ul>
<li><strong>种群</strong>：种群是指用遗传算法求解问题时，初始给定的多个解的集合。遗传算法的求解过程是从这个子集开始的。</li>
<li><strong>个体</strong>：个体是指种群中的单个元素，它通常由一个用于描述其基本遗传结构的数据结构来表示。例如，可以用0、1组成的长度为l的串来表示个体。</li>
<li><strong>染色体</strong>：染色体是指对个体进行编码后所得到的编码串。染色体中的每1位称为<strong>基因</strong>，染色体上由若干个基因构成的一个有效信息段称为<strong>基因组</strong>。</li>
<li><strong>适应度函数</strong>：适应度函数是一种用来对种群中各个个体的环境适应性进行度量的函数。其函数值是遗传算法实现优胜劣汰的主要依据</li>
<li><strong>遗传操作</strong>：遗传操作是指作用于种群而产生新的种群的操作。标准的遗传操作包括以下三种基本形式：
<ul>
<li><strong>选择</strong>（Selection）</li>
<li><strong>交叉</strong>（Crossover）</li>
<li><strong>变异</strong>（Mutation） ：对选中个体的染色体中的某些基因进行变动，以形成新的个体，它可增强种群的<strong>多样性</strong>。</li>
</ul>
</li>
</ul>
<h2 id="算法流程"><a class="markdownIt-Anchor" href="#算法流程"></a> 算法流程</h2>
<h3 id="遗传编码"><a class="markdownIt-Anchor" href="#遗传编码"></a> 遗传编码</h3>
<ul>
<li>
<p><strong>二进制编码</strong>：二进制编码是将原问题的结构变换为染色体的<strong>位串结构</strong></p>
<p>对应范围[𝒖_𝒎𝒊𝒏, 𝒖_𝒎𝒂𝒙]，精度为𝝈，<strong>确定需要多少位的二进制编码串能够覆盖范围内的所有数</strong></p>
</li>
<li>
<p><strong>格雷编码</strong>：对二进制编码进行变换后所得到的一种编码方法</p>
<img src="https://repo.live.holgerbest.top/img/ai-2-1.png" style="zoom:48%;" />
</li>
<li>
<p><strong>实数编码</strong>：（高位或复杂优化问题）若干个<strong>实数</strong>表示一个个体，然后在实数空间进行遗传操作</p>
</li>
</ul>
<h3 id="种群设定"><a class="markdownIt-Anchor" href="#种群设定"></a> 种群设定</h3>
<p><strong>初始种群的产生</strong>：随机产生一定数目的个体，从中挑选最好的个体加到初始群体中。这种过程不断迭代，直到初始群体中个体数目达到了预先确定的规模。</p>
<p><strong>种群规模的确定</strong>：</p>
<ul>
<li>群体规模太小，遗传算法的优化性能不太好，易陷入局部最优解。</li>
<li>群体规模太大，计算复杂。</li>
<li>一般取 20-100</li>
</ul>
<h3 id="适应度函数"><a class="markdownIt-Anchor" href="#适应度函数"></a> 适应度函数</h3>
<p><strong>将目标函数映射成适应度函数</strong>：最大化问题取目标函数值，最小化问题取倒数。</p>
<p><strong>欺骗问题</strong>：将所有妨碍适应度值高的个体产生，从而影响遗传算法正常工作。</p>
<ul>
<li>超级个体：适应度远远大于其它 =&gt; <strong>过早收敛</strong></li>
<li>平均适应度接近最优适应值 =&gt; <strong>停滞现象</strong></li>
</ul>
<p>适应度函数的<strong>尺度变换</strong>（fitness scaling）或者定标：对适应度函数值域的某种<strong>映射</strong>变换。</p>
<h3 id="选择"><a class="markdownIt-Anchor" href="#选择"></a> 选择</h3>
<ul>
<li><strong>适者生存</strong>：适应度越高，被选择的概率越大</li>
<li>为了避免过快收敛到局部最优解，还需要维持种群的多样性</li>
</ul>
<ol>
<li><strong>排序方法</strong>：计算每个个体的适应度后，根据<strong>适应度大小</strong>顺序对群体中个体进行排序，然后把<strong>事先设计好的概率</strong>按排序分配给个体，作为各自的选择概率。</li>
<li><strong>轮盘赌选择</strong>：
<ul>
<li>按个体的选择概率产生一个轮盘，轮盘每个区的角度与个体的选择概率成比例。</li>
<li>产生一个随机数，它落入转盘的哪个区域就选择相应的个体交叉。</li>
</ul>
</li>
<li><strong>锦标赛选择方法</strong>：从群体中随机选择<strong>k</strong>个个体，将其中<strong>适应度最高的个体</strong>保存到下一代。这一过程反复执行，直到保存到下一代的个体数达到预先设定的数量为止。</li>
<li><strong>随机竞争方法</strong>：每次按赌轮选择方法选取一对个体，然后让这两个个体进行竞争，适应度高者获胜。如此反复，直到选满为止。</li>
<li><strong>最佳个体保存方法</strong>：把群体中适应度最高的个体<strong>不进行交叉而直接复制到下一代中</strong>，保证遗传算法终止时得到的最后结果一定是历代出现过的最高适应度的个体。</li>
</ol>
<h3 id="交叉"><a class="markdownIt-Anchor" href="#交叉"></a> 交叉</h3>
<ul>
<li><strong>二进制交叉</strong>：二进制编码情况下所采用的交叉操作
<ul>
<li><strong>单点交叉</strong>：在两个父代个体的编码串中随机设定一个交叉点，然后对这两个父代个体交叉点<strong>前面或后面</strong>部分的基因进行交换</li>
<li><strong>两点交叉</strong>：先在两个父代个体的编码串中随机设定两个交叉点，然后再按这两个交叉点进行部分基因交换，生成子代中的两个新的个体</li>
<li><strong>多点交叉</strong></li>
<li><strong>均匀交叉</strong>：随机生成一个与父串具有相同长度，并被称为交叉模版（或交叉掩码）的二进制串，然后再利用该模版对两个父串进行交叉，即将模版中1对应的位进行交换，而0对应的位不交换，依此生成子代中的两个新的个体。</li>
</ul>
</li>
<li>实值交叉：在实数编码情况下所采用的交叉操作
<ul>
<li><strong>离散交叉</strong>：随机选择对第k个分量以后的所有分量进行交叉</li>
<li><strong>算术交叉</strong>：两个个体的线性组合而产生出两个新的个体</li>
</ul>
</li>
</ul>
<p><strong>交叉概率</strong>：0.25-1.00</p>
<blockquote>
<ul>
<li>过高：高性能模式遭遇破坏的可能性大</li>
<li>过低：开辟新的搜索区域能力变低</li>
</ul>
</blockquote>
<h3 id="变异"><a class="markdownIt-Anchor" href="#变异"></a> 变异</h3>
<ul>
<li><strong>二进制变异</strong>：先<strong>随机地产生一个变异位</strong>，然后将该变异位置上的基因值由“0”变为“1”，或由“1”变为“0”，产生一个新的个体。</li>
<li><strong>实值变异</strong>：用另外一个在规定范围内的随机实数去替换原变异位置上的基因值，产生一个新的个体。
<ul>
<li><strong>基于位置的变异方法</strong>：先随机地产生两个变异位置，然后将第二个变异位置上的基因<strong>移动</strong>到第一个变异位置的前面。</li>
<li><strong>基于次序的变异</strong>：先随机地产生两个变异位置，然后<strong>交换</strong>这两个变异位置上的基因。</li>
</ul>
</li>
</ul>
<p><strong>变异概率</strong>：0.001左右</p>
<blockquote>
<p>变异是辅助性的搜索，变异的概率不能太大，以防止一些重要的基因丢失，而且变异太大会导致算法趋于随机搜索</p>
</blockquote>


	<div class="row">
    <embed src="https://repo.live.holgerbest.top/pdf/ai-ex-6.pdf" width="100%" height="550" type="application/pdf">
	</div>



<h1 id="机器学习"><a class="markdownIt-Anchor" href="#机器学习"></a> 机器学习</h1>


	<div class="row">
    <embed src="https://repo.live.holgerbest.top/pdf/ai-ml-1.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="https://repo.live.holgerbest.top/pdf/ai-ml-2.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>人工智能</tag>
        <tag>考试不挂科</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 入个门</title>
    <url>/2020/07/16/BasicAndroid/</url>
    <content><![CDATA[<img src="https://repo.live.holgerbest.top/img/H7EOLmWtwdqKjJT.jpg" alt="Android" style="zoom:33%;" />
<div class="note success flat"><p>整理了一些Android很经典的几个问题。<s><em>其实是选修课作业，顺道吹一吹这门课（</em></s></p>
<p>附件：<a href="https://get.holgerbest.top/data/android_src.rar">部分源代码</a></p>
</div>
<a id="more"></a>
<h2 id="1-android应用的基本组件有哪些"><a class="markdownIt-Anchor" href="#1-android应用的基本组件有哪些"></a> 1、Android应用的基本组件有哪些？</h2>
<ol>
<li>Activity：应用表示层（基类Activity）</li>
</ol>
<p>一个活动表示一个可视化的用户界面，同一应用中的每个Activity是相互独立的。每一个活动都是作为Activity基类的一个子类的实现。应用程序中的每个屏幕都是通过继承和扩展基类Activity来实现的。Activity窗口内的可见内容通过基类View提供。</p>
<ol start="2">
<li>Service：没有可见的用户界面，但能够长时间运行于后台（基类Service）</li>
</ol>
<p>一个没有用户界面的在后台运行执行耗时操作的应用组件。其他应用组件能够启动Service，并且当用户切换到另外的应用场景，Service将持续在后台运行。另外，一个组件能够绑定到一个Service与之交互，所有这些活动都是在后台进行。Service与Activity一样都存在于当前进程的主线程中，所以一些阻塞UI的操作不能放在Service里进行。</p>
<ol start="3">
<li>Broadcast Receiver：用户接收广播通知的组件（基类BroadcastReceiver）</li>
</ol>
<p>广播接收者仅是接受广播公告并作出相应的反应。许多广播源自于系统，应用程序也可以发起广播。一个应用程序可以有任意数量的广播接收者去反应任何它认为重要的公告。所有的接受者继承自BroadcastReceiver基类。BroadcastReceiver自身并不实现图形用户界面，但是当它收到某个通知后，可以启动 Activity作为响应，或者通过NotificationMananger提醒用户。</p>
<ol start="4">
<li>Content Provider：应用程序间数据通信、共享（基类ContentProvider）</li>
</ol>
<p>内容提供者使一个应用程序的指定数据集提供给其他应用程序，继承自ContentProvider 基类并实现了一个标准的方法集，使得其他应用程序可以检索和存储数据。应用程序使用一个ContentResolver对象并调用它的方法。ContentResolver能与任何内容提供者通信，它与提供者合作来管理参与进来的进程间的通信。</p>
<ol start="5">
<li>Intent：连接组件的纽带通信</li>
</ol>
<p>Intent在不同的组件之间传递消息，将一个组件的请求意图传给另一个组件。因此， Intent 是包含具体请求信息的对象。针对不同的组件，Intent所包含的消息内容有所不同，且不同组件的激活方式也不同。 Intent是一种运行时绑定机制，它能够在程序运行的过程中连接两个不同的组件。通过Intent，程序可以向 Android表达某种请求或者意愿，Android会根据意愿的内容选择适当的组件来处理请求。</p>
<h2 id="2-简述android平台用户界面搭建有哪几种方式并对这几种方式进行比较"><a class="markdownIt-Anchor" href="#2-简述android平台用户界面搭建有哪几种方式并对这几种方式进行比较"></a> 2、简述Android平台用户界面搭建有哪几种方式，并对这几种方式进行比较。</h2>
<ol>
<li>使用XML布局文件控制UI界面：利用XML布局文件来控制用户界面是开发人员最常使用的方法。XML文件来描述用户界面，并将其保存在资源文件夹/res/layout下。这种方法极大地简化界面设计的过程，将界面视图从Java代码中分离出来，将用户界面中静态部分定义在XML中，代替了写代码，使得程序结构更加清晰、明了。</li>
<li>在Java代码中控制UI界面：Android允许开发者，完全在Java代码中控制UI界面。一方面不利于高层次解耦，另一方面界面中的控件需要通过new来创建，控件属性的设置还需要调用相应的方法，因此代码显得较为臃肿，对程序开发人员来讲不论设计还是维护都较为繁琐。</li>
<li>使用XML布局文件和代码混合控制UI界面：使用XML布局文件和Java代码混合控制UI界面，习惯上把变化小、行为比较固定的组件放在XML布局文件中，把变化较多、行为控制比较复杂的组件交给Java代码来管理。</li>
</ol>
<h2 id="3-handler消息传递机制是怎样的试举例说明"><a class="markdownIt-Anchor" href="#3-handler消息传递机制是怎样的试举例说明"></a> 3、Handler消息传递机制是怎样的？试举例说明。</h2>
<ol>
<li>目标线程调用<code>Looper.prepare()</code>创建Looper对象和消息队列.</li>
<li>目标线程通过<code>new Handler()</code>创建Handler对象，将Handler、Looper、消息队列三者关联起来。并覆盖其<code>handleMessage</code>函数。</li>
<li>目标线程调用<code>Looper.loop()</code> 监听消息队列。</li>
<li>消息源线程调用<code>Handler.sendMessage</code>发送消息。</li>
<li>消息源线程调用<code>MessageQueue.enqueueMessage</code>将待发消息插入消息队列。</li>
<li>目标线程的<code>loop()</code> 检测到消息队列有消息插入，将其取出。</li>
<li>目标线程将取出消息通过<code>Handler.dispatchMessage</code>派发给<code>Handler.handleMessage</code>进行消息处理。</li>
</ol>
<p><strong>例如：模拟手机客户端下载网络数据并在手机界面显示新数据。</strong></p>
<p>业务逻辑：</p>
<ol>
<li>UI线程获得用户请求；</li>
<li>启动子线程完成网络数据下载（网络下载过程通过强制子线程休眠若干秒来模拟）；</li>
<li>子线程将下载的数据返回UI线程并显示。</li>
</ol>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button mButton;</span><br><span class="line">    <span class="keyword">private</span> TextView mTextView;</span><br><span class="line">    <span class="keyword">private</span> Handler mHandler;</span><br><span class="line">    <span class="keyword">private</span> Thread mNetAccessThread;</span><br><span class="line">    <span class="keyword">private</span> ProgressDialog mProgressDialog;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDownloadCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mButton = (Button) findViewById(R.id.begin);</span><br><span class="line">        mTextView = (TextView) findViewById(R.id.dataText);</span><br><span class="line">        <span class="comment">//设置按钮的点击事件监听器</span></span><br><span class="line">        mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                showProgressDialog(<span class="string">&quot;&quot;</span>, <span class="string">&quot;正在下载...&quot;</span>);</span><br><span class="line">                <span class="comment">//启动子线程进行网络访问模拟</span></span><br><span class="line">                mNetAccessThread = <span class="keyword">new</span> ChildTread();</span><br><span class="line">                mNetAccessThread.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//继承Handler类并覆盖其handleMessage方法</span></span><br><span class="line">        mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="comment">//覆盖Handler类的handleMessage方法</span></span><br><span class="line">            <span class="comment">//接收子线程传递的数据并在UI显示</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        mTextView.setText((String) msg.obj);</span><br><span class="line">                        mTextView.setTextColor(Color.RED);</span><br><span class="line">                        dismissProgressDialog();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ChildTread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//休眠6秒，模拟网络访问延迟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将结果通过消息返回主线程</span></span><br><span class="line">            Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">            msg.what = <span class="number">1</span>;</span><br><span class="line">            mDownloadCount++;</span><br><span class="line">            msg.obj = <span class="keyword">new</span> String(<span class="string">&quot;第&quot;</span> + mDownloadCount + <span class="string">&quot;次从网上下载的数据&quot;</span>);</span><br><span class="line">            mHandler.sendMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启progressDialog.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title   对话框标题.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 对话框正文.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">showProgressDialog</span><span class="params">(String title, String content)</span> </span>&#123;</span><br><span class="line">        mProgressDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (title != <span class="keyword">null</span>)</span><br><span class="line">            mProgressDialog.setTitle(title);</span><br><span class="line">        <span class="keyword">if</span> (content != <span class="keyword">null</span>)</span><br><span class="line">            mProgressDialog.setMessage(content);</span><br><span class="line">        mProgressDialog.show();</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 关闭progressDialog.</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dismissProgressDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mProgressDialog != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mProgressDialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-如何显式启动一个activity如何隐式启动activity"><a class="markdownIt-Anchor" href="#4-如何显式启动一个activity如何隐式启动activity"></a> 4、如何显式启动一个Activity？如何隐式启动Activity？</h2>
<h3 id="显式启动"><a class="markdownIt-Anchor" href="#显式启动"></a> 显式启动</h3>
<p>显式启动是指一个Activity通过类名明确指明要启动哪个Activity。</p>
<ol>
<li>创建Intent对象，并初始化指明要启动的Activity。可以直接用：<code>Intent intent = new Intent(ActivityA.this, ActivityB.class);</code></li>
<li>调用启动Activity的方法启动新的Activity，如<code>startActivity(intent)</code>，完成新Activity的启动。</li>
</ol>
<h3 id="隐式启动"><a class="markdownIt-Anchor" href="#隐式启动"></a> 隐式启动</h3>
<p>隐式启动表示不需指明要启动哪一个Activity，只需要声明一个行为，系统会根据Activity配置，启动能够匹配这个行为的Activity。</p>
<p>隐式启动Activity时，系统会自动启动与Intent上的动作（Action）、附加数据（Category）以及数据（Data）相匹配的Activity。 Action用于描述要完成的动作，Category为被执行动作Action增加的附加信息。通常Action与Category结合使用，Data则用于向Action提供操作的数据。</p>
<p>Intent隐式启动分三个步骤：</p>
<ol>
<li>创建Intent对象：<code>Intent intent=new Intent();</code></li>
<li>设置用于匹配的Intent属性，Intent属性有：动作属性、动作额外附加的类别属性以及数据属性等，分别需要调用不同的方法来设置：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">intent.setAction(); <span class="comment">//设置动作属性 </span></span><br><span class="line">intent.addCategory); <span class="comment">//设置类别属性 </span></span><br><span class="line">intent.setData(); <span class="comment">//设置数据属性 </span></span><br><span class="line">intent.setType(); <span class="comment">//设置数据属性 </span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>调用启动Activity方法启动新的Activity，如：startActivity(intent)</li>
</ol>
<h2 id="5-如何使用bundle在activity之间交换数据试编程加以说明"><a class="markdownIt-Anchor" href="#5-如何使用bundle在activity之间交换数据试编程加以说明"></a> 5、如何使用Bundle在Activity之间交换数据？试编程加以说明。</h2>
<ol>
<li>Intent 提供了多个方法来设置欲传递的数据，例如：</li>
</ol>
<ul>
<li><code>public Intent putExtras (Bundle extras)</code>：向Intent中放入需要传递的Bundle数据extras。</li>
<li><code>public Intent putExtra (String name, Xxx value)</code>：向Intent中按key-value对的形式存入数据（Xxx指代各种数据类型的名称），key为name，value为val。</li>
</ul>
<ol start="2">
<li>Intent也提供了相应的取出传递过来的数据的方法，例如：</li>
</ol>
<ul>
<li><code>public Bundle getExtras ()</code>：取出Intent所“携带”的数据。</li>
</ul>
<ol start="3">
<li>Bundle类也提供了多个方法，来把数据封装到Bundle对象中，例如：</li>
</ol>
<ul>
<li><code>public void putSerializable (String key, Serializable value)</code>：向Bundle中放入一个可序列化的对象。</li>
<li><code>public void putInt (String key, int value)</code>：向Bundle中放入int类型的数据。</li>
</ul>
<ol start="4">
<li>Bundle类也提供了从Bundle对象中取出数据的方法：</li>
</ol>
<ul>
<li><code>public Serializable getSerializable (String key)</code>：从Bundle中取出一个可序列化的对象。</li>
<li><code>public int getInt (String key)</code>：从Bundle中取出Int类型的数据。</li>
</ul>
<p><strong>例如</strong>  ActivityA启动ActivityB，并携带key为“name”数据传递给ActivityB。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(ActivityA.<span class="keyword">this</span>,ActivityB.class); </span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle(); </span><br><span class="line">bundle.putString(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Tom&quot;</span>); </span><br><span class="line">intent.putExtras(bundle); </span><br><span class="line">startActivity(intent); </span><br></pre></td></tr></table></figure>
<p>ActivityB获取传递过来的数据，相应代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = getIntent(); </span><br><span class="line">Bundle bundle = intent.getExtras(); </span><br><span class="line">String name = bundle.getString(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="6-编程实现进程内服务并上机调试"><a class="markdownIt-Anchor" href="#6-编程实现进程内服务并上机调试"></a> 6、编程实现进程内服务，并上机调试。</h2>
<p><strong>例如</strong> 编写一个音乐播放器。继承Service类实现自定义Service，提供在后台播放音乐、暂停音乐、停止音乐的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Intent intent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button playBtn, stopBtn, pauseBtn, exitBtn;</span><br><span class="line">        playBtn = findViewById(R.id.play);</span><br><span class="line">        stopBtn = findViewById(R.id.stop);</span><br><span class="line">        pauseBtn = findViewById(R.id.pause);</span><br><span class="line">        exitBtn = findViewById(R.id.exit);</span><br><span class="line"></span><br><span class="line">        playBtn.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        stopBtn.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        pauseBtn.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        exitBtn.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = -<span class="number">1</span>;</span><br><span class="line">        intent = <span class="keyword">new</span> Intent(<span class="string">&quot;com.holger.androidmusic&quot;</span>);</span><br><span class="line">        intent.setPackage(<span class="keyword">this</span>.getPackageName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.play:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;播放音乐...&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                num = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.stop:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;停止音乐...&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                num = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.pause:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;暂停音乐...&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                num = <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.exit:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;退出...&quot;</span>, Toast.LENGTH_SHORT);</span><br><span class="line">                num = <span class="number">4</span>;</span><br><span class="line">                stopService(intent);</span><br><span class="line">                <span class="keyword">this</span>.finish();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">        bundle.putInt(<span class="string">&quot;music&quot;</span>, num);</span><br><span class="line">        intent.putExtras(bundle);</span><br><span class="line"></span><br><span class="line">        startService(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="keyword">if</span>(intent != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stopService(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在布局中添加三个按钮，用于控制音乐播放、暂停与停止</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;MusicService&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> MediaPlayer mediaPlayer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> reset = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.v(TAG, <span class="string">&quot;onCreate&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (mediaPlayer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mediaPlayer = MediaPlayer.create(<span class="keyword">this</span>, R.raw.music);</span><br><span class="line">            mediaPlayer.setLooping(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.v(TAG, <span class="string">&quot;onDestroy&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (mediaPlayer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mediaPlayer.stop();</span><br><span class="line">            mediaPlayer.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.v(TAG, <span class="string">&quot;onStart&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Bundle bundle = intent.getExtras();</span><br><span class="line">            <span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> num = bundle.getInt(<span class="string">&quot;music&quot;</span>);</span><br><span class="line">                <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>: play(); <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>: stop(); <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>: pause(); <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.v(TAG, <span class="string">&quot;-----------&quot;</span> + reset + <span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (mediaPlayer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (reset)</span><br><span class="line">            mediaPlayer.seekTo(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!mediaPlayer.isPlaying()) &#123;</span><br><span class="line">            mediaPlayer.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reset = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (mediaPlayer != <span class="keyword">null</span> &amp;&amp; mediaPlayer.isPlaying()) &#123;</span><br><span class="line">            mediaPlayer.pause();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reset = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (mediaPlayer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mediaPlayer.stop();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mediaPlayer.prepare();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在清单文件中声明Service，为其添加label标签，便于在系统中识别Service</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;service</span><br><span class="line">          android:name=&quot;.MyService&quot;</span><br><span class="line">          android:label=&quot;@string/app_name&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>界面如下：</p>
<img src="https://repo.live.holgerbest.top/img/wIGWj9QdAbg4kV8.png" alt="界面" style="zoom:67%;" />
<p>点击“播放音乐”按钮后，在后台将会运行着名为“Android Music”的服务</p>
<img src="https://repo.live.holgerbest.top/img/yk8hfZgapbzBGVD.png" alt="“Android Music”的服务" style="zoom:50%;" />
<h2 id="7-编写一app实现sqlite数据库的增删改查"><a class="markdownIt-Anchor" href="#7-编写一app实现sqlite数据库的增删改查"></a> 7、编写一APP，实现SQLite数据库的增删改查。</h2>
<p><strong>例</strong> 设计一个课程管理APP，实现SQLite数据库的增删改查</p>
<p>在工程中创建MainActivity.java、InsertActivity.java、QueryActivity.java、UpdateActivity.java、DeleteActivity.java以及相应的布局文件activity_main.xml、activity_insert.xml、activity_query.xml、activity_update.xml、activity_delete.xml，以及数据库适配器DBAdapter.java、实体类Course.java。</p>
<p>数据库工具类DBAdapter.java，其中定义了内部类BookDBHelper，它是SQLiteOpenHelper的子类，用于建立、更新和打开数据库。主要代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ID = <span class="string">&quot;_id&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COURSENAME = <span class="string">&quot;courseName&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEACHER = <span class="string">&quot;teacher&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TIME = <span class="string">&quot;time&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">&quot;course.db&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_TABLE = <span class="string">&quot;courseinfo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DB_VERSION = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase db;</span><br><span class="line">    <span class="keyword">private</span> CourseDBHelper dbHelper;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBAdapter</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;   <span class="comment">// Close the database</span></span><br><span class="line">        <span class="keyword">if</span> (db != <span class="keyword">null</span>) &#123;</span><br><span class="line">            db.close();</span><br><span class="line">            db = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> <span class="keyword">throws</span> SQLiteException </span>&#123; <span class="comment">// Open the database</span></span><br><span class="line">        dbHelper = <span class="keyword">new</span> CourseDBHelper(context, DB_NAME, <span class="keyword">null</span>, DB_VERSION);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            db = dbHelper.getWritableDatabase();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLiteException ex) &#123;</span><br><span class="line">            db = dbHelper.getReadableDatabase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">insert</span><span class="params">(Course course)</span> </span>&#123;</span><br><span class="line">        ContentValues courseValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        courseValues.put(COURSENAME, course.getCourseName());</span><br><span class="line">        courseValues.put(TEACHER, course.getTeacher());</span><br><span class="line">        courseValues.put(TIME, course.getTime());</span><br><span class="line">        <span class="keyword">return</span> db.insert(DB_TABLE, <span class="keyword">null</span>, courseValues);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Course[] queryAll() &#123;</span><br><span class="line">        Cursor results =  db.query(DB_TABLE, </span><br><span class="line">               <span class="keyword">new</span> String[] &#123; ID, COURSENAME, TEACHER, TIME&#125;,</span><br><span class="line">               <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> ConvertToCourse(results);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Course[] queryOne(<span class="keyword">long</span> id) &#123;</span><br><span class="line">        Cursor results =  db.query(DB_TABLE, <span class="keyword">new</span> String[] &#123; ID, COURSENAME, TEACHER, TIME&#125;,</span><br><span class="line">                ID + <span class="string">&quot;=&quot;</span> + id, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> ConvertToCourse(results);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Course[] ConvertToCourse(Cursor cursor)&#123;</span><br><span class="line">        <span class="keyword">int</span> resultCounts = cursor.getCount();</span><br><span class="line">        <span class="keyword">if</span> (resultCounts == <span class="number">0</span> || !cursor.moveToFirst())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Course[] courseList = <span class="keyword">new</span> Course[resultCounts];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;resultCounts; i++)&#123;</span><br><span class="line">            courseList[i] = <span class="keyword">new</span> Course();</span><br><span class="line">            <span class="keyword">int</span> newId = cursor.getInt(<span class="number">0</span>);</span><br><span class="line">            courseList[i].setID(newId);</span><br><span class="line">            String newCourseName = cursor.getString(cursor.getColumnIndex(COURSENAME));</span><br><span class="line">            courseList[i].setCourseName(newCourseName);</span><br><span class="line">            String newTeacher = cursor.getString(cursor.getColumnIndex(TEACHER));</span><br><span class="line">            courseList[i].setTeacher(newTeacher);</span><br><span class="line">            <span class="keyword">float</span> newTime = cursor.getFloat(cursor.getColumnIndex(TIME));</span><br><span class="line">            courseList[i].setTime(newTime);</span><br><span class="line">            cursor.moveToNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> courseList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">deleteAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> db.delete(DB_TABLE, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">deleteOne</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> db.delete(DB_TABLE,  ID + <span class="string">&quot;=&quot;</span> + id, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">updateOne</span><span class="params">(<span class="keyword">long</span> id , Course course)</span></span>&#123;</span><br><span class="line">        ContentValues courseValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        courseValues.put(COURSENAME, course.getCourseName());</span><br><span class="line">        courseValues.put(TEACHER, course.getTeacher());</span><br><span class="line">        courseValues.put(TIME, course.getTime());</span><br><span class="line">        <span class="keyword">return</span> db.update(DB_TABLE, courseValues,  ID + <span class="string">&quot;=&quot;</span> + id, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态Helper类，用于建立、更新和打开数据库</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseDBHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_CREATE = <span class="string">&quot;create table &quot;</span> +</span><br><span class="line">                DB_TABLE + <span class="string">&quot; (&quot;</span> + ID + <span class="string">&quot; integer primary key autoincrement, &quot;</span> +</span><br><span class="line">                COURSENAME + <span class="string">&quot; text not null, &quot;</span> + TEACHER + <span class="string">&quot; text,&quot;</span> + TIME + <span class="string">&quot; float);&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CourseDBHelper</span><span class="params">(Context context, String name, CursorFactory factory, <span class="keyword">int</span> version)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(context, name, factory, version);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase _db)</span> </span>&#123;</span><br><span class="line">            _db.execSQL(DB_CREATE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase _db, <span class="keyword">int</span> _oldVersion, <span class="keyword">int</span> _newVersion)</span> </span>&#123;</span><br><span class="line">            _db.execSQL(<span class="string">&quot;DROP TABLE IF EXISTS &quot;</span> + DB_TABLE);</span><br><span class="line">            onCreate(_db);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其余详细代码文件可详见附件SQLiteDemo工程文件夹。</p>
<p>运行结果如下：</p>
<p><img src="https://repo.live.holgerbest.top/img/C5ghqGTxWRmrUH4.png" alt="运行结果" /></p>
<h2 id="8-如何发送广播如何接收广播试编程举例说明"><a class="markdownIt-Anchor" href="#8-如何发送广播如何接收广播试编程举例说明"></a> 8、如何发送广播？如何接收广播？试编程举例说明。</h2>
<h3 id="发送广播"><a class="markdownIt-Anchor" href="#发送广播"></a> 发送广播</h3>
<ol>
<li>自定义BroadcastReceiver</li>
</ol>
<p>自定义广播接收器需要继承基类BroadcastReceivre，并实现抽象方法<code>onReceive(context, intent)</code>方法。广播接收器接收到相应广播后，会自动回调<code>onReceive()</code>方法。<code>onReceive()</code>方法中不能执行太耗时的操作，否则将会造成ANR。 一般情况下，根据实际业务需求，<code>onReceive()</code>方法中都会涉及到与其他组件之间的交互，如发送Notification、启动Service等。 自定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;MyBroadcastReceiver&quot;</span>; </span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123; </span><br><span class="line">		Log.d(TAG, <span class="string">&quot;intent: &quot;</span> + intent); </span><br><span class="line">		String name = intent.getStringExtra(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		<span class="comment">//… </span></span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>一个BroadcastReceiver对象只有在被调用<code>onReceive(Context, Intent)</code>时才有效，当从该函数返回后，该对象就无效了，从而结束生命周期。</p>
<ol start="2">
<li>BroadcastReceiver注册类型</li>
</ol>
<p>BroadcastReceiver总体上可以分为两种注册类型：静态注册和动态注册。</p>
<ul>
<li>静态注册</li>
</ul>
<p>直接在<code>AndroidManifest.xml</code>文件中进行注册。规则如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:enabled</span> = <span class="string">[</span>&quot;<span class="attr">true</span>&quot; | &quot;<span class="attr">false</span>&quot;] </span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span> = <span class="string">[</span>&quot;<span class="attr">true</span>&quot; | &quot;<span class="attr">false</span>&quot;] </span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span> = <span class="string">&quot;drawable resource&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:labe</span> <span class="attr">l</span>= <span class="string">&quot;string resource&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span> = <span class="string">&quot;string&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:permission</span> = <span class="string">&quot;string&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:process</span> = <span class="string">&quot;string&quot;</span> &gt;</span> </span><br><span class="line">	…… </span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>其中，需要注意的属性有以下：</p>
<ul>
<li><code>android:exported</code> 用于标识此BroadcastReceiver能否接收其他App发出的广播，其默认值是由Receiver中有无<code>intent-filter</code>决定的，如果有<code>intent-filter</code>，则默认值为<code>true</code>，否则为<code>false</code>。</li>
<li><code>android:name</code> BroadcastReceiver的类名。</li>
<li><code>android:permission</code> 如果设置，具有相应权限的广播发送方发送的广播才能被此BroadcastReceiver所接收。</li>
<li><code>android:process</code> BroadcastReceiver运行所处的进程。默认为App的进程，也可以指定独立的进程。</li>
</ul>
<p>常见的注册形式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">&quot;.MyBroadcastReceiver&quot;</span> &gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>其中，intent-filter用于指定此广播接收器接收特定的广播类型。</p>
<ul>
<li>动态注册</li>
</ul>
<p>动态注册时，无须在AndroidManifest中注册<code>&lt;receiver/&gt;</code>组件。直接在代码中通过调用Context的<code>registerReceiver()</code>函数，可以在程序中动态注册BroadcastReceiver。 典型的写法示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BROADCAST_ACTION = <span class="string">&quot;com.example.corn&quot;</span>; </span><br><span class="line">	<span class="keyword">private</span> BroadcastReceiver mBroadcastReceiver; </span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123; </span><br><span class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main); </span><br><span class="line">        mBroadcastReceiver = <span class="keyword">new</span> MyBroadcastReceiver(); </span><br><span class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(); </span><br><span class="line">        intentFilter.addAction(BROADCAST_ACTION); </span><br><span class="line">        registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		<span class="keyword">super</span>.onDestroy(); </span><br><span class="line">		unregisterReceiver(mBroadcastReceiver); </span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>需要注意的是，Android中所有与观察者模式有关的设计中，一旦涉及到<code>register</code>，必定在相应的时机需要<code>unregister</code>。</p>
<p>动态注册方式隐藏在代码中，比较难发现；需要特别注意的是，在退出程序前要记得调用<code>Context.unregisterReceiver()</code>方法。一般在Activity的<code>onStart()</code>方法中进行注册，在<code>onStop()</code>方法中进行注销。注意：如果在<code>Activity.onResume()方</code>法中注册了，就必须在<code>Activity.onPause()</code>方法中注销。</p>
]]></content>
      <categories>
        <category>Android学习笔记</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 基础语法部分课堂代码</title>
    <url>/2020/07/02/Cpp-learning/</url>
    <content><![CDATA[<h2 id="c-基础语法部分课堂代码"><a class="markdownIt-Anchor" href="#c-基础语法部分课堂代码"></a> C++ 基础语法部分课堂代码</h2>
<p><strong>20200307-验证哥德巴赫猜想</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//验证哥德巴赫猜想</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> qnum = <span class="keyword">int</span>(<span class="built_in">sqrt</span>(num)) + <span class="number">1</span>;	<span class="comment">//空间换时间</span></span><br><span class="line">	<span class="keyword">while</span> (cnt &lt; qnum) &#123;</span><br><span class="line">		<span class="keyword">if</span> (num % cnt == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cnt++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入一个大于2的偶数：&quot;</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">	<span class="keyword">if</span> (num &lt;= <span class="number">2</span> || num % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> cnt = <span class="number">2</span>; cnt &lt; num/<span class="number">2</span>; cnt++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!isPrime(cnt)) &#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (isPrime(num - cnt)) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;可以分解为&quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot;和&quot;</span> &lt;&lt; num - cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>20200307-验证角谷猜想</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//角谷猜想</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入一个正整数：&quot;</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">	<span class="keyword">while</span> (num != <span class="number">1</span>) &#123;</span><br><span class="line">		cnt++;</span><br><span class="line">		<span class="keyword">int</span> last = num;</span><br><span class="line">		<span class="keyword">switch</span> (num % <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:	<span class="comment">//偶数</span></span><br><span class="line">			num /= <span class="number">2</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; last &lt;&lt; <span class="string">&quot;/2=&quot;</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:	<span class="comment">//奇数</span></span><br><span class="line">			num = <span class="number">3</span> * last + <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3*&quot;</span> &lt;&lt; last &lt;&lt; <span class="string">&quot;+1=&quot;</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;共运算了&quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot;步&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200309-猜数字</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//猜数字</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//产生随机数</span></span><br><span class="line">	srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="keyword">int</span> num = rand() % <span class="number">50</span> + <span class="number">50</span>;</span><br><span class="line">	<span class="keyword">int</span> guess, count = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; num &lt;&lt; endl;</span></span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;猜一个1到10000的数字：&quot;</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; guess;</span><br><span class="line">		count++;</span><br><span class="line">		<span class="keyword">if</span> (guess &gt; num) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您猜的数字偏大，再试一次吧！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; num) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您猜的数字偏小，再试一次吧！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">while</span> (guess != num);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您猜对了！正确的数字是&quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;，您一共猜了&quot;</span> &lt;&lt; count &lt;&lt; <span class="string">&quot;次。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200309-常胜将军</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常胜将军</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> coins = <span class="number">21</span>;</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="keyword">int</span> PersonGet, ComputerGet;</span><br><span class="line">		<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;现在有&quot;</span> &lt;&lt; coins &lt;&lt; <span class="string">&quot;枚硬币。&quot;</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你要取的硬币的数量（1-4枚）：&quot;</span>;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; PersonGet;</span><br><span class="line">			<span class="keyword">if</span> (PersonGet &gt;= <span class="number">1</span> &amp;&amp; PersonGet &lt;= <span class="number">4</span> &amp;&amp; PersonGet &lt;= coins)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;你取走的数量是不合法的，请重新输入。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ComputerGet = <span class="number">5</span> - PersonGet;</span><br><span class="line">		coins -= ComputerGet+ PersonGet;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;电脑取走了&quot;</span> &lt;&lt; ComputerGet &lt;&lt; <span class="string">&quot;枚硬币。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125; <span class="keyword">while</span> (coins != <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;你输了！你只能取走这一枚硬币。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>20200309-输出所有的勾股数</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出所有的勾股数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num1, num2, num3;</span><br><span class="line">	<span class="keyword">for</span> (num1 = <span class="number">1</span>; num1 &lt;= <span class="number">100</span>; num1++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (num2 = num1 + <span class="number">1</span>; num2 &lt;= <span class="number">100</span>; num2++) &#123;</span><br><span class="line">			num3 = <span class="built_in">sqrt</span>(num1 * num1 + num2 * num2);</span><br><span class="line">			<span class="keyword">if</span> (num1 * num1 + num2 * num2 == num3 * num3) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; num2 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; num3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200309-36块砖头36人搬</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//36块砖头36人搬, 男人：4块, 女人：2块, 小孩：2人搬1块</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> male, female, child;</span><br><span class="line">	<span class="keyword">for</span> (male = <span class="number">0</span>; male &lt;= <span class="number">9</span>; male++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (female = <span class="number">0</span>; female &lt;= <span class="number">18</span>; female++) &#123;</span><br><span class="line">			child = <span class="number">36</span> - male - female;</span><br><span class="line">			<span class="keyword">if</span> (<span class="number">4</span> * male + <span class="number">2</span> * female + child*<span class="number">0.5</span> ==<span class="number">36</span>) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; male &lt;&lt; <span class="string">&quot;男人，&quot;</span> &lt;&lt; female &lt;&lt; <span class="string">&quot;女人，&quot;</span> &lt;&lt; child &lt;&lt; <span class="string">&quot;小孩。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>20200310-数组初始化</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> array1[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">30000</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; array1[i] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200312-输出30个不重复的1~50的随机数</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出30个不重复的1~50的随机数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> nums[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> flags[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	nums[<span class="number">0</span>] = rand() % <span class="number">50</span> + <span class="number">1</span>;</span><br><span class="line">	flags[nums[<span class="number">0</span>]<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; <span class="number">30</span>) &#123;</span><br><span class="line">		<span class="comment">//srand((unsigned)time(NULL));</span></span><br><span class="line">		<span class="keyword">int</span> temp = rand() % <span class="number">50</span> + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (flags[temp<span class="number">-1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">			nums[i] = temp;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; j++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; nums[j] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200312-字符数组拷贝初探</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符数组拷贝初探</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buff1[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	<span class="keyword">char</span> buff2[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (buff2[i] = buff1[i++]);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; buff2;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200316-函数1：输出所有的水仙花数</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出所有的水仙花数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//function declare</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNarcissistic</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isNarcissistic(i)) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//function define</span></span><br><span class="line"><span class="comment">/*===============================</span></span><br><span class="line"><span class="comment">本函数用于判断一个正整数是否是水仙花数</span></span><br><span class="line"><span class="comment">参数说明：</span></span><br><span class="line"><span class="comment">	int num:待判断的正整数</span></span><br><span class="line"><span class="comment">返回值说明：</span></span><br><span class="line"><span class="comment">	true-是水仙花数；false-不是水仙花数</span></span><br><span class="line"><span class="comment">===============================*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNarcissistic</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (num &gt;= <span class="number">1000</span> || num &lt; <span class="number">100</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	sum += (<span class="keyword">int</span>)<span class="built_in">pow</span>(num / <span class="number">100</span>, <span class="number">3</span>);</span><br><span class="line">	sum += (<span class="keyword">int</span>)<span class="built_in">pow</span>(num % <span class="number">100</span> / <span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">	sum += (<span class="keyword">int</span>)<span class="built_in">pow</span>(num % <span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span> (sum == num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>20200316-函数2：值传递与数组作为函数参数</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递与数组作为函数参数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递：单向传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line"><span class="comment">//数组作为函数参数（数组名即地址，按地址传递）：双向传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	int m = 3, n = 5;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; m &lt;&lt; &#x27; &#x27; &lt;&lt; n &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	exchange(m, n);</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; m &lt;&lt; &#x27; &#x27; &lt;&lt; n &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr1[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	change(arr1, <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; arr1[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">		nums[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = num1;</span><br><span class="line">	num1 = num2;</span><br><span class="line">	num2 = temp;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>20200319-函数默认值参数，指针的sizeof</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//函数默认值参数，指针的sizeof</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">int</span> x = <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//	for (int i = 0; i &lt; 1000; i++) &#123;</span></span><br><span class="line"><span class="comment">//		cout &lt;&lt; &#x27;\r&#x27; &lt;&lt; rand() % 9000 + 1000;</span></span><br><span class="line"><span class="comment">//		delay(1000);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(num) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(ch) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">int</span>* p1;</span><br><span class="line">	<span class="keyword">char</span>* p2;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200321-指针与数组</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2020-3-21 10:49:29</span></span><br><span class="line"><span class="comment">//指针与数组</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;cstring&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 10</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myStrlen</span><span class="params">(<span class="keyword">char</span> buff[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> array1[SIZE];</span><br><span class="line">	<span class="comment">//常规初始化</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">		array1[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; i[array1] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;	<span class="comment">//这样也是可以的 相当于i+array1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//使用指针</span></span><br><span class="line">	<span class="keyword">int</span>* p;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; *p;	指针不知道指向哪里，不要去它的内容</span></span><br><span class="line">	p = array1;	<span class="comment">//数组名即首元素地址</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//如果一个指针指向了数组的首地址，该指针就可以当数组名用</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; p[i] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;	<span class="comment">//指针名当数组名用</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针+-常量=指针；指针-指针=距离</span></span><br><span class="line">	<span class="comment">//版本1</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">		*(p+i) = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *(p + i) &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//版本2</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">		*p = i;</span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br><span class="line">	p = array1;	<span class="comment">//指针回到首地址，防止指针越界</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//char buff1[128] = &quot;hello&quot;;</span></span><br><span class="line">	<span class="comment">//strcpy(buff1, buff1 + 1); 删掉buff1的第一个字符</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用指针计算字符串长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myStrlen</span><span class="params">(<span class="keyword">char</span> buff[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span>* p = buff;</span><br><span class="line">	<span class="keyword">while</span> (*p) p++;</span><br><span class="line">	<span class="keyword">return</span> p - buff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200323-动态分配内存与指针</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态分配内存与指针</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> count;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; count;</span><br><span class="line">	<span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>[count];		<span class="comment">//动态分配内存，p轻易不要修改</span></span><br><span class="line">	<span class="keyword">delete</span> p;		<span class="comment">//new出来内存的一定要delete（程序退出时也会回收）</span></span><br><span class="line">	<span class="comment">//否则程序运行时间长后，程序会有bug</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200323-指针作为函数参数</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指针作为函数参数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange1</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange2</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange3</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange4</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange5</span><span class="params">(<span class="keyword">int</span>&amp;, <span class="keyword">int</span>&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">3</span>, n = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//exchange1(m, n);</span></span><br><span class="line">    <span class="comment">//exchange2(&amp;m, &amp;n);</span></span><br><span class="line">    <span class="comment">//exchange3(&amp;m, &amp;n);</span></span><br><span class="line">    <span class="comment">//exchange4(&amp;m, &amp;n);    报错</span></span><br><span class="line">    exchange5(m, n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按值传递：单向传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange1</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = num1;</span><br><span class="line">    num1 = num2;</span><br><span class="line">    num2 = temp;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按地址传递：双向传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange2</span><span class="params">(<span class="keyword">int</span>* pnum1, <span class="keyword">int</span>* pnum2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *pnum1;</span><br><span class="line">    *pnum1 = *pnum2;</span><br><span class="line">    *pnum2 = temp;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *pnum1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *pnum2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//！指针之间的赋值：单向传递（不是用了指针就一定能双相传递）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange3</span><span class="params">(<span class="keyword">int</span>* pnum1, <span class="keyword">int</span>* pnum2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *ptemp = pnum1;</span><br><span class="line">    pnum1 = pnum2;  <span class="comment">//这里的几条语句仅仅使得pnum1和pnum2交换了指向的变量</span></span><br><span class="line">    pnum2 = ptemp;  <span class="comment">//并没有真正的修改了两者指向的数据</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *pnum1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *pnum2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不要使用未初始化的指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange4</span><span class="params">(<span class="keyword">int</span>* pnum1, <span class="keyword">int</span>* pnum2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* ptemp;</span><br><span class="line">    *ptemp = *pnum1;    <span class="comment">//ptemp指针没有指向的变量-&gt;错误 使用了未初始化的局部变量“ptemp”</span></span><br><span class="line">    <span class="comment">//正确做法：int temp; int* ptemp = &amp;temp; *ptemp = *pnum1  实际上和exchange2一致</span></span><br><span class="line">    *pnum1 = *pnum2;</span><br><span class="line">    *pnum2 = *ptemp;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *pnum1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *pnum2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引用传递：双向传递（比指针高效）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange5</span><span class="params">(<span class="keyword">int</span>&amp; num1, <span class="keyword">int</span>&amp; num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = num1;</span><br><span class="line">    num1 = num2;</span><br><span class="line">    num2 = temp;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用指针处理数组</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">myStrcpy</span><span class="params">(<span class="keyword">char</span>* des, <span class="keyword">char</span>* src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span>* p = des;</span><br><span class="line">	<span class="keyword">char</span>* q = src;</span><br><span class="line">	<span class="keyword">while</span> (*p++ = *q++);</span><br><span class="line">	<span class="keyword">return</span> des;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">revert</span><span class="params">(<span class="keyword">char</span>* src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* p = src;</span><br><span class="line">    <span class="keyword">char</span>* q = src;</span><br><span class="line">    <span class="keyword">while</span> (*q != <span class="string">&#x27;\0&#x27;</span>) q++;</span><br><span class="line">    q--;</span><br><span class="line">    <span class="keyword">while</span> (p &lt; q) &#123;</span><br><span class="line">        <span class="keyword">char</span> temp = *p;</span><br><span class="line">        *p = *q;</span><br><span class="line">        *q = temp;</span><br><span class="line">        p++;</span><br><span class="line">        q--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200326-二维指针：指向指针的指针</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二维指针：指向指针的指针</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span>* months[<span class="number">12</span>] = &#123;		<span class="comment">//指针数组，12个字符数组不必连续，但多了指针数组的空间</span></span><br><span class="line">		<span class="string">&quot;January&quot;</span>, <span class="string">&quot;February&quot;</span>, <span class="string">&quot;March&quot;</span>,     <span class="string">&quot;April&quot;</span>,   <span class="string">&quot;May&quot;</span>,      <span class="string">&quot;June&quot;</span>,</span><br><span class="line">		<span class="string">&quot;July&quot;</span>,    <span class="string">&quot;August&quot;</span>,   <span class="string">&quot;September&quot;</span>, <span class="string">&quot;October&quot;</span>, <span class="string">&quot;November&quot;</span>, <span class="string">&quot;December&quot;</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入一个数字：&quot;</span>; <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">	<span class="keyword">if</span> (num &gt;= <span class="number">1</span> &amp;&amp; num &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; months[num - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入错误&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> months[<span class="number">12</span>][<span class="number">16</span>] = &#123;	<span class="comment">//是连续的，内存浪费：12*16</span></span><br><span class="line">		<span class="string">&quot;January&quot;</span>, <span class="string">&quot;February&quot;</span>, <span class="string">&quot;March&quot;</span>,     <span class="string">&quot;April&quot;</span>,   <span class="string">&quot;May&quot;</span>,      <span class="string">&quot;June&quot;</span>,</span><br><span class="line">		<span class="string">&quot;July&quot;</span>,    <span class="string">&quot;August&quot;</span>,   <span class="string">&quot;September&quot;</span>, <span class="string">&quot;October&quot;</span>, <span class="string">&quot;November&quot;</span>, <span class="string">&quot;December&quot;</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入一个数字：&quot;</span>; <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">	<span class="keyword">if</span> (num &gt;= <span class="number">1</span> &amp;&amp; num &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; months[num - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入错误&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200326-冒泡排序和函数指针（不要求）</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序：对字符串排序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySort</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">int</span>, <span class="keyword">int</span>(*)(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">const</span> <span class="keyword">char</span>*) = &amp;<span class="built_in">strcmp</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span>* months[<span class="number">12</span>] = &#123;		<span class="comment">//待排序指针数组</span></span><br><span class="line">		<span class="string">&quot;January&quot;</span>,	<span class="string">&quot;February&quot;</span>,	<span class="string">&quot;March&quot;</span>,		<span class="string">&quot;April&quot;</span>,		<span class="string">&quot;May&quot;</span>,		<span class="string">&quot;June&quot;</span>,</span><br><span class="line">		<span class="string">&quot;July&quot;</span>,		<span class="string">&quot;August&quot;</span>,	<span class="string">&quot;September&quot;</span>,	<span class="string">&quot;October&quot;</span>,	<span class="string">&quot;November&quot;</span>,	<span class="string">&quot;December&quot;</span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	mySort(months, <span class="number">12</span>);	<span class="comment">//默认字典序排序</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span>.width(<span class="number">16</span>); <span class="built_in">cout</span> &lt;&lt; left;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; months[i];</span><br><span class="line">		<span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">6</span> == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	mySort(months, <span class="number">12</span>, &amp;lengthcmp);	<span class="comment">//根据字符串的长度排序</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span>.width(<span class="number">16</span>); <span class="built_in">cout</span> &lt;&lt; left;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; months[i];</span><br><span class="line">		<span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">6</span> == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据字符串的长度来比较大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="built_in">strlen</span>(str1) - <span class="built_in">strlen</span>(str2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用 函数指针 和 指向指针的指针 排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySort</span><span class="params">(<span class="keyword">char</span>** arr, <span class="keyword">int</span> size, <span class="keyword">int</span>(*op)(<span class="keyword">const</span> <span class="keyword">char</span>* ,<span class="keyword">const</span> <span class="keyword">char</span>*))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (op(arr[j], arr[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="comment">//swap</span></span><br><span class="line">				<span class="keyword">char</span>* temp;</span><br><span class="line">				temp = *(arr + j);</span><br><span class="line">				*(arr + j) = *(arr + j + <span class="number">1</span>);</span><br><span class="line">				*(arr + j + <span class="number">1</span>) = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>应当掌握的方法：</em></p>
<img src="https://repo.live.holgerbest.top/img/2d1yG7bouQZWaPL.png" alt="20200326" style="zoom:67%;" />
<p><strong>20200330-函数重载</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myabs</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ((num &gt; <span class="number">0</span>) ? num : -num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">myabs</span><span class="params">(<span class="keyword">double</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((num &gt; <span class="number">0</span>) ? num : -num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">myabs</span><span class="params">(<span class="keyword">long</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ((num &gt; <span class="number">0</span>) ? num : -num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200330-函数模板</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用模板写一个通用的可以对任意个元素的数值类型的数组排序的函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">对任意个元素的数值类型的数组原地排序（选择排序）</span></span><br><span class="line"><span class="comment">模板参数说明：</span></span><br><span class="line"><span class="comment">	T: 数值类型的数据类型，例如int、long、double等等</span></span><br><span class="line"><span class="comment">形参说明：</span></span><br><span class="line"><span class="comment">	arr: 数组首地址</span></span><br><span class="line"><span class="comment">	size: 数组大小</span></span><br><span class="line"><span class="comment">	reverse: 是否从大到小排序，默认从小到大（false）</span></span><br><span class="line"><span class="comment">返回值说明：</span></span><br><span class="line"><span class="comment">	排序后该数组的首地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T* <span class="title">sort</span><span class="params">(T* <span class="keyword">const</span> arr, <span class="keyword">int</span> size, <span class="keyword">bool</span> reverse = <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (T* forwardPtr = arr; forwardPtr &lt; arr+size<span class="number">-1</span>; forwardPtr++) &#123;</span><br><span class="line">		T* assume = forwardPtr;		<span class="comment">//假设forePtr指向元素最大/小</span></span><br><span class="line">		<span class="keyword">for</span> (T* backPtr = forwardPtr+<span class="number">1</span>; backPtr &lt; arr+size; backPtr++) &#123;</span><br><span class="line">			<span class="comment">//找出指向未排序区域的最大/小元素的指针，用assume保存</span></span><br><span class="line">			<span class="keyword">if</span> (reverse ? (*backPtr &gt; *assume) : (*backPtr &lt; *assume)) &#123;</span><br><span class="line">				assume = backPtr;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (assume != forwardPtr) &#123;	</span><br><span class="line">			<span class="comment">//最大/小不是forePtr指向的元素，交换两指针指向的内容</span></span><br><span class="line">			T temp = *assume;</span><br><span class="line">			*assume = *forwardPtr;</span><br><span class="line">			*forwardPtr = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">输出任意个元素的数值类型的数组</span></span><br><span class="line"><span class="comment">模板参数说明：</span></span><br><span class="line"><span class="comment">	T: 数值类型的数据类型，例如int、long、double等等</span></span><br><span class="line"><span class="comment">形参说明：</span></span><br><span class="line"><span class="comment">	arr: 数组首地址</span></span><br><span class="line"><span class="comment">	size: 数组大小</span></span><br><span class="line"><span class="comment">返回值说明：</span></span><br><span class="line"><span class="comment">	无返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> T* arr, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> T* end = arr + size;</span><br><span class="line">	<span class="keyword">for</span> (; arr &lt; end; arr++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *arr &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">10</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">1</span> &#125;;								<span class="comment">//int数组</span></span><br><span class="line">	show(sort(arr, <span class="number">5</span>), <span class="number">5</span>);</span><br><span class="line">	show(sort(arr, <span class="number">5</span>, <span class="literal">true</span>), <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">double</span> darr[<span class="number">7</span>] = &#123; <span class="number">10.3</span>,<span class="number">-4.4</span>,<span class="number">8.9</span>,<span class="number">0.2</span>,<span class="number">10.0</span>,<span class="number">5.5</span>,<span class="number">-6.7</span> &#125;;	<span class="comment">//double数组</span></span><br><span class="line">	show(sort(darr, <span class="number">7</span>), <span class="number">7</span>);</span><br><span class="line">	show(sort(darr, <span class="number">7</span>, <span class="literal">true</span>), <span class="number">7</span>);</span><br><span class="line">	<span class="keyword">char</span> carr[<span class="number">8</span>] = &#123; <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;(&#x27;</span> &#125;;		<span class="comment">//char数组</span></span><br><span class="line">	show(sort(carr, <span class="number">8</span>), <span class="number">7</span>);</span><br><span class="line">	show(sort(carr, <span class="number">8</span>, <span class="literal">true</span>), <span class="number">8</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200402-文件流</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件流</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">ofstream <span class="title">ofile</span><span class="params">(<span class="string">&quot;d:\\input.txt&quot;</span>)</span></span>;</span><br><span class="line">	<span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">&quot;d:\\output.txt&quot;</span>)</span></span>;	<span class="comment">//物理路径用\\, 虚拟路径用/</span></span><br><span class="line">	<span class="keyword">if</span> (!inFile) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;打开文件失败&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> (!inFile.eof()) &#123;</span><br><span class="line">		ch = inFile.get();</span><br><span class="line">		ch = ch ^ <span class="number">0x80</span>;	<span class="comment">//简单的加密：a^b=c, c^b=a</span></span><br><span class="line">		ofile &lt;&lt; ch;</span><br><span class="line">	&#125;</span><br><span class="line">	inFile.close();</span><br><span class="line">	ofile.close();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200402-二进制文件流</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用二进制方式打开文件，进行读写加密</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">&quot;d:\\input.txt&quot;</span>, ios::binary | ios::in)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (!inFile) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;File Not Found!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">ofstream <span class="title">outFile</span><span class="params">(<span class="string">&quot;d:\\output.txt&quot;</span>, ios::binary | ios::out)</span></span>;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> (!inFile.eof()) &#123;</span><br><span class="line">		inFile.read(&amp;ch, <span class="keyword">sizeof</span>(ch));</span><br><span class="line">		ch ^= <span class="number">0x80</span>;</span><br><span class="line">		outFile.write(&amp;ch, <span class="keyword">sizeof</span>(ch));</span><br><span class="line">	&#125;</span><br><span class="line">	inFile.close();</span><br><span class="line">	outFile.close();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>20200413-静态局部变量</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	num++;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">		test();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++-学习</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>C++</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ string类</title>
    <url>/2020/02/23/Cpp-string/</url>
    <content><![CDATA[<div class="note success flat"><p><strong>主要内容</strong></p>
<p>string类：构造对象、获取长度、访问元素、比较大小、修改内容、输入输出、查找、迭代器</p>
</div>
<a id="more"></a>
<h1 id="构造函数创建string对象"><a class="markdownIt-Anchor" href="#构造函数创建string对象"></a> 构造函数：创建string对象</h1>
<p>要初始化一个string对象，可以使用 C 风格字符串或string对象，也可以使用 C 风格字符串的部分或string类型对象的部分或序列，或者使用string对象提供的<u>迭代器</u>或 <code>(const) char*</code> 指针。</p>
<h2 id="常见的string类构造函数"><a class="markdownIt-Anchor" href="#常见的string类构造函数"></a> 常见的string类构造函数</h2>
<div class="note info flat"><p><strong>下面的两段代码中，约定使用以下标识符带代表相应变量或对象：</strong></p>
<ul>
<li>str表示string对象；cstr表示C风格的字符串（<code>(const) char *</code>）；</li>
<li>iter表示string对象的迭代器；ptr表示char*指针。</li>
</ul>
</div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">()</span></span>;				<span class="comment">//生成空字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(str)</span></span>;			<span class="comment">//生成字符串str的复制品</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(cstr)</span></span>;			<span class="comment">//利用C风格的字符串cstr初始化新的字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(str, num)</span></span>;		<span class="comment">//用字符串str中始于num的部分构造新的字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(cstr, num)</span></span>;	<span class="comment">//以C风格的字符串cstr的前num个字符构造新的字符串</span></span><br><span class="line"><span class="comment">//用字符串（string对象、(const) char *）中始于num长度为len的部分构造新的字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(str, num, len)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(cstr, num, len)</span></span>;</span><br><span class="line"><span class="comment">//使用字符串的迭代器iter（或ptr）来初始化新的字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(iter1, iter2)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(ptr1, ptr2)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(num, ch)</span></span>;		<span class="comment">//生成一个字符串，包含num个ch字符</span></span><br></pre></td></tr></table></figure>
<p>有关使用迭代器或 <code>(const) char*</code> 指针构造string对象的详细说明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(str.begin(), str.end())</span></span>;	<span class="comment">//等价于string s(str);</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(cstr, cstr+字符串长度)</span></span>;		<span class="comment">//等价于string s(cstr);</span></span><br><span class="line"><span class="comment">//截取str的正向索引m（包括）到负向索引n（不包括）的部分初始化字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(str.begin()+m, str.end()-n)</span></span>;</span><br><span class="line"><span class="comment">//截取字符串下标[m, n)区间的部分初始化字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(str.begin()+m, str.begin()+n)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(cstr+m, cstr+n)</span></span>;</span><br></pre></td></tr></table></figure>
<div class="note warning flat"><p>注：第二个参数不用考虑越界问题，但是两个迭代器（指针）位置不能反，否则程序会崩溃。</p>
</div>
<div class="note danger flat"><p>注意：<strong>不能使用字符或者整数去初始化字符串</strong>。</p>
<p>如果字符串只包含一个字符，使用构造函数对其初始化时，使用以下形式比较合理：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>)</span></span>;	<span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">&quot;x&quot;</span>)</span></span>;		<span class="comment">//正确</span></span><br><span class="line"><span class="comment">//错误：string s(&#x27;x&#x27;); </span></span><br></pre></td></tr></table></figure></div>
<h2 id="const-char-与-string-对象"><a class="markdownIt-Anchor" href="#const-char-与-string-对象"></a> <code>(const) char*</code> 与 string 对象</h2>
<p>目前，在C++中存在从 <code>const char*</code> 到string的隐含类型转换，但不存在从string对象到C风格字符串的自动类型转换。</p>
<p>一般来说，任何出现字符串字面值的地方都可以用以<strong>空字符结束的字符数组</strong>来替代：</p>
<ul>
<li>允许使用以<strong>空字符结束的字符数组</strong>来初始化string对象或为string对象赋值。</li>
<li>在string对象的加法运算中允许使用以<strong>空字符结束的字符数组</strong>作为其中的一个运算对象（但不能两个运算对象都是字符数组，这样就相当于将两个相加，是不合法的）</li>
<li>在string对象的复合赋值（+=）中允许使用以<strong>空字符结束的字符数组</strong>作为右侧的运算数。</li>
</ul>
<p>但应注意的是：如果程序的某处需要一个<strong>C风格字符串</strong>，无法直接用string对象来代替它。</p>
<p><strong>例如</strong> 不能用string对象直接初始化指向字符的指针。</p>
<p>为了完成该功能，string专门提供了一个名为c_str的成员函数，返回结果是一个指针，该指针指向一个以空字符（<code>‘\0’</code>）结束的字符数组，所存的数据与string对象的相同。结果指针的类型是const char*，从而<strong>不可以</strong>改变返回的字符数组的内容（即返回的是右值）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *s1 = s；				<span class="comment">//错误：不能用string对象初始化char*</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *s2 = s.c_str();	<span class="comment">//正确</span></span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>注意：在整个程序中应坚持使用string对象，直到必须将内容转化为 <code>char*</code> 时才将其转换为C 风格字符串。</p>
</div>
<p><strong>例</strong> string类构造函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c_str[] = <span class="string">&quot;01234567&quot;</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">cpp_str</span><span class="params">(<span class="string">&quot;abcdefgh&quot;</span>)</span></span>;	<span class="comment">//使用const char*来构造string对象</span></span><br><span class="line"><span class="built_in">string</span> s0;					<span class="comment">//空字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(cpp_str)</span></span>;			<span class="comment">//复制字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(c_str)</span></span>;			<span class="comment">//利用C风格的字符串初始化新的字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(cpp_str, <span class="number">2</span>)</span></span>;		<span class="comment">//用字符串中始于2的部分构造新的字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(c_str, <span class="number">3</span>)</span></span>;		<span class="comment">//以C风格的字符串的前3个字符构造新的字符串</span></span><br><span class="line"><span class="comment">//s5、s6: 用字符串（string、(const) char *）中始于2长度为3的部分构造新的字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s5</span><span class="params">(cpp_str, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s6</span><span class="params">(c_str, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="comment">//s7、s8: 使用字符串的迭代器（或char *）来初始化新的字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s7</span><span class="params">(cpp_str.begin()+<span class="number">2</span>, cpp_str.end()<span class="number">-2</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s8</span><span class="params">(c_str+<span class="number">2</span>, c_str+<span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s9</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;			<span class="comment">//生成一个字符串，包含5个&#x27;a&#x27;字符</span></span><br><span class="line"><span class="comment">/* 错误示例：</span></span><br><span class="line"><span class="comment">* string serr1(1);</span></span><br><span class="line"><span class="comment">* string serr2(&#x27;a&#x27;);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><strong>使用cout输出结果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s0:</span><br><span class="line">s1: abcdefgh</span><br><span class="line">s2: 01234567</span><br><span class="line">s3: cdefgh</span><br><span class="line">s4: 012</span><br><span class="line">s5: cde</span><br><span class="line">s6: 234</span><br><span class="line">s7: cdef</span><br><span class="line">s8: 2345</span><br><span class="line">s9: aaaaa</span><br></pre></td></tr></table></figure>
<h1 id="获取字符串长度"><a class="markdownIt-Anchor" href="#获取字符串长度"></a> 获取字符串长度</h1>
<p>string对象包括三种求解字符串长度的函数：<code>size()</code> 和 <code>length()</code>、 <code>maxsize()</code> 、 <code>capacity()</code>。</p>
<ul>
<li><code>size()</code> 和 <code>length()</code>：都会返回string对象中的字符个数，且执行效果相同。</li>
<li><code>maxsize()</code>：<code>maxsize()</code> 函数返回string对象<strong>最多</strong>包含的字符数（一般为int所能容纳的最大值）。一旦程序使用长度超过 <code>maxsize()</code> 的string操作，编译器会拋出length_error异常。</li>
<li><code>capacity()</code>：该函数返回<strong>在重新分配内存之前</strong>，string对象所能包含的最大字符数。</li>
</ul>
<p>string类还具有一个 <code>reserve()</code> 函数。调用该函数可以为string对象重新分配内存，大小由其参数决定，默认参数为0。</p>
<h1 id="访问字符串元素"><a class="markdownIt-Anchor" href="#访问字符串元素"></a> 访问字符串元素</h1>
<p>字符串中元素是可以访问的，一般有两种方法访问字符串中的单一字符：下标操作符<code>[]</code> 和 成员函数 <code>at()</code>。两者均返回指定的下标位置的字符。</p>
<p><strong>需要注意的是，这两种访问方法是有区别的</strong>（在VS2019下）：</p>
<ul>
<li>下标操作符 <code>[]</code> 在使用时不检查索引的有效性，如果下标超出字符串的长度范围，会示导致未定义行为。
<ul>
<li>对于C风格字符串，使用下标操作符时，字符串的最后字符（即 <code>'\0'</code>，下标等于字符串长度）是有效的；下标越界（大于字符串长度）会导致Warning：读取数据无效，索引超出了的有效范围。</li>
<li>对于string对象，<code>str.length()</code> 的下标访问是有效的，调用返回字符 <code>'\0'</code>；下标越界（大于 <code>length()</code>）会导致传入无效参数而程序崩溃。</li>
</ul>
</li>
<li>成员函数 <code>at()</code> 在使用时会检查下标是否有效。如果给定的下标超出范围<code>[0, length())</code>，系统会抛出out_of_range异常。</li>
</ul>
<p><strong>例</strong> 下标访问的有效问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> cstr[] = <span class="string">&quot;0123456&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> str  = <span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c1 = cstr[<span class="number">7</span>];		<span class="comment">//&#x27;\0&#x27;</span></span><br><span class="line"><span class="keyword">char</span> c2 = cstr[<span class="number">10</span>];		<span class="comment">//Warning：读取数据无效，索引超出了的有效范围</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;		<span class="comment">//无效的输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> h1 = str[str.length()];		<span class="comment">//&#x27;\0&#x27;</span></span><br><span class="line"><span class="keyword">char</span> h2 = str.at(str.length());		<span class="comment">//Error：out_of_range</span></span><br><span class="line"><span class="keyword">char</span> e1 = str[<span class="number">10</span>];					<span class="comment">//程序崩溃：无效数据</span></span><br><span class="line"><span class="keyword">char</span> e2 = str.at(<span class="number">10</span>);				<span class="comment">//Error：out_of_range</span></span><br></pre></td></tr></table></figure>
<h1 id="string对象的比较方法"><a class="markdownIt-Anchor" href="#string对象的比较方法"></a> string对象的比较方法</h1>
<p>字符串可以和类型相同的字符串相比较，也可以和具有同样字符类型的字符数组比较。</p>
<h2 id="比较运算符"><a class="markdownIt-Anchor" href="#比较运算符"></a> 比较运算符</h2>
<p>String 类的常见运算符包括 &gt;、&lt;、==、&gt;=、&lt;=、!=。其意义分别为&quot;大于&quot;、“小于”、“等于”、“大于等于”、“小于等于”、“不等于”。</p>
<div class="note danger flat"><p>注意：对于参加比较的两个字符串，任一个字符串均不能为 <code>NULL</code>，否则程序会异常退出。</p>
</div>
<h2 id="compare-函数"><a class="markdownIt-Anchor" href="#compare-函数"></a> compare() 函数</h2>
<p>string类的成员函数 <code>compare()</code> 返回一个整数来表示比较结果。</p>
<p>如果比较的串与对象相同返回 0；否则按<strong>字典顺序</strong>比较：对象小于（先于）比较的串返回负值，反之返回正值。该函数支持多参数处理，支持用索引值和长度来定位子串进行比较。</p>
<p><strong>compare() 函数原型：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// compare [0, size()) with _Right</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> basic_string&amp; _Right)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="comment">// compare [0, size()) with [_Ptr, &lt;null&gt;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(_In_z_ <span class="keyword">const</span> _Elem* <span class="keyword">const</span> _Ptr)</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="comment">// compare [_Off, _Off + _N0) with _Right</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(size_type _Off, size_type _N0, <span class="keyword">const</span> basic_string&amp; _Right)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="comment">// compare [_Off, _Off + _N0) with [_Ptr, &lt;null&gt;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> size_type _Off, <span class="keyword">const</span> size_type _N0, _In_z_ <span class="keyword">const</span> _Elem* <span class="keyword">const</span> _Ptr)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="comment">// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> size_type _Off, <span class="keyword">const</span> size_type _N0, <span class="keyword">const</span> basic_string&amp; _Right, <span class="keyword">const</span> size_type _Roff, <span class="keyword">const</span> size_type _Count = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="comment">// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> size_type _Off, <span class="keyword">const</span> size_type _N0, _In_reads_(_Count) <span class="keyword">const</span> _Elem* <span class="keyword">const</span> _Ptr, <span class="keyword">const</span> size_type _Count)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong>compare() 的使用方法：</strong></p>
<div class="note info flat"><p><strong>下面的代码中，约定使用以下标识符带代表相应变量或对象：</strong></p>
<ul>
<li>str表示原始string对象，sstr表示另一个string对象；</li>
<li>cstr表示C风格字符串（<code>char*</code>）；pos为下标表示的位置</li>
</ul>
</div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//str（[0, size())）与sstr（[0, size())）或cstr（[cstr, &lt;null&gt;)）比较</span></span><br><span class="line">str.compare(sstr);</span><br><span class="line">str.compare(cstr);</span><br><span class="line"><span class="comment">//str从pos开始的n个字符的子串（[pos, pos+n)）与sstr（[0, size())）、cstr（[cstr, &lt;null&gt;)）比较</span></span><br><span class="line">str.compare(pos, n, sstr);</span><br><span class="line">str.compare(pos, n, cstr);</span><br><span class="line"><span class="comment">//str从pos开始的n个字符的子串（[pos, pos+n)）与sstr从pos2开始的n2个字符的子串（[pos2, pos2+n2)）比较。</span></span><br><span class="line"><span class="comment">//【注】从const char*到string存在隐含类型转换，所以sstr可以换成cstr</span></span><br><span class="line">str.compare(pos, n, sstr, pos2, n2);</span><br><span class="line"><span class="comment">//str从pos开始的n个字符的子串（[pos, pos+n)）与cstr区间[cstr, cstr+n2)的子串比较</span></span><br><span class="line">str.compare(pos, n, cstr, n2);</span><br></pre></td></tr></table></figure>
<h1 id="字符串内容的变化"><a class="markdownIt-Anchor" href="#字符串内容的变化"></a> 字符串内容的变化</h1>
<p>字符串内容的变化包括<strong>修改</strong>和<strong>替换</strong>两种。</p>
<div class="note info flat"><p><strong>这一小节的代码中，约定使用以下标识符带代表相应变量或对象：</strong></p>
<ul>
<li>
<p>str表示原始string对象，sstr表示另一个string对象；cstr表示C风格字符串</p>
</li>
<li>
<p>ch表示char字符；iter表示string对象的迭代器；pos为下标表示的位置</p>
</li>
</ul>
<p>“cstr的前n个字符” 基本都可以替换为 <code>char*</code> 指针，类似 <code>[_Ptr, _Ptr + _Count)</code></p>
</div>
<h2 id="字符串内容的修改"><a class="markdownIt-Anchor" href="#字符串内容的修改"></a> 字符串内容的修改</h2>
<p>可以使用多种方法修改字符串的值。例如赋值运算符= ，<code>assign()</code>，<code>erase()</code>，交换（<code>swap()</code>），插入（<code>insert()</code>）等。另外，还可通过 <code>append()</code> 函数添加字符。</p>
<h3 id="assign-函数"><a class="markdownIt-Anchor" href="#assign-函数"></a> assign() 函数</h3>
<p>使用 assign() 函数可以直接给字符串赋值，并返回复制后字符串的引用。既可以将整个字符串赋值给新串，也可以将字符串的子串赋值给新串。其使用方法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">str.assign(sstr);			<span class="comment">//直接使用字符串sstr/cstr赋值</span></span><br><span class="line">str.assign(cstr, n);		<span class="comment">//使用cstr前n个字符的子串赋值</span></span><br><span class="line">str.assign(sstr, pos);		<span class="comment">//将str的子串[pos, size())赋值给调用串</span></span><br><span class="line">str.assign(sstr, pos, n);	<span class="comment">//将str的子串[pos, pos+n)赋值给调用串</span></span><br><span class="line">str.assign(n, ch) ; 		<span class="comment">//使用n个重复字符ch赋值</span></span><br><span class="line">str.assign(iter1, iter2);	<span class="comment">//使用迭代器赋值</span></span><br></pre></td></tr></table></figure>
<h3 id="erase-函数"><a class="markdownIt-Anchor" href="#erase-函数"></a> erase() 函数</h3>
<p>erase() 函数可以删除整个字符串或者子串的内容。可以不提供参数，默认删除整个字符串；可以提供下标表示的位置；也可以提供迭代器。若不提供或提供下标表示的位置，则返回删除后字符串的引用；若提供迭代器，则返回指向删除后的下一个元素的迭代器。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全部清除（m、n缺省时）\清除子串[pos, size())（n缺省时）\清除子串[pos, pos+n)</span></span><br><span class="line">str.erase([pos[, n=npos]]);</span><br><span class="line"><span class="comment">//清除子串[iter1, end())（iter2缺省时）\清除子串[iter1, iter2)</span></span><br><span class="line">str.ersae(iter1[, iter2]);</span><br></pre></td></tr></table></figure>
<h3 id="swap-函数"><a class="markdownIt-Anchor" href="#swap-函数"></a> swap() 函数</h3>
<p>swap()函数可以交换两个字符串内容，无返回值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">str.swap(sstr);</span><br></pre></td></tr></table></figure>
<h3 id="insert-函数"><a class="markdownIt-Anchor" href="#insert-函数"></a> insert() 函数</h3>
<p>insert() 函数可以将字符或字符串插入到指定位置。位置可由下标指定（返回插入后的字符串的引用），也可以由迭代器指定（返回插入后下一个元素的迭代器）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">str.insert(pos, cstr); 			<span class="comment">//在pos前面插人字符串cstr</span></span><br><span class="line">str.insert(pos, cstr, n); 		<span class="comment">//将cstr的前n个字符插入pos前面</span></span><br><span class="line">str.insert(pos, sstr);			<span class="comment">//在pos前面插人字符串sstr</span></span><br><span class="line">str.insert(pos, sstr, pos2, n); <span class="comment">//在pos前面插人sstr的子串[pos2, pos2+n)</span></span><br><span class="line">str.insert(pos, n, ch); 		<span class="comment">//在pos前面插人n个字符ch</span></span><br><span class="line">str.insert(iter, ch); 			<span class="comment">//在iter位置插入字符ch</span></span><br><span class="line">str.insert(iter, iter1, iter2); <span class="comment">//在iter位置插入串[iter1, iter2)</span></span><br><span class="line">str.insert(iter, n, ch); 		<span class="comment">//在iter位置重复插入n个字符ch</span></span><br></pre></td></tr></table></figure>
<div class="note danger flat"><p><strong>不可</strong>在下标指定位置时只插入一个字符，正确的做法如下。</p>
<p><strong>例</strong> 在字符串str下标3的位置插入字符 <code>‘Z’</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误：str.insert(3, &#x27;Z&#x27;);</span></span><br><span class="line"><span class="comment">//正确：</span></span><br><span class="line">str.insert(<span class="number">3</span>, <span class="number">1</span>, <span class="string">&#x27;Z&#x27;</span>);</span><br><span class="line">str.insert(<span class="number">3</span>, <span class="string">&quot;Z&quot;</span>);</span><br><span class="line">str.insert(str.begin()+<span class="number">3</span>, <span class="string">&#x27;Z&#x27;</span>);</span><br></pre></td></tr></table></figure></div>
<h3 id="append-函数"><a class="markdownIt-Anchor" href="#append-函数"></a> append() 函数</h3>
<p>append() 函数用于向字符串追加内容，其用法和insert() 函数相差不大，相当于固定pos=npos，iter=end()，但返回值均为返回追加后的字符串的引用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">str.append(cstr); 			<span class="comment">//追加字符串cstr</span></span><br><span class="line">str.append(cstr, n); 		<span class="comment">//将cstr的前n个字符追加到末尾</span></span><br><span class="line">str.append(sstr);			<span class="comment">//追加字符串sstr</span></span><br><span class="line">str.append(sstr, pos2, n); 	<span class="comment">//追加sstr的子串[pos2, pos2+n)</span></span><br><span class="line">str.append(n, ch); 			<span class="comment">//追加n个字符ch</span></span><br><span class="line">str.append(iter1, iter2); 	<span class="comment">//使用迭代器追加串[iter1, iter2)</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串内容的替换"><a class="markdownIt-Anchor" href="#字符串内容的替换"></a> 字符串内容的替换</h2>
<ul>
<li>
<p>修改指定位置字符的值：下标访问修改。</p>
</li>
<li>
<p>替换某个子串：成员函数 replace() 。</p>
</li>
</ul>
<h3 id="replace-函数"><a class="markdownIt-Anchor" href="#replace-函数"></a> replace() 函数</h3>
<p>replace() 函数可以用于替换字符串，返回替换后的字符串的引用。</p>
<p>使用下标指定的位置：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 将源串的[pos, pos+n)部分使用cstr替换</span></span><br><span class="line">str.replace(pos, n, cstr);</span><br><span class="line"><span class="comment">//2. 将源串的[pos, pos+n)部分使用cstr的前num个字符替换</span></span><br><span class="line">str.replace(pos, n, cstr, num);</span><br><span class="line"><span class="comment">//3. 将源串的[pos, pos+n)部分使用sstr替换</span></span><br><span class="line">str.replace(pos, n, sstr);</span><br><span class="line"><span class="comment">//4. 将源串的[pos, pos+n)部分使用sstr的[pos1, pos1+n1)子串替换</span></span><br><span class="line">str.replace(pos, n, sstr, pos1, n1);</span><br><span class="line"><span class="comment">//5. 将源串的[pos, pos+n)部分使用sstr的[pos1, sstr.size())子串替换</span></span><br><span class="line">str.replace(pos, n, sstr, pos1);</span><br><span class="line"><span class="comment">//6. 将源串的[pos, pos+n)部分使用num个字符ch替换</span></span><br><span class="line">str.replace(pos, n, num, ch);</span><br></pre></td></tr></table></figure>
<p>使用迭代器：</p>
<p>和下标的形式差别不大，函数的前两个参数换为 <code>iter1</code> 和 <code>iter2</code> ，表示源串的 <code>[iter1, iter2)</code> 部分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. [iter1, iter2) -&gt; cstr</span></span><br><span class="line">str.replace(iter1, iter2, cstr);</span><br><span class="line"><span class="comment">//2. [iter1, iter2) -&gt; [cstr, cstr+num)</span></span><br><span class="line">str.replace(iter1, iter2, cstr, num);</span><br><span class="line"><span class="comment">//3. [iter1, iter2) -&gt; sstr</span></span><br><span class="line">str.replace(iter1, iter2, sstr);</span><br><span class="line"><span class="comment">//4.5. [iter1, iter2) -&gt; [iter_n1, iter_n2)</span></span><br><span class="line">str.replace(iter1, iter2, iter_n1, iter_n2);</span><br><span class="line"><span class="comment">//6. [iter1, iter2) -&gt; num个字符ch</span></span><br><span class="line">str.replace(iter1, iter2, num, ch);</span><br></pre></td></tr></table></figure>
<h1 id="字符串输入输出操作"><a class="markdownIt-Anchor" href="#字符串输入输出操作"></a> 字符串输入输出操作</h1>
<h2 id="流运算符"><a class="markdownIt-Anchor" href="#流运算符"></a> 流运算符</h2>
<p>“&lt;&lt;” 和 “&gt;&gt;” 提供了C++语言的字符串输入和字符串输出功能。</p>
<ul>
<li>“&lt;&lt;” 可以将字符插入到一个流对象中（例如 ostream）；</li>
<li>“&gt;&gt;” 可以实现将以空格或回车为 “结束符” 的字符序列读入到对应的字符串中，并且开头和结尾的空白字符不包括进字符串中。</li>
</ul>
<h2 id="getline-函数"><a class="markdownIt-Anchor" href="#getline-函数"></a> getline() 函数</h2>
<p>getline() 函数可将整行的所有字符读到字符串中，并且读取的方式更加多样。该函数的原型包括两种形式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//包含2个参数：第1个参数是输入流对象_Istr；第2个参数是保存输入内容的字符串_Str</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">CharType</span>, <span class="keyword">class</span> <span class="title">Traits</span>, <span class="keyword">class</span> <span class="title">Allocator</span>&gt;</span></span><br><span class="line">basic_istream&lt;CharType, Traits&gt;&amp; getline(basic_istream&lt;CharType, Traits&gt;&amp; _Istr, basic_string&lt;CharType，Traits, Allocator&gt;&amp; _Str);</span><br><span class="line"><span class="comment">//包含3个参数：第1个参数是输入流对象_ Istr，第 2 个参数保存输入的字符串_Str，第3个参数指定的分界符_Delim。</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">CharType</span>, <span class="keyword">class</span> <span class="title">Traits</span>, <span class="keyword">class</span> <span class="title">Allocator</span>&gt;</span></span><br><span class="line">basic_istream&lt;CharType, Traits&gt;&amp; getline(basic_istream&lt;CharType, Traits&gt;&amp; _Istr, basic_string&lt;CharType, Traits, Allocator&gt;&amp; _Str, CharType _Delim);</span><br></pre></td></tr></table></figure>
<p>在读取字符时，遇到文件结束符、分界符、回车符时，将终止读入操作，且文件结束符、分界符、回车符在字符串中不会保存；当已读入的字符数目超过字符串所能容纳的最大字符数时，将会终止读入操作。</p>
<h1 id="字符串查找函数"><a class="markdownIt-Anchor" href="#字符串查找函数"></a> 字符串查找函数</h1>
<p>在STL中，字符串的查找可以实现多种功能：</p>
<ul>
<li>搜索单个字符、子串；</li>
<li>实现前向搜索、后向搜索；</li>
<li>分别实现搜索第一个和最后一个满足条件的字符（或子串）；</li>
</ul>
<h2 id="stringnpos-静态成员常量"><a class="markdownIt-Anchor" href="#stringnpos-静态成员常量"></a> string::npos 静态成员常量</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> npos = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>
<p><code>npos</code>是静态成员常量值，值为size_t类型可能的最大值。</p>
<p>当这个值在字符串成员函数中的长度或者子长度被使用时，该值表示**“直到字符串结尾”<strong>。作为返回值他通常被用作表明</strong>没有匹配**。</p>
<p>此常量的值定义为<code>-1</code>，由于size_type是无符号类型，故需转换为无符号整数类型，因此它是此类型可表示值的最大值。不过实际值还是取决于size_type的实际定义类型，即无符号整型 <code>unsigned int</code> 的-1或无符号长整型 <code>unsigned long</code> 的-1。</p>
<h2 id="find-和-rfind"><a class="markdownIt-Anchor" href="#find-和-rfind"></a> find() 和 rfind()</h2>
<p>find() 或 rfind() 函数用于在源串中<strong>查找完全相同的</strong>字符（串）或子串。</p>
<p>find() 或 rfind() 函数没有搜索到期望的字符（或子串），则返回 <code>npos</code>；若搜索成功，find() 返回搜索到的第 1 个字符或子串的位置，rfind() 返回逆向搜索到的第 1 个字符或子串的位置。</p>
<p>find() 的使用方法：</p>
<div class="note info flat"><p><strong>在下面的代码中，约定使用以下标识符带代表相应变量或对象：</strong></p>
<p>str表示原始string对象，sstr表示另一个string对象；cstr表示C风格字符串</p>
<p>ch表示char字符；pos为下标表示的位置</p>
<p>注：“cstr的前n个字符” 基本都可以替换为 <code>char*</code> 指针，类似 <code>[_Ptr, _Ptr + _Count)</code></p>
</div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在源串str中下标pos位置（默认为0）开始查找1个字符ch</span></span><br><span class="line">str.find(ch, pos=<span class="number">0</span>);</span><br><span class="line"><span class="comment">//在源串str中下标pos位置（默认为0）开始查找C风格字符串cstr</span></span><br><span class="line">str.find(cstr, pos=<span class="number">0</span>);</span><br><span class="line"><span class="comment">//在源串str中下标pos位置开始查找C风格字符串cstr的前num个字符的子串</span></span><br><span class="line">str.find(cstr, pos, num);</span><br><span class="line"><span class="comment">//在源串str中下标pos位置开始查找字符串对象sstr</span></span><br><span class="line">str.find(sstr, pos=<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>rfind() 函数的功能和 find() 函数的功能类似，参数情况也类似，不同之处pos默认为npos，逻辑为<strong>在源串中下标pos位置之前</strong>逆向查找。</p>
<h2 id="find_first_of-和-find_last_of"><a class="markdownIt-Anchor" href="#find_first_of-和-find_last_of"></a> find_first_of() 和 find_last_of()</h2>
<p>find_first_of() 函数和 find_last_of() 函数的使用方式、参数表与上述基本相同。</p>
<p>find_first_of() 函数最容易出错的地方是和 find() 函数搞混。find_first_of() 最大的区别就是如果在一个源串中查找另一个字符串，<strong>如果源串中含有另一个字符串中的任何字符（或当实参为字符类型时，源串中含有指定字符），就会查找成功</strong>，并返回任何一个字符首次在源串中出现的位置（find_last_of() 与 rfind() 的逆向查找相似）。</p>
<h2 id="find_first_not_of-和-find_last_not_of"><a class="markdownIt-Anchor" href="#find_first_not_of-和-find_last_not_of"></a> find_first_not_of() 和 find_last_not_of()</h2>
<p>find_first_not_of() 函数和 find_last_not_of() 函数的使用方式、参数表与上述基本相同。</p>
<p>find_first_not_of() 函数可实现在源串中搜索<strong>与指定字符（串）不相等的第 1 个字符</strong>；find_last_not_of() 函数可实现在源串中搜索<strong>与指定字符（串）不相等的最后 1 个字符</strong>（与 rfind() 的逆向查找相似）。</p>
<h1 id="string类的迭代器"><a class="markdownIt-Anchor" href="#string类的迭代器"></a> string类的迭代器</h1>
<h2 id="迭代器的定义"><a class="markdownIt-Anchor" href="#迭代器的定义"></a> 迭代器的定义</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>::iterator 迭代器名称;</span><br></pre></td></tr></table></figure>
<h2 id="几个常用的迭代器"><a class="markdownIt-Anchor" href="#几个常用的迭代器"></a> 几个常用的迭代器</h2>
<p>begin() 和 end() 为正向迭代提供支持；rbegin() 和 rend() 为反向迭代提供支持。</p>
<ul>
<li>
<p>begin() 返回指向字符串第一个字符的迭代器；</p>
</li>
<li>
<p>end() 返回指向字符串最后一个字符串的后一个位置的迭代器；</p>
</li>
<li>
<p>rbegin() 返回指向字符串最后一个字符的迭代器；</p>
</li>
<li>
<p>rend() 返回指向字符串第一个字符的前一个位置的迭代器。</p>
</li>
</ul>
<p>迭代器的使用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">string</span>::iterator iter = str.begin(); iter != str.end(); iter++) &#123;    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++-简明STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>字符串</tag>
        <tag>string类</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构知识点-基础部分</title>
    <url>/2021/01/12/DataStructure-1/</url>
    <content><![CDATA[<h1 id="数据结构的基本概念"><a class="markdownIt-Anchor" href="#数据结构的基本概念"></a> 数据结构的基本概念</h1>
<ul>
<li>数据结构
<ul>
<li>逻辑结构
<ul>
<li>线性结构</li>
<li>非线性结构</li>
</ul>
</li>
<li>存储结构（物理结构）</li>
<li>数据的运算</li>
</ul>
</li>
</ul>
<a id="more"></a>
<p>数据：能输入到计算机中，并能被计算机程序识别和处理的符号。</p>
<p>数据元素：<strong>数据</strong>的基本单位。</p>
<p>数据项：构成<strong>数据元素</strong>的最小单位。</p>
<p>数据结构：相互之间存在一定<strong>关系</strong>的数据元素的集合。</p>
<blockquote>
<p>四类基本数据结构：集合、线性结构、树形结构、图形结构。</p>
</blockquote>
<p>逻辑结构：<strong>数据元素</strong>以及它们之间的关系。</p>
<p>存储结构（物理结构）：数据及其逻辑结构在计算机中的<strong>表示（映像）</strong>。</p>
<blockquote>
<p>数据的存储方式：顺序存储、链式存储、索引存储（附加索引表）、散列存储。</p>
</blockquote>
<p>算法：对特定问题求解的一般步骤，是<strong>指令</strong>的<strong>有限序列</strong>。</p>
<p><strong>算法的特性</strong>：1. 有穷性；2. 确定性；3. 可行性</p>
<p>（渐进）时间复杂度：当问题规模充分大时，算法中基本语句的执行次数。在渐进意义下的阶。<em>大O表示法</em></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1) &lt; O(log_2 n) &lt; O(n) &lt; O(n log_2 n) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>空间复杂度：算法在执行过程中需要的辅助空间数量。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 类与对象（下）</title>
    <url>/2020/02/16/Java-OO1/</url>
    <content><![CDATA[<img src="https://repo.live.holgerbest.top/img/NSwIfVCotyMBcRJ.png" alt="Java" style="zoom:50%;" />
<h1 id="类的访问权限控制"><a class="markdownIt-Anchor" href="#类的访问权限控制"></a> 类的访问权限控制</h1>
<h2 id="1-类的访问权限"><a class="markdownIt-Anchor" href="#1-类的访问权限"></a> 1、类的访问权限</h2>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">无修饰（default）</th>
<th style="text-align:center">public</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">同一包中的类</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">不同包中的类</td>
<td style="text-align:center"><strong>否</strong></td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="2-类成员的访问权限"><a class="markdownIt-Anchor" href="#2-类成员的访问权限"></a> 2、类成员的访问权限</h2>
<ul>
<li>公有(public)：可以被其他任何方法访问(前提是对类成员所属的类有访问权限)</li>
<li>保护(protected)：只可被同一类及其子类的方法访问</li>
<li>私有(private)：只可被同一类的方法访问</li>
<li>默认(default)：仅允许同一个包内的访问，又被称为“包（package）访问权限”</li>
</ul>
<p>下表展示了类成员在不同范围的访问权限：</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">private</th>
<th style="text-align:center">无修饰（default）</th>
<th style="text-align:center">protected</th>
<th style="text-align:center">public</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">同一类</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">同一包中的子类</td>
<td style="text-align:center"><strong>否</strong></td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">同一包中的非子类</td>
<td style="text-align:center"><strong>否</strong></td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">不同包中的子类</td>
<td style="text-align:center"><strong>否</strong></td>
<td style="text-align:center"><strong>否</strong></td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">不同包中的非子类</td>
<td style="text-align:center"><strong>否</strong></td>
<td style="text-align:center"><strong>否</strong></td>
<td style="text-align:center"><strong>否</strong></td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
<ul>
<li>如果要允许其它没有权限访问的类访问一些实例变量的值，需要在类中声明相应的公有方法。</li>
<li>通常有两类典型的方法用于访问属性值，get方法及set方法。
<ul>
<li>get方法：功能是<strong>取得</strong>属性变量的值，名以 <code>get</code> 开头，后面是实例变量的名字。</li>
<li>set方法：功能是<strong>改变</strong>属性变量的值，名以 <code>set</code> 开头，后面是实例变量的名字。</li>
<li>this关键字：如果方法内的局部变量（包括形参）名与实例变量名相同，则方法体内访问实例变量时需要this关键字，即 <code>this.实例变量</code> 。</li>
</ul>
</li>
</ul>
<h1 id="对象初始化"><a class="markdownIt-Anchor" href="#对象初始化"></a> 对象初始化</h1>
<ul>
<li>
<p>对象初始化：系统在生成对象时，会为对象分配内存空间，并自动调用<strong>构造方法</strong>对实例变量进行初始化</p>
</li>
<li>
<p>对象回收：对象不再使用时，系统会调用垃圾回收程序将其占用的内存回收</p>
</li>
</ul>
<h2 id="1-构造方法"><a class="markdownIt-Anchor" href="#1-构造方法"></a> 1、构造方法</h2>
<p>用来初始化对象，每个类都需要有构造方法。</p>
<ul>
<li>方法名与类名相同；</li>
<li><strong>不定义返回类型</strong>；</li>
<li>通常被声明为公有的(public)；</li>
<li>可以有任意多个参数；</li>
<li>主要作用是完成对象的初始化工作；</li>
<li>不能在程序中显式的调用；</li>
<li>在生成一个对象时，会<strong>自动调用</strong>该类的构造方法为新对象初始化；</li>
<li>若未显式声明构造方法，编译器隐含生成<strong>默认的构造方法</strong>。</li>
</ul>
<h3 id="默认构造方法"><a class="markdownIt-Anchor" href="#默认构造方法"></a> 默认构造方法</h3>
<ul>
<li>没有参数（内部类除外），方法体为空；</li>
<li>使用默认的构造方法初始化对象时，如果在类声明中没有给实例变量赋初值，则对象的属性值为<strong>零或空</strong>；</li>
</ul>
<h3 id="自定义构造方法与方法重载"><a class="markdownIt-Anchor" href="#自定义构造方法与方法重载"></a> 自定义构造方法与方法重载</h3>
<ul>
<li>
<p>在生成对象时给构造方法传送初始值（参数表），为对象进行初始化。</p>
</li>
<li>
<p>构造方法可以被重载</p>
<p>一个类中有两个及以上同名的方法，但<strong>参数表</strong>不同，这种情况就被称为方法重载。</p>
<p>在方法调用时，可以通过参数列表的不同来辨别应调用哪一个方法。</p>
</li>
<li>
<p>只要显式声明了构造方法，编译器就<strong>不再</strong>生成默认的构造方法。</p>
</li>
<li>
<p>也可以显式声明<strong>无参数的构造方法</strong>，方法体中可以定义<strong>默认初始化方式</strong>。</p>
</li>
</ul>
<h3 id="声明构造方法时使用this关键字"><a class="markdownIt-Anchor" href="#声明构造方法时使用this关键字"></a> 声明构造方法时使用this关键字</h3>
<ul>
<li>可以使用this关键字在一个构造方法中<strong>调用另外的构造方法</strong>；</li>
<li>代码更简洁，维护起来也更容易；</li>
<li>通常用<strong>参数个数比较少</strong>的构造方法调用参数个数最多的构造方法。</li>
</ul>
<h2 id="2-final变量的初始化"><a class="markdownIt-Anchor" href="#2-final变量的初始化"></a> 2、final变量的初始化</h2>
<ul>
<li>实例变量和类变量都可被声明为final：一经初始化就不能再改变;</li>
<li><strong>final实例变量</strong>可以在<strong>类中定义时给出初始值</strong>，或者在<strong>每个构造方法结束之前</strong>完成初始化;</li>
<li><strong>final类变量</strong>必须在<strong>声明的同时</strong>初始化。</li>
</ul>
<h1 id="内存回收"><a class="markdownIt-Anchor" href="#内存回收"></a> 内存回收</h1>
<p>当一个对象在程序中不再被使用时，就成为一个无用对象，将在必要时被自动回收。</p>
<h2 id="1-对象的自动回收"><a class="markdownIt-Anchor" href="#1-对象的自动回收"></a> 1、对象的自动回收</h2>
<ul>
<li>无用对象
<ul>
<li>离开了作用域的对象；</li>
<li>无引用指向对象。</li>
</ul>
</li>
<li>Java运行时系统通过<strong>垃圾收集器</strong>周期性地释放无用对象所使用的内存。</li>
<li>Java运行时系统会在对对象进行自动垃圾回收前，自动调用对象的<code>finalize()</code> 方法。</li>
</ul>
<h2 id="2-垃圾收集器"><a class="markdownIt-Anchor" href="#2-垃圾收集器"></a> 2、垃圾收集器</h2>
<ul>
<li>自动扫描对象的<strong>动态内存区</strong>，对不再使用的对象做上标记以进行垃圾回收；</li>
<li>作为一个后台线程运行，通常在系统空闲时<strong>异步</strong>地执行；</li>
<li>在对象被回收之前的最后时刻，会自动调用名为finalize的方法；</li>
<li>可以在这个方法中<strong>释放资源</strong>。</li>
</ul>
<h2 id="3-finalize方法"><a class="markdownIt-Anchor" href="#3-finalize方法"></a> 3、finalize()方法</h2>
<ul>
<li>
<p>在类<code>java.lang.Object</code>中声明，因此Java中的每一个类都有该方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>用于释放资源。</p>
</li>
<li>
<p>类可以覆盖（重写）finalize()方法。</p>
</li>
<li>
<p><code>finalize()</code> 方法有可能<strong>在任何时机以任何次序执行</strong>，所以在 <code>finalize()</code> 方法中释放资源<strong>不能有严格的次序关系</strong>——<code>finalize()</code> 方法在什么时候执行不会影响程序的正确性。</p>
</li>
</ul>
<h1 id="枚举类"><a class="markdownIt-Anchor" href="#枚举类"></a> 枚举类</h1>
<p>对象的可取值为可列举的特定的值时，可以使用枚举类型。</p>
<h2 id="1-声明枚举类"><a class="markdownIt-Anchor" href="#1-声明枚举类"></a> 1、声明枚举类</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[public] enum 枚举类型名称 [implements 接口名称列表] &#123;</span><br><span class="line">    枚举值<span class="number">1</span> (实参表),</span><br><span class="line">    枚举值<span class="number">2</span> (实参表),</span><br><span class="line">    ……;</span><br><span class="line">    变量成员声明及初始化;</span><br><span class="line">    方法声明及方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：枚举类中也可以声明构造方法和其他用于操作枚举对象的方法。</p>
<p><strong>因为枚举值是常量，因此枚举类型的枚举值的名称应该以大写字母表示。</strong></p>
<h2 id="2-枚举类的特点"><a class="markdownIt-Anchor" href="#2-枚举类的特点"></a> 2、枚举类的特点</h2>
<ul>
<li>枚举定义实际上是定义了一个类；</li>
<li>所有枚举类型都隐含继承（扩展）自 <code>java.lang.Enum</code>，因此枚举类型<strong>不能再继承其他任何类</strong>；</li>
<li>枚举类型的类体中可以包括方法和变量；</li>
<li>枚举类型的<strong>构造方法</strong>必须是<strong>包内私有</strong>（default）或者<strong>私有</strong>（private）的。定义在枚举开头的常量会被<strong>自动创建</strong>，在创建时会根据提供的参数<strong>自动地调用枚举类的构造方法</strong>。不能自己调用枚举类构造函数来创建对象。</li>
</ul>
<h2 id="3-枚举类型的默认方法"><a class="markdownIt-Anchor" href="#3-枚举类型的默认方法"></a> 3、枚举类型的默认方法</h2>
<ul>
<li>静态的 <code>values()</code> 方法用于获得枚举类型的枚举值的数组，此方法通常与 for-each 构造（增强的for循环）结合使用，以迭代枚举类型的值；</li>
<li><code>toString</code> 方法返回枚举值的字符串描述；</li>
<li><code>valueOf</code> 方法将以字符串形式表示的枚举值转化为枚举类型的对象；</li>
<li><code>Ordinal</code> 方法获得对象在枚举类型中的位置索引。</li>
</ul>
<h2 id="4-举例"><a class="markdownIt-Anchor" href="#4-举例"></a> 4、举例</h2>
<blockquote>
<p>该程序引自oracle Java文档：<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">Enum Types</a></p>
</blockquote>
<p>下面是一个示例程序，它获取您在地球上的重量（任何单位），计算并输出您在所有行星上的重量（同一单位）：<code>Planet</code></p>
<blockquote>
<p>Here is a sample program that takes your weight on earth (in any unit) and calculates and prints your weight on all of the planets (in the same unit):<code>Planet</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Planet</span> </span>&#123;</span><br><span class="line">    MERCURY (<span class="number">3.303e+23</span>, <span class="number">2.4397e6</span>),</span><br><span class="line">    VENUS   (<span class="number">4.869e+24</span>, <span class="number">6.0518e6</span>),</span><br><span class="line">    EARTH   (<span class="number">5.976e+24</span>, <span class="number">6.37814e6</span>),</span><br><span class="line">    MARS    (<span class="number">6.421e+23</span>, <span class="number">3.3972e6</span>),</span><br><span class="line">    JUPITER (<span class="number">1.9e+27</span>,   <span class="number">7.1492e7</span>),</span><br><span class="line">    SATURN  (<span class="number">5.688e+26</span>, <span class="number">6.0268e7</span>),</span><br><span class="line">    URANUS  (<span class="number">8.686e+25</span>, <span class="number">2.5559e7</span>),</span><br><span class="line">    NEPTUNE (<span class="number">1.024e+26</span>, <span class="number">2.4746e7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mass;   <span class="comment">// in kilograms</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> radius; <span class="comment">// in meters</span></span><br><span class="line">    Planet(<span class="keyword">double</span> mass, <span class="keyword">double</span> radius) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mass = mass;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">mass</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mass; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">radius</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> radius; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// universal gravitational constant  (m3 kg-1 s-2)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> G = <span class="number">6.67300E-11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">surfaceGravity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> G * mass / (radius * radius);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">surfaceWeight</span><span class="params">(<span class="keyword">double</span> otherMass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> otherMass * surfaceGravity();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Usage: java Planet &lt;earth_weight&gt;&quot;</span>);</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> earthWeight = Double.parseDouble(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">double</span> mass = earthWeight/EARTH.surfaceGravity();</span><br><span class="line">        <span class="keyword">for</span> (Planet p : Planet.values())</span><br><span class="line">           System.out.printf(<span class="string">&quot;Your weight on %s is %f%n&quot;</span>,</span><br><span class="line">                             p, p.surfaceWeight(mass));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果提供175作为命令行参数运行，则会得到下面的结果：<code>Planet.class</code></p>
<blockquote>
<p>If you run from the command line with an argument of 175, you get this output:<code>Planet.class</code></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ java Planet 175</span><br><span class="line">Your weight on MERCURY is 66.107583</span><br><span class="line">Your weight on VENUS is 158.374842</span><br><span class="line">Your weight on EARTH is 175.000000</span><br><span class="line">Your weight on MARS is 66.279007</span><br><span class="line">Your weight on JUPITER is 442.847567</span><br><span class="line">Your weight on SATURN is 186.552719</span><br><span class="line">Your weight on URANUS is 158.397260</span><br><span class="line">Your weight on NEPTUNE is 199.207413</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>Java</tag>
        <tag>学习笔记</tag>
        <tag>类与对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 类与对象（上）</title>
    <url>/2020/02/16/Java-OO0/</url>
    <content><![CDATA[<img src="https://repo.live.holgerbest.top/img/NSwIfVCotyMBcRJ.png" alt="Java" style="zoom:50%;" />
<h1 id="类声明与对象创建"><a class="markdownIt-Anchor" href="#类声明与对象创建"></a> 类声明与对象创建</h1>
<h2 id="1-类与对象的关系"><a class="markdownIt-Anchor" href="#1-类与对象的关系"></a> 1、类与对象的关系</h2>
<ul>
<li>类是对一类对象的描述 ；</li>
<li>对象是类的具体实例 。</li>
</ul>
<a id="more"></a>
<h2 id="2-类声明"><a class="markdownIt-Anchor" href="#2-类声明"></a> 2、类声明</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">public</span>] [<span class="keyword">abstract</span> | <span class="keyword">final</span>] <span class="class"><span class="keyword">class</span> 类名称</span></span><br><span class="line">[extends 父类名称]</span><br><span class="line">	[implements 接口名称列表]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//类体</span></span><br><span class="line">	数据成员声明及初始化;</span><br><span class="line">	方法声明及方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>class</code>：表明其后声明的是一个类。</li>
<li><code>extends</code>：如果所声明的类是从某一父类派生而来，那么类的名字应写在<code>extends</code>之后</li>
<li><code>implements</code>：如果所声明的类要实现某些接口，那么名字应写在<code>implements</code>之后</li>
<li><code>public</code>：表明此类为公有类</li>
<li><code>abstract</code>： 指明此类为抽象类</li>
<li><code>final</code>：指明此类为终结类</li>
</ul>
<h2 id="3-对象的声明与创建"><a class="markdownIt-Anchor" href="#3-对象的声明与创建"></a> 3、对象的声明与创建</h2>
<ul>
<li>创建类的实例（对象），通过使用功能。</li>
</ul>
<h3 id="对象引用声明"><a class="markdownIt-Anchor" href="#对象引用声明"></a> 对象引用声明</h3>
<p>语法：<code>类名 引用变量名;</code></p>
<p>注意：声明一个引用变量时并没有生成对象。</p>
<h3 id="对象的创建"><a class="markdownIt-Anchor" href="#对象的创建"></a> 对象的创建</h3>
<p>语法：<code>new 类名( [初始化参数] )</code></p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Clock aclock;			<span class="comment">//对象引用声明</span></span><br><span class="line">aclock = <span class="keyword">new</span> Clock();	<span class="comment">//对象创建</span></span><br></pre></td></tr></table></figure>
<p><strong>new的作用：</strong></p>
<ul>
<li>（运行时）在内存中为这一类型的对象分配内存空间</li>
<li>返回对象的<strong>引用</strong></li>
</ul>
<div class="note info flat"><p>注意：引用变量可以被赋空值（例如：<code>aclock = null;</code>）</p>
</div>
<h1 id="数据成员"><a class="markdownIt-Anchor" href="#数据成员"></a> 数据成员</h1>
<ul>
<li>表示对象的状态</li>
<li>用来存放在整个类的所有对象之间要共享的数据</li>
<li>可以是任意的数据类型**（简单类型，类的对象，接口，数组等）**</li>
</ul>
<h2 id="1-数据成员声明"><a class="markdownIt-Anchor" href="#1-数据成员声明"></a> 1、数据成员声明</h2>
<h3 id="语法形式"><a class="markdownIt-Anchor" href="#语法形式"></a> 语法形式</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">public</span> | <span class="keyword">protected</span> | <span class="keyword">private</span>]</span><br><span class="line">[<span class="keyword">static</span>] [<span class="keyword">final</span>] [<span class="keyword">transient</span>] [<span class="keyword">volatile</span>]</span><br><span class="line">数据类型 变量名<span class="number">1</span>[=初始值], 变量名<span class="number">2</span>[=初始值], ……;</span><br></pre></td></tr></table></figure>
<h3 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h3>
<ul>
<li><code>public</code>、<code>protected</code>、<code>private</code>为访问控制符。</li>
<li><code>static</code>指明这是一个静态成员变量（类变量）。</li>
<li><code>final</code>指明变量的值不能被修改。</li>
<li><code>transient</code>指明变量是不需要序列化的。（把整个对象序列化时会被忽略，适用于一些敏感数据，如密码等）</li>
<li><code>volatile</code>指明变量是一个共享变量。</li>
</ul>
<h2 id="2-实例变量属于对象的属性"><a class="markdownIt-Anchor" href="#2-实例变量属于对象的属性"></a> 2、实例变量（属于对象的属性）</h2>
<ul>
<li>没有 static 修饰的变量（数据成员）称为实例变量；</li>
<li>存储所有实例都需要的属性，不同实例的属性值可能不同；</li>
<li>可通过表达式 <code>实例名.实例变量名</code> 访问实例属性的值。</li>
</ul>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Circle.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ShapeTester.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTester</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Circle c;</span><br><span class="line">		c = <span class="keyword">new</span> Circle();</span><br><span class="line">		System.out.println(c);</span><br><span class="line">		System.out.println(<span class="string">&quot;r = &quot;</span> + c.radius);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Circle@28a418fc</span><br><span class="line">r &#x3D; 0</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>
<p>对象的输出调用 <code>toString()</code>，默认的 <code>toString()</code>  返回：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象名+@+对象的哈希（hash）码（转成十六进制的字符串）</span></span><br><span class="line">getClass().getName()+<span class="string">&quot;@&quot;</span>+Integer.toHexString(hashCode());</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在Java中，数值类型的变量（数据成员），<strong>如果它没有被显式的初始化的话，会默认的初始化为0</strong></p>
</li>
</ul>
<h2 id="3-类变量静态变量为该类的所有对象共享"><a class="markdownIt-Anchor" href="#3-类变量静态变量为该类的所有对象共享"></a> 3、类变量（静态变量）（为该类的所有对象共享）</h2>
<ul>
<li>
<p>用 <code>static</code> 修饰。</p>
</li>
<li>
<p>在整个类中只有一个值。</p>
</li>
<li>
<p>类初始化的同时就被赋值。</p>
</li>
<li>
<p>适用情况：</p>
<ul>
<li>类中所有对象都<strong>相同的属性</strong>。</li>
<li>经常需要<strong>共享</strong>的数据。</li>
<li>系统中用到的一些<strong>常量值</strong>。</li>
</ul>
</li>
<li>
<p>引用格式：<code>类名|实例名.类变量名</code></p>
</li>
</ul>
<h1 id="方法成员"><a class="markdownIt-Anchor" href="#方法成员"></a> 方法成员</h1>
<p>分为<strong>实例方法</strong>和<strong>类方法</strong>。</p>
<ul>
<li>实例方法：用来表示每一个实例对象的功能或者行为。</li>
<li>类方法：类的公共的、共同的行为或者功能。</li>
</ul>
<h2 id="1-语法形式"><a class="markdownIt-Anchor" href="#1-语法形式"></a> 1、语法形式</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">public</span> | <span class="keyword">protected</span> | <span class="keyword">private</span>]</span><br><span class="line">[<span class="keyword">static</span>] [<span class="keyword">final</span>] [<span class="keyword">abstract</span>] [<span class="keyword">native</span>] [<span class="keyword">synchronized</span>]</span><br><span class="line">返回类型 方法名( [参数列表] ) [<span class="keyword">throws</span> exceptionList]] &#123;</span><br><span class="line">	方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>public</code>、<code>protected</code>、<code>private</code> 控制访问权限。</li>
<li><code>static</code> 指明这是一个类方法（静态方法）。</li>
<li><code>final</code> 指明这是一个终结方法。</li>
<li><code>abstract</code> 指明这是一个抽象方法。</li>
<li><code>native</code> 用来集成Java代码和其它语言的代码。</li>
<li><code>synchronized</code> 用来控制多个并发线程对共享数据的访问。</li>
<li>返回类型
<ul>
<li>方法返回值的类型，可以是任意的Java数据类型；</li>
<li>当不需要返回值时，返回类型为void。</li>
</ul>
</li>
<li>参数类型
<ul>
<li>简单数据类型、引用类型(数组、类或接口)；</li>
<li>可以有多个参数，也可以没有参数，方法声明时的参数称为形式参数。</li>
</ul>
</li>
<li>方法体
<ul>
<li>方法的实现：</li>
<li>包括<strong>局部变量</strong>的声明以及所有合法的Java语句；</li>
<li>局部变量的作用域<strong>只在该方法内部</strong>。</li>
</ul>
</li>
<li><code>throws exceptionList</code> 抛出异常列表。</li>
</ul>
<h2 id="2-实例方法"><a class="markdownIt-Anchor" href="#2-实例方法"></a> 2、实例方法</h2>
<ul>
<li>表示特定对象的行为；</li>
<li>声明时前面不加 <code>static</code> 修饰符；</li>
</ul>
<h3 id="实例方法调用"><a class="markdownIt-Anchor" href="#实例方法调用"></a> 实例方法调用</h3>
<ul>
<li>
<p>给对象发消息，使用对象的某个行为或功能——调用对象的某个方法。</p>
</li>
<li>
<p>实例方法调用格式：<code>对象名.方法名(［参数列表］);</code></p>
<blockquote>
<p><strong>对象名</strong>为消息的接收者。</p>
</blockquote>
</li>
<li>
<p>参数传递</p>
<ul>
<li>值传递：参数类型为<strong>基本数据类型</strong>时</li>
<li>引用传递：参数类型为<strong>对象类型或数组</strong>时</li>
</ul>
</li>
</ul>
<h2 id="3-类方法静态方法"><a class="markdownIt-Anchor" href="#3-类方法静态方法"></a> 3、类方法（静态方法）</h2>
<ul>
<li>表示类中对象的共有行为</li>
<li>也称为静态方法，声明时前面需加 <code>static</code> 修饰。</li>
<li>不能被声明为<strong>抽象</strong>的。</li>
<li>可以类名直接调用，也可用类实例调用。</li>
</ul>
<h2 id="4-可变长参数"><a class="markdownIt-Anchor" href="#4-可变长参数"></a> 4、可变长参数</h2>
<ul>
<li>可变长参数使用省略号表示，其实质是数组。</li>
<li>例如，<code>String … s</code> 表示 <code>String[] s</code>。</li>
<li>对于具有可变长参数的方法，传递给可变长参数的实际参数可以是<strong>零个到多个</strong>对象。</li>
</ul>
<h1 id="包"><a class="markdownIt-Anchor" href="#包"></a> 包</h1>
<ul>
<li>包是<strong>一组类</strong>的集合。</li>
<li>一个包可以包含若干个类文件，还可包含若干个包（子包）。</li>
</ul>
<h2 id="1-包的作用"><a class="markdownIt-Anchor" href="#1-包的作用"></a> 1、包的作用</h2>
<ul>
<li>将相关的源代码文件组织在一起。</li>
<li>类名的<strong>空间管理</strong>，利用包来划分名字空间可以避免类名冲突。</li>
<li>提供包一级的封装及存取权限。</li>
</ul>
<h2 id="2-包的命名"><a class="markdownIt-Anchor" href="#2-包的命名"></a> 2、包的命名</h2>
<ul>
<li>每个包的名称必须是“独一无二”的。</li>
<li>Java中包名使用<strong>小写字母</strong>表示。</li>
<li>命名方式建议：
<ul>
<li>将机构的Internet域名反序，作为包名的<strong>前导</strong>；</li>
<li>若包名中有任何不可用于标识符的字符，用<strong>下划线</strong>替代；</li>
<li>若包名中的任何部分与关键字冲突，<strong>后缀下划线</strong>；</li>
<li>若包名中的任何部分以数字或其他不能用作标识符起始的字符开头，<strong>前缀下划线</strong>。</li>
</ul>
</li>
</ul>
<h2 id="3-编译单元"><a class="markdownIt-Anchor" href="#3-编译单元"></a> 3、编译单元</h2>
<ul>
<li><strong>一个Java源代码文件称为一个编译单元</strong>，由三部分组成：
<ul>
<li>所属包的声明（省略，则属于<strong>默认包</strong>）；</li>
<li><code>Import</code> 包的声明，用于导入外部的类；</li>
<li>类和接口的声明。</li>
</ul>
</li>
<li>一个编译单元中只能有<strong>一个</strong> <code>public</code> 类，该类名<strong>与文件名相同</strong>，编译单元中的其他类往往是 <code>public</code> 类的<strong>辅助类</strong>（不加 <code>public</code>，成为缺省的类），经过编译，每个类都会产一个class文件（非 <code>public</code> 的类也会生成class文件）。</li>
</ul>
<h2 id="4-包的声明"><a class="markdownIt-Anchor" href="#4-包的声明"></a> 4、包的声明</h2>
<ul>
<li>命名的包（Named Packages）：例如 <code>package Mypackage;</code></li>
<li>默认包（未命名的包）：不含有包声明的编译单元是<strong>默认包</strong>的一部分。</li>
</ul>
<h2 id="5-包与目录"><a class="markdownIt-Anchor" href="#5-包与目录"></a> 5、包与目录</h2>
<ul>
<li>包名就是文件夹，即<strong>目录</strong>；</li>
<li>目录名并不一定是包；</li>
</ul>
<h2 id="6-引入包"><a class="markdownIt-Anchor" href="#6-引入包"></a> 6、引入包</h2>
<ul>
<li>
<p>为了使用其它包中所提供的类，需要使用<strong>import语句</strong>引入所需要的类。</p>
</li>
<li>
<p>Java编译器为所有程序自动引入包<code>java.lang</code>。</p>
</li>
<li>
<p>import语句的格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> package1[.package2…].(classname | *);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>package1[.package2…]</code>表明包的层次，对应于<strong>文件目录</strong>；</li>
<li><code>classname</code> 指明所要引入的类名；</li>
<li>如果要引入一个包中的所有类，可以使用星号（*）来代替类名。</li>
</ul>
</li>
</ul>
<h2 id="6-静态引入"><a class="markdownIt-Anchor" href="#6-静态引入"></a> 6、静态引入</h2>
<p>如果在程序中需要多次使用<strong>静态成员</strong>，则每次使用都加上类名太繁琐。用静态引入可以解决这一问题。</p>
<ul>
<li>
<p><strong>单一引入</strong>是指引入某一个指定的静态成员，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>全体引入</strong>是指引入类中所有的静态成员，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> radius;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">circumference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span> * PI * radius;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>Java</tag>
        <tag>学习笔记</tag>
        <tag>类与对象</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构知识点-树和二叉树</title>
    <url>/2021/01/14/DataStructure-Tree/</url>
    <content><![CDATA[<h1 id="树"><a class="markdownIt-Anchor" href="#树"></a> 树</h1>
<h2 id="树的基本概念"><a class="markdownIt-Anchor" href="#树的基本概念"></a> 树的基本概念</h2>
<p><strong>树</strong>（有根树 Rooted Tree）是由有限个结点（即数据元素）组成的集合。若这一集合的结点个数为0，则我们称该树为<strong>空树</strong>；否则称为<strong>非空树</strong>，有以下特点：</p>
<ol>
<li>有且仅有一个称为树根的结点（简称“<strong>根结点</strong>”），该结点无任何前驱结点（包括直接前驱结点和间接前驱结点）。</li>
<li>当结点数目大于1时，除了树根结点之外的其余结点被分成若干个互不相交的有限集合，这些有限集合均可被视为一棵独立的树，它们均被称为树根<strong>结点的子树</strong>。</li>
</ol>
<p><strong>结点</strong>：数据元素</p>
<p><strong>分支</strong>：表示元素之间关系的线段</p>
<p><strong>结点的度</strong>：每个结点拥有子树的数目被称为结点的度。</p>
<p><strong>叶子结点</strong>（终端结点）：度为0的结点被称为叶子结点。</p>
<p><strong>分支结点</strong>（非终端结点）：度不为0的结点被称为分支结点。</p>
<p><strong>树的度</strong>：树内所有结点度的最大值被称为该树的度。</p>
<p><strong>孩子结点</strong>（后继结点）：树中任何一个结点的子树的根结点被称为这一结点的孩子结点。</p>
<p><strong>双亲结点</strong>：对于树中任何一个结点而言，若其具有孩子结点，那么该结点就被称为其孩子结点的双亲结点。</p>
<p><strong>兄弟结点</strong>：同一双亲的孩子结点互为兄弟结点。</p>
<p><strong>祖先结点</strong>：从根结点到树中任一结点所经过的所有结点被称为该结点的祖先结点。</p>
<p><strong>子孙结点</strong>（后代结点）：树中以某一结点为根的子树中任一结点均被称为该根结点的子孙结点。</p>
<p><strong>结点的深度（depth）</strong>：树中结点M的深度就是从树根到M的路径的长度。</p>
<p><strong>结点的层次（level）</strong>：深度为d的所有结点都位于树的d层，根结点的层次为0，它也是0层的唯一结点。</p>
<p><strong>树的高度（height）</strong>：树的高度比树中最深层结点的深度多1。<em>如图所示树高度为4。</em></p>
<blockquote>
<p>在不同的教材中，深度、高度和层次可能在定义的细节上有所不同，但主要是关于根结点是0层还是1层，深度和高度是否是相同还是差1，并没有本质的差别。</p>
</blockquote>
<h3 id="有根树和自由树"><a class="markdownIt-Anchor" href="#有根树和自由树"></a> 有根树和自由树</h3>
<p>自由树是从<strong>图论</strong>角度定义的树，相当于<strong>无向连通图</strong>。</p>
<p>自由树由<strong>顶点集</strong>和<strong>边集</strong>构成。并且满足以下2个条件：</p>
<ol>
<li>顶点集中的任意一个顶点与其他任意顶点都是相通的；</li>
<li>树中没有回路，即不存在从任意顶点出发，通过其它顶点其它边又回到该顶点的路径，</li>
</ol>
<p>如图所示为包含4个结点的两棵自由树。</p>
<img src="https://repo.live.holgerbest.top/img/ORdr1F4oAP5SnBV.png" style="zoom:50%;" />
<h3 id="有序树和无序树"><a class="markdownIt-Anchor" href="#有序树和无序树"></a> 有序树和无序树</h3>
<ul>
<li><strong>有序树(ordered tree)</strong>：如果将树中结点的各子树看成从左至右是有次序的，这些子树的位置是不能被改变的，则称该树为有序树。</li>
<li><strong>无序树(unordered tree)</strong>：如果将树中结点的各子树看成是无次序的，这些子树的位置是能够被改变的，则称该树为无序树。</li>
</ul>
<blockquote>
<p>如没有特别说明，一般情况下，<strong>树默认为有序、有根树。</strong></p>
</blockquote>
<h3 id="完全k叉树"><a class="markdownIt-Anchor" href="#完全k叉树"></a> 完全k叉树</h3>
<p>一棵高度为h的<strong>完全k叉树</strong>，是由高度为 h-1 的<strong>满k叉树</strong>以及最下层的连续叶结点（至少1个）构成。</p>
<img src="https://repo.live.holgerbest.top/img/hJuaOp29A8KEtYD.png" style="zoom:50%;" />
<h3 id="森林"><a class="markdownIt-Anchor" href="#森林"></a> 森林</h3>
<p><strong>森林(forest)</strong>：m(m≥0)个互不相交的树的集合称为森林。删除一棵非空树的根结点，即构成一个森林；反之，若增加一个根结点，让森林中每棵树的根结点都变成它的孩子，则森林就成为一棵树。</p>
<h2 id="树的存储结构"><a class="markdownIt-Anchor" href="#树的存储结构"></a> 树的存储结构</h2>
<h3 id="双亲表示法-顺序存储结构"><a class="markdownIt-Anchor" href="#双亲表示法-顺序存储结构"></a> 双亲表示法 (顺序存储结构)</h3>
<p>用一个一维数组来存储树的结点，同时在每个数组元素中附加一个指示器，用以指示其双亲结点的位置(双亲结点所在数组元素的下标)。</p>
<img src="https://repo.live.holgerbest.top/img/4jyYtPCsmgOEJfd.png" style="zoom:67%;" />
<h3 id="孩子兄弟表示法-二叉链表表示法"><a class="markdownIt-Anchor" href="#孩子兄弟表示法-二叉链表表示法"></a> 孩子兄弟表示法 (二叉链表表示法)</h3>
<img src="https://repo.live.holgerbest.top/img/ShOX7xoAM1D4yGl.png" style="zoom:67%;" />
<h2 id="树的遍历"><a class="markdownIt-Anchor" href="#树的遍历"></a> 树的遍历</h2>
<p><strong>先序遍历</strong>：若树非空，则先访问<strong>根</strong>结点，然后依次先序遍历根结点的每棵<strong>子树</strong>。</p>
<p><strong>后序遍历</strong>：若树非空，则先依次后序遍历根结点的每棵<strong>子树</strong>，然后访问<strong>根</strong>结点。</p>
<p><strong>层序遍历</strong>：从根结点开始，一层一层<strong>从上往下</strong>，每一层<strong>从左往右</strong>依次访问结点。</p>
<h2 id="树的性质"><a class="markdownIt-Anchor" href="#树的性质"></a> 树的性质</h2>
<p>1、假设树中有 n 个结点，b 根树枝，则 n=b+1，即结点数与树枝数的关系：n=b+1</p>
<p>2、度为 k 的树第 i（i ≥ 0）层上最多结点数为 k^i。</p>
<p>3、高度为h（h ≥ 1）的k叉树最多结点数为 (k^h−1)/(k−1)</p>
<p>4、具有n个结点的k叉树的最小高度为 h=⌈logk(n(k−1)+1)⌉</p>
<h1 id="二叉树"><a class="markdownIt-Anchor" href="#二叉树"></a> 二叉树</h1>
<h2 id="二叉树的定义"><a class="markdownIt-Anchor" href="#二叉树的定义"></a> 二叉树的定义</h2>
<ul>
<li>
<p><strong>二叉树</strong>（binary tree）是由若干个称为结点(node)的元素构成的集合，它或者为<strong>空集</strong>，或者由一个称为<strong>根</strong>（root）的结点和分别称为根的<strong>左子树</strong>（left subtree）和根的<strong>右子树</strong>（right subtree）的两棵二叉树组成。其中根结点的左子树和右子树互不相交且与根<strong>不相交</strong>（不相交意味着他们没有共有的结点）。</p>
<blockquote>
<p>A binary tree is either empty, or it consists of a node（结点） called the root（根） together with two binary trees called the left subtree （左子树）and the right subtree（右子树） of the root.</p>
</blockquote>
</li>
</ul>
<h3 id="解读-相关术语"><a class="markdownIt-Anchor" href="#解读-相关术语"></a> 解读 &amp;&amp; 相关术语</h3>
<p>(1) <strong>递归定义</strong> (recursive definition)，后续对二叉树进行操作经常使用递归的方法。</p>
<p>(2) 二叉树可以为<strong>空</strong> (empty binary tree)</p>
<p>(3) <strong>结点</strong>即数据元素(Node,Data Element)</p>
<p>(4) <strong>非空二叉树的3个部分</strong></p>
<p>a. 根结点，地位尊贵，所有其它结点的祖先</p>
<p>b. 根的左子树:一棵二叉树，空或者非空</p>
<p>c. 根的右子树:一棵二叉树，空或者非空</p>
<img src="https://repo.live.holgerbest.top/img/2Pu5sMrxt1GFBwk.png" style="zoom:50%;" />
<p>(5) 二叉树的子树<strong>严格区分左右</strong></p>
<p>(6) 结点之间的关系：根结点与其子树的根之间的父子关系</p>
<blockquote>
<ul>
<li>A（双亲）-----G（左孩子）</li>
<li>A（双亲）-----H（右孩子）</li>
<li>G（双亲）-----C（右孩子）</li>
<li>G、H 互为兄弟</li>
<li>H（祖先） ----E F（子孙）</li>
</ul>
</blockquote>
<p>(7) 二叉树是一种<strong>层次型</strong>的数据结构</p>
<p>(8) 结点的度</p>
<ul>
<li>
<p><strong>结点的度</strong>：结点所拥有的子树的数目。<em>A的度为2，E的度为1，C的度为0。</em></p>
</li>
<li>
<p><strong>叶子</strong>：度为0的结点。</p>
</li>
</ul>
<p>(9) <strong>二叉树的度</strong>：二叉树中结点度的最大值。<strong>任意一棵二叉树的度小于等于2。</strong></p>
<h3 id="几类特殊的二叉树"><a class="markdownIt-Anchor" href="#几类特殊的二叉树"></a> 几类特殊的二叉树</h3>
<p><strong>严格二叉树</strong>：也称为2树。是指不存在度为1的结点的二叉树，空二叉树是严格二叉树，非空的严格二叉树中，除了叶子结点之外，每个结点都有2个孩子。<em>如图所示为一棵严格二叉树。</em></p>
<img src="https://repo.live.holgerbest.top/img/kSdICUi9nFABm4H.png" style="zoom:67%;" />
<p><strong>扩充二叉树（extended binary tree）</strong>：对一棵已有的非空二叉树进行扩充，使得原二叉树中所有结点的度数都变为2。空二叉树的扩充二叉树仍然为空。</p>
<img src="https://repo.live.holgerbest.top/img/c6Nby2DT7omH3AO.png" style="zoom:67%;" />
<p><strong>满二叉树（full binary tree）</strong>：高度为k且含有 2^k-1个结点的二叉树。它的叶子结点全部在最下层，分支结点的度全为2。</p>
<img src="https://repo.live.holgerbest.top/img/mdyFQ6qT35AKZka.png" style="zoom:67%;" />
<p><strong>完全二叉树（complete binary tree）</strong>：所含的n个结点和满二叉树中编号为1至n的结点的编号和形状都一一对应。可在满二叉树的基础上连续删除若干个结点得到。</p>
<img src="https://repo.live.holgerbest.top/img/1wKhgRrSQsVPu9Y.png" style="zoom:67%;" />
<ul>
<li>叶子结点集中在最下面两层。</li>
<li>对任一结点，若其右子树的深度为h，则其左子树的深度为 h 或 h+1 。</li>
<li>完全二叉树是具有相同结点数的二叉树中一棵最矮的二叉树。</li>
<li>满二叉树是完全二叉树的一种特例。</li>
</ul>
<p><strong>单支二叉树</strong>：</p>
<ul>
<li>除叶子之外，每个结点都只有一个唯一的左孩子的二叉树，俗称为左单支二叉树（左图）。</li>
<li>除叶子之外，每个结点都只有一个唯一的右孩子的二叉树，俗称为右单支二叉树（右图）。</li>
</ul>
<img src="https://repo.live.holgerbest.top/img/7Jy5W8qMDRs2HkA.png" style="zoom:67%;" />
<blockquote>
<p>在非单支二叉树中，有时也称其包含的单支部分称为左单支或右单支。</p>
</blockquote>
<h2 id="二叉树的性质"><a class="markdownIt-Anchor" href="#二叉树的性质"></a> 二叉树的性质</h2>
<ul>
<li>
<p>性质1：假设二叉树中有n个结点，b根树枝，则 n=b+1。</p>
</li>
<li>
<p>性质2：在二叉树的第 i 层上至多有2^i 个结点。(i≥0)</p>
</li>
<li>
<p>性质3：高度为 h 的二叉树上至多含 2^h-1 个结点（h≥1）。</p>
</li>
<li>
<p>性质4：对任何一棵二叉树，若它含有n0 个叶子结点、n2 个度为 2 的结点，则必存在关系式：n0 = n2+1。</p>
</li>
<li>
<p>性质5：具有n个结点的完全二叉树的高度 h = ⌈log2(n+1)⌉ or ⌊log2n⌋+1</p>
</li>
<li>
<p>性质6：若对含n个结点的完全二叉树从上到下且从左至右进行1至n的编号，则对完全二叉树中任意一个编号为 i 的结点：</p>
<ul>
<li>若 i = 1，则该结点是二叉树的根，无双亲，否则，编号为 ⌊i/2⌋ 的结点为其双亲结点；</li>
<li>若 2i &gt; n，则该结点无左孩子，否则，编号为 2i 的结点为其左孩子结点；</li>
<li>若 2i+1 &gt; n，则该结点无右孩子结点，否则，编号为 2i+1 的结点为其右孩子结点。</li>
</ul>
<img src="https://repo.live.holgerbest.top/img/KQbLzjJHrVTqkDe.png" style="zoom:67%;" />
<blockquote>
<p>也有另一种编号方法是进行从0至n-1的编号，那么i号结点的双亲为 ⌊(i−1)/2⌋，左孩子为 2i+1 号，右孩子为 2i+2 号。</p>
</blockquote>
</li>
</ul>
<h2 id="二叉树的遍历"><a class="markdownIt-Anchor" href="#二叉树的遍历"></a> 二叉树的遍历</h2>
<p>按照某种次序对二叉树的每个结点访问并且只访问一次的过程。</p>
<p><strong>层次遍历</strong>：从上到下，从左到右遍历。</p>
<p><strong>递归遍历</strong>：将对一棵非空二叉树的遍历分解成：</p>
<img src="https://repo.live.holgerbest.top/img/GvAgNWaEXrwx5iM.png" style="zoom:67%;" />
<ul>
<li>对根结点本身的访问，假设用V表示；</li>
<li>对根结点左子树的遍历，用L表示；</li>
<li>对根结点右子树的遍历，用R表示。</li>
</ul>
<p><strong>先序遍历</strong>(preorder traversal，先根遍历、前序遍历)：若二叉树为空树，则空操作。否则，①访问<strong>根</strong>结点；②先序遍历<strong>左</strong>子树；③先序遍历<strong>右</strong>子树。</p>
<p><strong>中序遍历</strong>(inorder traversal，中根遍历)：若二叉树为空树，则空操作。否则，①中序遍历<strong>左</strong>子树；②访问<strong>根</strong>结点；③中序遍历<strong>右</strong>子树。</p>
<p><strong>后序遍历</strong>(postorder traversal，后根遍历)：若二叉树为空树，则空操作。否则，①后序遍历<strong>左</strong>子树；②后序遍历<strong>右</strong>子树； ③访问<strong>根</strong>结点。</p>
<h3 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h3>
<h4 id="表达式二叉树的遍历"><a class="markdownIt-Anchor" href="#表达式二叉树的遍历"></a> 表达式二叉树的遍历</h4>
<table>
<thead>
<tr>
<th style="text-align:center">遍历</th>
<th style="text-align:center">表达式形式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">先序</td>
<td style="text-align:center">前缀表达式</td>
</tr>
<tr>
<td style="text-align:center">中序</td>
<td style="text-align:center">中缀表达式</td>
</tr>
<tr>
<td style="text-align:center">后序</td>
<td style="text-align:center">后缀表达式</td>
</tr>
</tbody>
</table>
<img src="https://repo.live.holgerbest.top/img/IqzEx751Ob9RXpk.png" style="zoom:67%;" />
<h4 id="二分查找的比较树"><a class="markdownIt-Anchor" href="#二分查找的比较树"></a> 二分查找的比较树</h4>
<p>对二分查找的比较树的<strong>中序遍历</strong>得到有序序列。</p>
<h2 id="二叉树的存储结构"><a class="markdownIt-Anchor" href="#二叉树的存储结构"></a> 二叉树的存储结构</h2>
<h3 id="二叉树的顺序存储结构"><a class="markdownIt-Anchor" href="#二叉树的顺序存储结构"></a> 二叉树的顺序存储结构</h3>
<p>对于<strong>完全二叉树</strong>，用一组地址连续的存储单元从根结点开始依次自上而下，并按层次从左到右存储完全二叉树上的各结点元素，即将完全二叉树编号为 i 的结点元素存储在下标为 i 的数组元素中（如左图）。</p>
<img src="https://repo.live.holgerbest.top/img/dfXalsFKMvzbhYj.png" style="zoom:80%;" />
<p>对于非完全二叉树来说，顺序存储结构会造成存储空间的浪费（如右图），并且树的层次越深，结点越少，存储空间浪费越大。因此在实际使用时通常选择<strong>链式结构</strong>存储二叉树。</p>
<h3 id="二叉树的链式存储结构-二叉链表"><a class="markdownIt-Anchor" href="#二叉树的链式存储结构-二叉链表"></a> 二叉树的链式存储结构 (二叉链表)</h3>
<img src="https://repo.live.holgerbest.top/img/xrEA1JmUYfutsLP.png" style="zoom:50%;" />
<h4 id="二叉树结点类"><a class="markdownIt-Anchor" href="#二叉树结点类"></a> 二叉树结点类</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryNode</span> &#123;</span></span><br><span class="line">    Entry data;</span><br><span class="line">    Binary_node&lt;Entry&gt; *left;</span><br><span class="line">    Binary_node&lt;Entry&gt; *right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="链式二叉树类"><a class="markdownIt-Anchor" href="#链式二叉树类"></a> 链式二叉树类</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Add methods here.</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// Add auxiliary function prototypes here.</span></span><br><span class="line">    BinaryNode&lt;Entry&gt; *root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="二叉树基于链式存储结构的操作及算法"><a class="markdownIt-Anchor" href="#二叉树基于链式存储结构的操作及算法"></a> 二叉树基于链式存储结构的操作及算法</h3>
<blockquote>
<p>对于递归算法，定公有方法以供使用者调用，公有方法调用保护的递归算法。</p>
</blockquote>
<h4 id="遍历算法"><a class="markdownIt-Anchor" href="#遍历算法"></a> 遍历算法</h4>
<h5 id="先序遍历递归"><a class="markdownIt-Anchor" href="#先序遍历递归"></a> 先序遍历（递归）</h5>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> BinaryTree&lt;Entry&gt;::_recursivePreOrder(BinaryNode&lt;Entry&gt; *subRoot, <span class="keyword">void</span> (*visit)(Entry &amp;)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (subRoot != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        (*visit)(subRoot-&gt;data);</span><br><span class="line">        _recursiveInOrder(subRoot-&gt;left, visit);</span><br><span class="line">        _recursiveInOrder(subRoot-&gt;right, visit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="中序遍历递归"><a class="markdownIt-Anchor" href="#中序遍历递归"></a> 中序遍历（递归）</h5>
<p>定义一个公有方法 <code>inOrder</code>，调用递归方法 <code>_recursiveInOrder</code> 实现：</p>
<p><strong>公有方法 <code>inOrder()</code>：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> BinaryTree&lt;Entry&gt;::inOrder(<span class="keyword">void</span> (*visit)(Entry &amp;)) &#123;</span><br><span class="line">    _recursiveInOrder(root, visit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>protected 递归方法 <code>_recursiveInOrder()</code>：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> BinaryTree&lt;Entry&gt;::_recursiveInOrder(BinaryNode&lt;Entry&gt; *subRoot, <span class="keyword">void</span> (*visit)(Entry &amp;)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (subRoot != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        _recursiveInOrder(subRoot-&gt;left, visit);</span><br><span class="line">        (*visit)(subRoot-&gt;data);</span><br><span class="line">        _recursiveInOrder(subRoot-&gt;right, visit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="后序遍历递归"><a class="markdownIt-Anchor" href="#后序遍历递归"></a> 后序遍历（递归）</h5>
<p>定义一个公有方法 <code>postOrder</code>，调用递归方法 <code>_recursivePostOrder</code> 实现：</p>
<p><strong>公有方法 <code>postOrder()</code>：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> BinaryTree&lt;Entry&gt;::postOrder(<span class="keyword">void</span> (*visit)(Entry &amp;)) &#123;</span><br><span class="line">    _recursivePostOrder(root, visit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>protected 递归方法 <code>_recursivePostOrder()</code>：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> BinaryTree&lt;Entry&gt;::_recursivePostOrder(BinaryNode&lt;Entry&gt; *subRoot, <span class="keyword">void</span> (*visit)(Entry &amp;)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (subRoot != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        _recursiveInOrder(subRoot-&gt;left, visit);</span><br><span class="line">        _recursiveInOrder(subRoot-&gt;right, visit);</span><br><span class="line">        (*visit)(subRoot-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="层次遍历"><a class="markdownIt-Anchor" href="#层次遍历"></a> 层次遍历</h5>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> BinaryTree&lt;Entry&gt;::levelOrder(<span class="keyword">void</span> (*visit)(Entry &amp;)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root ** <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;BinaryNode&lt;Entry&gt; *&gt; nodeQueue;	<span class="comment">// 使用队列</span></span><br><span class="line">    nodeQueue.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!nodeQueue.empty()) &#123;</span><br><span class="line">        BinaryNode&lt;Entry&gt; *p = nodeQueue.front();</span><br><span class="line">        (*visit)(p-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;left != <span class="literal">nullptr</span>) nodeQueue.push(p-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;right != <span class="literal">nullptr</span>) nodeQueue.push(p-&gt;right);</span><br><span class="line">        nodeQueue.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="拷贝方法递归"><a class="markdownIt-Anchor" href="#拷贝方法递归"></a> 拷贝方法（递归）</h4>
<p>protected 方法，供复制构造函数 <code>BinaryTree(const BinaryTree&lt;Entry&gt; &amp;original)</code>、<code>=</code> 运算符重载函数调用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line">BinaryNode&lt;Entry&gt; *BinaryTree&lt;Entry&gt;::_recursiveCopy(BinaryNode&lt;Entry&gt; *subRoot) &#123;</span><br><span class="line">    <span class="keyword">if</span> (subRoot ** <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    BinaryNode&lt;Entry&gt; *newRoot = <span class="keyword">new</span> BinaryNode&lt;Entry&gt;(subRoot-&gt;data);</span><br><span class="line">    newRoot-&gt;left = _recursiveCopy(subRoot-&gt;left);</span><br><span class="line">    newRoot-&gt;right = _recursiveCopy(subRoot-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> newRoot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="清空方法递归"><a class="markdownIt-Anchor" href="#清空方法递归"></a> 清空方法（递归）</h4>
<p>protected 方法，供析构函数 <code>~BinaryTree()</code>、方法 <code>clear()</code> 调用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> BinaryTree&lt;Entry&gt;::_recursiveClear(BinaryNode&lt;Entry&gt; *&amp;subRoot) &#123;</span><br><span class="line">    <span class="keyword">if</span> (subRoot != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        _recursiveClear(subRoot-&gt;left);</span><br><span class="line">        _recursiveClear(subRoot-&gt;right);</span><br><span class="line">        <span class="keyword">delete</span> subRoot;</span><br><span class="line">        subRoot = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="判空方法"><a class="markdownIt-Anchor" href="#判空方法"></a> 判空方法</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">bool</span> BinaryTree&lt;Entry&gt;::empty() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> root ** <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="计算节点数量递归"><a class="markdownIt-Anchor" href="#计算节点数量递归"></a> 计算节点数量（递归）</h4>
<p><strong>公有方法 <code>size()</code>：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> BinaryTree&lt;Entry&gt;::size() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _recursiveLeafSize(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>protected 方法 <code>_recursiveLeafSize()</code>：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> BinaryTree&lt;Entry&gt;::_recursiveLeafSize(BinaryNode&lt;Entry&gt; *subRoot) &#123;</span><br><span class="line">    <span class="keyword">if</span> (subRoot ** <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + _recursiveLeafSize(subRoot-&gt;left) + _recursiveLeafSize(subRoot-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求树的高度递归"><a class="markdownIt-Anchor" href="#求树的高度递归"></a> 求树的高度（递归）</h4>
<p><strong>公有方法 <code>height()</code>：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> BinaryTree&lt;Entry&gt;::height() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _recursiveHeight(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>protected 方法 <code>_recursiveHeight()</code>：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> BinaryTree&lt;Entry&gt;::_recursiveHeight(BinaryNode&lt;Entry&gt; *subRoot) &#123;</span><br><span class="line">    <span class="keyword">if</span> (subRoot ** <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> max(_recursiveHeight(subRoot-&gt;left), _recursiveHeight(subRoot-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="删除所有叶子结点递归"><a class="markdownIt-Anchor" href="#删除所有叶子结点递归"></a> 删除所有叶子结点（递归）</h4>
<p><strong>公有方法 <code>deleteLeaf()</code>：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> BinaryTree&lt;Entry&gt;::deleteLeaf() &#123;</span><br><span class="line">    _recursiveDeleteLeaf(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>protected 方法 <code>_recursiveDeleteLeaf()</code>：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> BinaryTree&lt;Entry&gt;::_recursiveDeleteLeaf(BinaryNode&lt;Entry&gt; *&amp;subRoot) &#123;</span><br><span class="line">    <span class="keyword">if</span> (subRoot ** <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (subRoot-&gt;left ** <span class="literal">nullptr</span> &amp;&amp; subRoot-&gt;right ** <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> subRoot;</span><br><span class="line">        subRoot = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _recursiveDeleteLeaf(subRoot-&gt;left);</span><br><span class="line">    _recursiveDeleteLeaf(subRoot-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础Q&amp;A</title>
    <url>/2020/03/28/JavaQ-A/</url>
    <content><![CDATA[<img src="https://repo.live.holgerbest.top/img/NSwIfVCotyMBcRJ.png" alt="Java" style="zoom:50%;" />
<div class="note success flat"><p>整理了一些Java编程基础的知识点以及代码。<s><em>其实是选修课作业</em></s></p>
<p>附件：<a href="https://get.holgerbest.top/data/java_src.rar">部分源代码</a></p>
</div>
<a id="more"></a>
<h1 id="part-1"><a class="markdownIt-Anchor" href="#part-1"></a> PART 1</h1>
<h2 id="1-如何进行jdk的安装与配置如何编写并运行第一个java程序"><a class="markdownIt-Anchor" href="#1-如何进行jdk的安装与配置如何编写并运行第一个java程序"></a> 1、如何进行JDK的安装与配置？如何编写并运行第一个Java程序？</h2>
<p>（1）首先从<a href="http://www.oracle.com/technetwork/java/index.html">Oracle官方网站</a>下载安装适合系统的JDK，按默认安装路径进行JDK安装即可。</p>
<p>（2）配置环境变量：在系统环境变量中新建变量<code>JAVA_HOME</code>，值为JDK的安装路径；将<code>%JAVA_HOME%\bin</code>添加到系统变量Path。</p>
<p><strong>设置环境变量如图所示</strong></p>
<p><code>JAVA_HOME= C:\Program Files\Java\jdk1.8.0_92</code></p>
<p><code>CLASSPATH=.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></p>
<p><code>PATH=%PATH%;%JAVA_HOME%\bin</code></p>
<blockquote>
<p>注意：<code>%PATH%</code>为原来的环境变量值，添加&quot;;&quot;和后面的内容到原来值的后面。</p>
</blockquote>
<img src="https://repo.live.holgerbest.top/img/lwNGvQdqcub8ikp.png" alt="安装JDK环境变量配置和验证" style="zoom:67%;" />
<p>验证是否配置成功，可点击开始→运行，输入cmd打开命令行窗口，输入<code>java -version</code>，显示版本，如图。说明JDK安装及环境变量配置成功。</p>
<p>（3）编写并运行：用记事本编码并存储在D盘；Win+R到命令行<code>D:</code>，找到java文件；命令行输入<code>javac HelloWorld.java</code>编译生成class文件，命令行输入<code>java HelloWorld</code>运行</p>
<h2 id="2-下列哪个是jdk提供的编译器"><a class="markdownIt-Anchor" href="#2-下列哪个是jdk提供的编译器"></a> 2、下列哪个是JDK提供的编译器？</h2>
<p><strong>答案：B</strong></p>
<p>A. java.exe    B. javac.exe   C. javap.exe   D. javaw.exe</p>
<h2 id="3-java源程序文件的扩展名是什么java字节码文件的扩展名是什么"><a class="markdownIt-Anchor" href="#3-java源程序文件的扩展名是什么java字节码文件的扩展名是什么"></a> 3、Java源程序文件的扩展名是什么？Java字节码文件的扩展名是什么？</h2>
<p><strong>答案：java，class</strong></p>
<h2 id="4-下列哪个是java应用程序主类中正确的main方法声明"><a class="markdownIt-Anchor" href="#4-下列哪个是java应用程序主类中正确的main方法声明"></a> 4、下列哪个是Java应用程序主类中正确的main方法声明？</h2>
<p><strong>答案：D</strong></p>
<p>A. <code>public void main(String args[ ])</code></p>
<p>B. <code>static void main(String args[ ])</code></p>
<p>C. <code>public static void Main(String args[ ])</code></p>
<p>D. <code>public static void main(String args[ ])</code></p>
<h2 id="5-编程"><a class="markdownIt-Anchor" href="#5-编程"></a> 5、编程：</h2>
<h3 id="1在控制台输出全部的大写英文字母"><a class="markdownIt-Anchor" href="#1在控制台输出全部的大写英文字母"></a> （1）在控制台输出全部的大写英文字母。</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">&#x27;A&#x27;</span>; ch &lt;= <span class="string">&#x27;Z&#x27;</span>; ch++) &#123;</span><br><span class="line">			System.out.print(ch + <span class="string">&quot; &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z </span><br></pre></td></tr></table></figure>
<h3 id="2求和1-2-3-100并在控制台输出"><a class="markdownIt-Anchor" href="#2求和1-2-3-100并在控制台输出"></a> （2）求和：1 + 2 + 3 + … + 100，并在控制台输出。</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">			sum += i;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;1 + 2 + 3 + … + 100 = &quot;</span> + sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 + 2 + 3 + … + 100 &#x3D; 5050</span><br></pre></td></tr></table></figure>
<h2 id="6-什么是类什么是对象如何创建对象试编程举例加以说明"><a class="markdownIt-Anchor" href="#6-什么是类什么是对象如何创建对象试编程举例加以说明"></a> 6、什么是类？什么是对象？如何创建对象？试编程举例加以说明。</h2>
<p><strong>类</strong>是对一类对象的描述；<strong>对象</strong>是类的具体实例。Java中创建对象前需要创建对象引用：<code>类名 引用变量名</code>；使用new关键字创建一个新的对象：<code>new 类名( [初始化参数] )</code>。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Clock clock;</span><br><span class="line">clock = <span class="keyword">new</span> Clock(<span class="number">12</span>, <span class="number">30</span>, <span class="number">15</span>);</span><br></pre></td></tr></table></figure>
<h2 id="7-什么是实例变量什么是类变量什么是成员方法试编程举例加以说明"><a class="markdownIt-Anchor" href="#7-什么是实例变量什么是类变量什么是成员方法试编程举例加以说明"></a> 7、什么是实例变量？什么是类变量？什么是成员方法？试编程举例加以说明。</h2>
<p>**实例变量（属于对象的属性）：**没有 static 修饰的变量（数据成员）称为实例变量；存储所有实例都需要的属性，不同实例的属性值可能不同；可通过表达式 <code>实例名.实例变量名</code> 访问实例属性的值。</p>
<p>**类变量（静态变量）（为该类的所有对象共享）：**用 static 修饰；在整个类中只有一个值；类初始化的同时就被赋值。适用情况于类中所有对象都相同的属性、经常需要共享的数据和系统中用到的一些常量值。引用格式：<code>类名或实例名.类变量名</code></p>
<p>**实例方法：**用来表示每一个实例对象的功能或者行为。表示特定对象的行为；声明时前面不加 static 修饰符；实例方法调用格式：<code>对象名.方法名(［参数列表］)</code>;</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> radius;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">	Circle(<span class="keyword">double</span> r)&#123;</span><br><span class="line">		radius = r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> PI * radius * radius;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>radius 是实例变量，PI 是类变量，area() 是实例方法。他们的调用方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeTester</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Circle circle = <span class="keyword">new</span> Circle(<span class="number">2.5</span>);</span><br><span class="line">		System.out.println(Circle.PI);</span><br><span class="line">		System.out.println(circle.PI);</span><br><span class="line">		System.out.println(circle.radius);</span><br><span class="line">		System.out.println(circle.area());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.14159</span><br><span class="line">3.14159</span><br><span class="line">2.5</span><br><span class="line">19.6349375</span><br></pre></td></tr></table></figure>
<h2 id="8-类的继承格式是怎样的试编程举例加以说明"><a class="markdownIt-Anchor" href="#8-类的继承格式是怎样的试编程举例加以说明"></a> 8、类的继承格式是怎样的？试编程举例加以说明。</h2>
<p>类继承的语法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[ClassModifier] <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">extends</span> <span class="title">SuperClassName</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String gender;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String gender, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.gender = gender;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	age++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> name+<span class="string">&quot;, &quot;</span>+gender+<span class="string">&quot;, &quot;</span>+age+<span class="string">&quot; years old&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Student.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> grade;</span><br><span class="line">	<span class="keyword">private</span> String id;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String gender, <span class="keyword">int</span> age,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">int</span> grade, String id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name, gender, age);</span><br><span class="line">		<span class="keyword">this</span>.grade = grade;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> grade;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.grow();</span><br><span class="line">		grade++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> getName()+<span class="string">&quot;, &quot;</span>+<span class="string">&quot;Grade &quot;</span>+grade+<span class="string">&quot;, &quot;</span></span><br><span class="line">	+getGender()+<span class="string">&quot;, &quot;</span>+getAge()+<span class="string">&quot; years old&quot;</span>+<span class="string">&quot;, Student id: &quot;</span>+id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Tester.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tester</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Student Peter = <span class="keyword">new</span> Student(<span class="string">&quot;Peter&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="string">&quot;1927405001&quot;</span>);</span><br><span class="line">		Person Mary = <span class="keyword">new</span> Person(<span class="string">&quot;Mary&quot;</span>, <span class="string">&quot;female&quot;</span>, <span class="number">20</span>);</span><br><span class="line">		System.out.println(Peter);</span><br><span class="line">		System.out.println(Mary);</span><br><span class="line">		Peter.grow();</span><br><span class="line">		Mary.grow();</span><br><span class="line">		System.out.println(<span class="string">&quot;Next year.&quot;</span>);</span><br><span class="line">		System.out.println(Peter);</span><br><span class="line">		System.out.println(Mary);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Peter, Grade 1, male, 18 years old, Student id: 1927405001</span><br><span class="line">Mary, female, 20 years old</span><br><span class="line">Next year.</span><br><span class="line">Peter, Grade 2, male, 19 years old, Student id: 1927405001</span><br><span class="line">Mary, female, 21 years old</span><br></pre></td></tr></table></figure>
<h1 id="part2"><a class="markdownIt-Anchor" href="#part2"></a> PART2</h1>
<h2 id="1-在面向对象编程技术中什么是继承试编程举例加以说明"><a class="markdownIt-Anchor" href="#1-在面向对象编程技术中什么是继承试编程举例加以说明"></a> 1、在面向对象编程技术中，什么是继承？试编程举例加以说明。</h2>
<p>继承是<strong>根据已有类来设计新类</strong>，新类具有已有类的所有功能（属性和行为）。</p>
<p>继承机制可以提高程序的抽象程度，提高代码的可重用性。</p>
<p>例如 有以下继承关系：</p>
<img src="https://repo.live.holgerbest.top/img/sKNVUiQWjyhrtH4.png" alt="继承" style="zoom:50%;" />
<p>Java代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		System.out.println(<span class="string">&quot;Name: &quot;</span> + name + <span class="string">&quot;\tAge: &quot;</span> + age);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Playing......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String studentId;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, String id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name, age);</span><br><span class="line">		studentId = id;</span><br><span class="line">		System.out.println(<span class="string">&quot;Student No.&quot;</span> + studentId);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getStudentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> studentId;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Studying......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String teacherId;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name, <span class="keyword">int</span> age, String id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name, age);</span><br><span class="line">		teacherId = id;</span><br><span class="line">		System.out.println(<span class="string">&quot;Teacher No.&quot;</span> + teacherId);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTeacherId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> teacherId;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Teaching......&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tester</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Person Jack = <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">		Jack.play();</span><br><span class="line">		System.out.println();</span><br><span class="line">		Student Holger = <span class="keyword">new</span> Student(<span class="string">&quot;Holger&quot;</span>, <span class="number">18</span>, <span class="string">&quot;19274001&quot;</span>);</span><br><span class="line">		Holger.play();</span><br><span class="line">		Holger.study();</span><br><span class="line">		System.out.println();</span><br><span class="line">		Teacher Mary = <span class="keyword">new</span> Teacher(<span class="string">&quot;Mary&quot;</span>, <span class="number">30</span>, <span class="string">&quot;2020270001&quot;</span>);</span><br><span class="line">		Mary.play();</span><br><span class="line">		Mary.teach();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Name: Jack	Age: 20</span><br><span class="line">Playing......</span><br><span class="line"></span><br><span class="line">Name: Holger	Age: 18</span><br><span class="line">Student No.19274001</span><br><span class="line">Playing......</span><br><span class="line">Studying......</span><br><span class="line"></span><br><span class="line">Name: Mary	Age: 30</span><br><span class="line">Teacher No.2020270001</span><br><span class="line">Playing......</span><br><span class="line">Teaching......</span><br></pre></td></tr></table></figure>
<h2 id="2-在面向对象编程技术中什么是重写试编程举例加以说明"><a class="markdownIt-Anchor" href="#2-在面向对象编程技术中什么是重写试编程举例加以说明"></a> 2、在面向对象编程技术中，什么是重写？试编程举例加以说明。</h2>
<p>如果子类不需要使用从超类继承来的方法，可以声明自己的同名方法，称为重写Override（方法覆盖），即<strong>外壳不变，核心重写</strong>。</p>
<p>重写的方法的<strong>返回类型</strong>、<strong>方法名称</strong>、<strong>参数个数</strong>必须和被覆盖的方法完全一致。访问权限可以更宽松，但不能更严格。重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。</p>
<h3 id="重写的应用场合"><a class="markdownIt-Anchor" href="#重写的应用场合"></a> 重写的应用场合</h3>
<ul>
<li>子类中实现与超类相同的功能，但算法或公式不一样；</li>
<li>名字相同的方法中，要做比超类方法更多的事情；</li>
<li>子类中要取消从超类继承过来的方法。</li>
</ul>
<h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3>
<ul>
<li>参数列表必须完全与被重写方法的相同</li>
<li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类</li>
<li>访问权限不能比父类中被重写的方法的访问权限更低</li>
<li>父类的成员方法只能被它的子类重写</li>
<li>必须覆盖的方法：派生类必须覆盖基类中的抽象方法，否则派生类自身将成为抽象类</li>
<li>不能覆盖覆盖的方法：终结方法（final）、静态方法（static）</li>
<li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法；子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法</li>
<li>调用被覆盖的方法：<code>super.被覆盖的方法名();</code></li>
</ul>
<p>例如 Student类重写了从Person类继承的grow方法。</p>
<img src="https://repo.live.holgerbest.top/img/mvhuLGQVHentdFT.png" alt="重写" style="zoom:50%;" />
<p>Java代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		System.out.println(<span class="string">&quot;Name: &quot;</span> + name + <span class="string">&quot;,\tAge: &quot;</span> + age);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	age++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> grade;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> grade)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name, age);</span><br><span class="line">		<span class="keyword">this</span>.grade = grade;</span><br><span class="line">		System.out.println(<span class="string">&quot;Grade &quot;</span> + grade);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		age++;</span><br><span class="line">		grade++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tester</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Person Jack = <span class="keyword">new</span> Person(<span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">		Student Holger = <span class="keyword">new</span> Student(<span class="string">&quot;Holger&quot;</span>, <span class="number">18</span>, <span class="number">1</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;One year later...&quot;</span>);</span><br><span class="line">		Jack.grow();</span><br><span class="line">		Holger.grow();</span><br><span class="line">		System.out.println(Jack.name+<span class="string">&quot;\t&quot;</span>+Jack.age);</span><br><span class="line">		System.out.println(Holger.name+<span class="string">&quot;\t&quot;</span>+Holger.age+<span class="string">&quot;\t&quot;</span>+Holger.grade);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Name: Jack,	Age: 20</span><br><span class="line">Name: Holger,	Age: 18</span><br><span class="line">Grade 1</span><br><span class="line">One year later...</span><br><span class="line">Jack	21</span><br><span class="line">Holger	19	2</span><br></pre></td></tr></table></figure>
<h2 id="3-在面向对象编程技术中什么是重载试编程举例加以说明"><a class="markdownIt-Anchor" href="#3-在面向对象编程技术中什么是重载试编程举例加以说明"></a> 3、在面向对象编程技术中，什么是重载？试编程举例加以说明。</h2>
<p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。</p>
<p>返回类型可以相同也可以不同。</p>
<p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p>
<p>最常用的地方就是构造方法的重载。</p>
<p><strong>重载规则:</strong></p>
<ul>
<li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li>
<li>被重载的方法可以改变返回类型；</li>
<li>被重载的方法可以改变访问修饰符；</li>
<li>被重载的方法可以声明新的或更广的检查异常；</li>
<li>方法能够在同一个类中或者在一个子类中被重载。</li>
<li>无法以返回值类型作为重载函数的区分标准。</li>
</ul>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tester</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">		dog.bark();</span><br><span class="line">		System.out.println();</span><br><span class="line">		dog.bark(<span class="number">3</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Woof!</span><br><span class="line"></span><br><span class="line">Woof!</span><br><span class="line">Woof!</span><br><span class="line">Woof!</span><br></pre></td></tr></table></figure>
<h2 id="4-重写和重载的区别是什么"><a class="markdownIt-Anchor" href="#4-重写和重载的区别是什么"></a> 4、重写和重载的区别是什么？</h2>
<p>(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</p>
<p>(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</p>
<p>(3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</p>
<table>
<thead>
<tr>
<th><strong>区别点</strong></th>
<th><strong>重载方法</strong></th>
<th><strong>重写方法</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>参数列表</td>
<td>必须修改</td>
<td>一定不能修改</td>
</tr>
<tr>
<td>返回类型</td>
<td>可以修改</td>
<td>一定不能修改</td>
</tr>
<tr>
<td>异常</td>
<td>可以修改</td>
<td>可以减少或删除，一定不能抛出新的或者更广的异常</td>
</tr>
<tr>
<td>访问</td>
<td>可以修改</td>
<td>一定不能做更严格的限制（可以降低限制）</td>
</tr>
</tbody>
</table>
<h2 id="5-在面向对象编程技术中什么是抽象类和抽象方法试编程举例加以说明"><a class="markdownIt-Anchor" href="#5-在面向对象编程技术中什么是抽象类和抽象方法试编程举例加以说明"></a> 5、在面向对象编程技术中，什么是抽象类和抽象方法？试编程举例加以说明。</h2>
<p><strong>抽象类</strong></p>
<p>规定了整个类家族公共的属性和方法。</p>
<ul>
<li>类名前加修饰符 abstract ；</li>
<li>可包含常规类能包含的任何成员，包括非抽象方法；</li>
<li>也可包含<strong>抽象方法</strong>：用 abstract 修饰，只有方法原型，没有方法的实现；</li>
<li>没有具体实例对象的类，不能使用new方法进行实例化，<strong>只能用作超类</strong>；</li>
<li>只有当子类实现了抽象超类中的所有抽象方法，子类才不是抽象类，才能产生实例；</li>
<li>如果子类中仍有抽象方法未实现，则子类也只能是抽象类。</li>
</ul>
<p><strong>抽象方法</strong></p>
<ul>
<li>仅有方法原型，没有方法体；</li>
<li>具体实现在各自的类声明中完成；</li>
<li>只有抽象类可以包含抽象方法。</li>
</ul>
<p><strong>抽象方法的优点</strong></p>
<ul>
<li>隐藏具体的细节信息，所有的子类使用的都是相同的方法原型，其中包含了调用该方法时需要了解的全部信息；</li>
<li>强迫子类完成指定的行为，规定所有子类的“标准”行为。</li>
</ul>
<p>例如 抽象类Animal类，Cat类和Dog类继承自Animal类。关系如下：</p>
<img src="https://repo.live.holgerbest.top/img/V64WGBPiRMgtqfe.png" alt="抽象" style="zoom:50%;" />
<p>Java代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;The cat is running.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;The cat is eating cat food and fish.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;The cat can jump!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;The dog is running.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;The dog is eating dog food and bones.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;The dog is barking. Woof!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tester</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">		cat.eat();</span><br><span class="line">		cat.run();</span><br><span class="line">		cat.jump();</span><br><span class="line">		System.out.println();</span><br><span class="line">		Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">		dog.eat();</span><br><span class="line">		dog.run();</span><br><span class="line">		dog.bark();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The cat is eating cat food and fish.</span><br><span class="line">The cat is running.</span><br><span class="line">The cat can jump!</span><br><span class="line"></span><br><span class="line">The dog is eating dog food and bones.</span><br><span class="line">The dog is running.</span><br><span class="line">The dog is barking. Woof!</span><br></pre></td></tr></table></figure>
<h2 id="6-在面向对象编程技术中什么是接口试编程举例加以说明"><a class="markdownIt-Anchor" href="#6-在面向对象编程技术中什么是接口试编程举例加以说明"></a> 6、在面向对象编程技术中，什么是接口？试编程举例加以说明。</h2>
<p><strong>接口可以看做是一个“纯”抽象类，它只提供一种形式，并不提供实现。</strong></p>
<p>接口中可以规定方法的<strong>原型</strong>：方法名、参数列表以及返回类型，但<strong>不规定方法主体</strong>；也可以包含<strong>基本数据类型</strong>的数据成员，但它们都默认为static和final。</p>
<p><strong>接口的作用</strong></p>
<ul>
<li>
<p>是面向对象的一个重要机制</p>
</li>
<li>
<p>是继承多个设计</p>
</li>
<li>
<p>建立了类和类之间的“协议”：</p>
</li>
<li>
<ul>
<li>将类根据其实现的功能分组用<strong>接口</strong>代表，而<strong>不必顾虑它所在的类继承层次</strong>；这样可以最大限度地利用动态绑定，隐藏实现细节</li>
<li>实现不同类之间的<strong>常量</strong>共享</li>
</ul>
</li>
<li>
<p>接口允许我们在看起来不相干的对象之间定义共同行为</p>
</li>
</ul>
<p>例如 Shape是接口。Circle 类及 Rectangle 类实现接口 Shape。关系如下图表示：</p>
<img src="https://repo.live.holgerbest.top/img/KLoOYz8T9GAnc7w.png" alt="接口" style="zoom:50%;" />
<p>Java代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> pi = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> radius;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">		radius = r;</span><br><span class="line">		System.out.println(<span class="string">&quot;New Circle: radius = &quot;</span> + radius);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (pi * radius * radius);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length, width;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">		length = l;</span><br><span class="line">		width = w;</span><br><span class="line">		System.out.println(<span class="string">&quot;New Rectangle: length = &quot;</span> + length</span><br><span class="line">				+ <span class="string">&quot;, width = &quot;</span> + width);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (width * length);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTester</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Circle cir;</span><br><span class="line">		cir = <span class="keyword">new</span> Circle(<span class="number">2.0</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Area of Circle cir is &quot;</span> + cir.area());</span><br><span class="line">		System.out.println();</span><br><span class="line">		Rectangle rec;</span><br><span class="line">		rec = <span class="keyword">new</span> Rectangle(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Area of Rectangle rec is &quot;</span> + rec.area());</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">New Circle: radius &#x3D; 2.0</span><br><span class="line">Area of Circle cir is 12.56636</span><br><span class="line"></span><br><span class="line">New Rectangle: length &#x3D; 5, width &#x3D; 6</span><br><span class="line">Area of Rectangle rec is 30.0</span><br></pre></td></tr></table></figure>
<h1 id="part-3"><a class="markdownIt-Anchor" href="#part-3"></a> PART 3</h1>
<h2 id="1-java异常处理是怎样的试编程举例加以说明"><a class="markdownIt-Anchor" href="#1-java异常处理是怎样的试编程举例加以说明"></a> 1、Java异常处理是怎样的？试编程举例加以说明。</h2>
<h3 id="何为异常"><a class="markdownIt-Anchor" href="#何为异常"></a> 何为异常</h3>
<p>简单地说，<strong>异常</strong>（Exception，又称例外）是指程序运行时所发生的不正常的事件。原因有很多，例如除零、下标越界、文件不存在、类型错误、装载一个不存在的类或者对 null 对象操作等等。</p>
<p>如果这些异常得不到正确的处理将会导致程序终止运行，而合理地使用异常处理结果可以使得程序更加健壮，具有更强的容错性，不会因为用户不小心的错误输入或其他运行时原因而造成程序终止；也可以使用异常处理结构为用户提供更加友好的提示。</p>
<p>当Java程序出现以上的异常时，就会在所处的方法中产生一个异常对象。这个异常对象包括异常的类型，异常出现时程序的运行状态以及对该异常的详细描述。</p>
<h3 id="异常的类型"><a class="markdownIt-Anchor" href="#异常的类型"></a> 异常的类型</h3>
<ul>
<li>检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>
<li>运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>
<li>错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li>
</ul>
<h3 id="exception-类的层次"><a class="markdownIt-Anchor" href="#exception-类的层次"></a> Exception 类的层次</h3>
<p>所有的异常类是从<code>java.lang.Exception</code>类继承的子类。</p>
<p><img src="https://repo.live.holgerbest.top/img/zrbm4TNRBysXJ5C.png" alt="Exception 类的层次" /></p>
<p>Exception类是Throwable类的子类。除了Exception类外，Throwable还有一个子类Error。Error用来指示运行时环境发生的错误。</p>
<h3 id="捕获异常"><a class="markdownIt-Anchor" href="#捕获异常"></a> 捕获异常</h3>
<p>Java的异常处理是通过5个关键字来实现的 try、catch、finally、throw、throws。</p>
<ul>
<li>try：将要被监听的代码(可能抛出异常的代码)放在try语句块之内，当try语句块内发生异常时，异常就被抛出。</li>
<li>catch：捕获异常——捕获try语句块中发生的异常。</li>
<li>finally：无论是否发生异常，代码总能执行。主要用于回收在try块里打开的物力资源（如数据库连接、网络连接和磁盘文件)。</li>
</ul>
<p><strong>声明异常</strong></p>
<ul>
<li>throws：用在方法签名中，声明方法可能要抛出的各种异常。</li>
</ul>
<p><strong>抛出异常</strong></p>
<ul>
<li>throw：手动抛出异常。</li>
</ul>
<h3 id="try-catch-结构"><a class="markdownIt-Anchor" href="#try-catch-结构"></a> try-catch 结构</h3>
<p>try/catch 代码块放在异常可能发生的地方。try/catch 代码块中的代码称为保护代码，使用 try/catch 的语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">//可能出错的程序代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(ExceptionClassName e) &#123;</span><br><span class="line">   <span class="comment">//catch块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>catch语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p>
<p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p>
<ul>
<li>情况1： try块中代码没有出现异常<br />
执行catch块代码，执行catch块后边的代码</li>
<li>情况2： try块中代码出现异常，catch中异常类型匹配（相同或者父类）<br />
执行catch块代码，执行catch块后边的代码</li>
<li>情况3： try块中代码出现异常， catch中异常类型不匹配<br />
不执行catch块代码，不执行catch块后边的代码，程序会中断运行</li>
</ul>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Question1_1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.print(<span class="string">&quot;Please input an integer: &quot;</span>);</span><br><span class="line">			<span class="keyword">int</span> num = in.nextInt();</span><br><span class="line">			System.out.println(<span class="string">&quot;3/&quot;</span> + num + <span class="string">&quot;=&quot;</span> + <span class="number">3</span> / num);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ArithmeticException error) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;A number cannot be divided by zero.&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;Program finished.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 第一次运行：</span><br><span class="line">Please input an integer: 3</span><br><span class="line">3&#x2F;3&#x3D;1</span><br><span class="line">Program finished.</span><br><span class="line"># 第二次运行：</span><br><span class="line">Please input an integer: 0</span><br><span class="line">A number cannot be divided by zero.</span><br><span class="line">Program finished.</span><br><span class="line"># 第三次运行：</span><br><span class="line">Please input an integer: c</span><br><span class="line">Exception in thread &quot;main&quot; java.util.InputMismatchException</span><br><span class="line">	at java.base&#x2F;java.util.Scanner.throwFor(Scanner.java:939)</span><br><span class="line">	at java.base&#x2F;java.util.Scanner.next(Scanner.java:1594)</span><br><span class="line">	at java.base&#x2F;java.util.Scanner.nextInt(Scanner.java:2258)</span><br><span class="line">	at java.base&#x2F;java.util.Scanner.nextInt(Scanner.java:2212)</span><br><span class="line">	at homework0401.Question1_1.main(Question1_1.java:10)</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<ul>
<li>出现异常后，Java会生成相应的异常对象寻找匹配的catch块，找到后将异常对象赋给catch块的异常参数。</li>
<li>出现异常后，try块中尚未执行的语句不会执行；出现异常后并处理后，try-catch结构后面的语句还会执行。</li>
<li>catch块不能独立于try块存在；同样，try块也不能独立存在。</li>
</ul>
<p>还可以调用异常对象的方法输出异常信息。下表是 Throwable 类的主要方法：</p>
<p><img src="https://repo.live.holgerbest.top/img/LxFdWbu2jaSAzHk.png" alt="Throwable 类的主要方法" /></p>
<p>在catch块中，还可以继续向上抛出异常 <code>throw e</code> 。</p>
<p><strong>多重捕获块</strong></p>
<p>一个try块后面跟随多个catch块的情况就叫多重捕获。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">//程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionClassName1 ExpectionObjectName1)&#123;</span><br><span class="line">  <span class="comment">//程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionClassName2 ExpectionObjectName2)&#123;</span><br><span class="line">  <span class="comment">//程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionClassName3 ExpectionObjectName3)&#123;</span><br><span class="line">  <span class="comment">//程序代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//……</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以在try语句后面添加任意数量的catch块。</li>
<li>如果保护代码中发生异常，异常被抛给第一个catch块。如果抛出异常的数据类型与ExceptionClassName匹配，它在这里就会被捕获；如果不匹配，它会被传递给后面的catch块，直到异常被捕获或者通过所有的catch块。</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li>执行其中一条catch语句后，其后catch语句将被忽略。</li>
<li>在安排catch语句的顺序时，首先应该捕获最特殊的异常， 然后再逐渐一般化，即先子类后父类。</li>
</ul>
<p>例如，把上面的例子稍微改动一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Question1_2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.print(<span class="string">&quot;Please input an integer: &quot;</span>);</span><br><span class="line">			<span class="keyword">int</span> num = in.nextInt();</span><br><span class="line">			System.out.println(<span class="string">&quot;3/&quot;</span> + num + <span class="string">&quot;=&quot;</span> + <span class="number">3</span> / num);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ArithmeticException e1) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;A number cannot be divided by zero.&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InputMismatchException e2) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Not an integer.&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e3) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Undefined Exception.&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;Program finished.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 第一次运行：</span><br><span class="line">Please input an integer: 0</span><br><span class="line">A number cannot be divided by zero.</span><br><span class="line">Program finished.</span><br><span class="line"># 第二次运行：</span><br><span class="line">Please input an integer: c</span><br><span class="line">Not an integer.</span><br><span class="line">Program finished.</span><br></pre></td></tr></table></figure>
<h3 id="finally关键字"><a class="markdownIt-Anchor" href="#finally关键字"></a> finally关键字</h3>
<p>在try-catch块后加入finally块，可以确保无论是否发生异常，finally块中的代码总能被执行。</p>
<p>通常在finally中关闭程序块已打开的资源，比如：文件流、释放数据库连接等。</p>
<p>finally 代码块出现在 catch 代码块最后，语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionClassName1 ExpectionObjectName1)&#123;</span><br><span class="line">  <span class="comment">//程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionClassName2 ExpectionObjectName2)&#123;</span><br><span class="line">  <span class="comment">//程序代码</span></span><br><span class="line">&#125;<span class="comment">/*更多的catch块*/</span></span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">//finally块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>finally块中语句不执行的唯一情况：异常处理代码中执行 <code>System.exit(1)</code> 退出Java虚拟机。</p>
<p><strong>注意</strong></p>
<p>只有finally块执行完成之后，才会回来执行try块或者catch块中的return或throw语句，如果finally块中使用了return或者throw等终止方法的语句，则就不会跳回执行，直接停止。</p>
<p>例如，上面的例子再做改动：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Question1_3</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.print(<span class="string">&quot;Please input an integer: &quot;</span>);</span><br><span class="line">			<span class="keyword">int</span> num = in.nextInt();</span><br><span class="line">			System.out.println(<span class="string">&quot;3/&quot;</span> + num + <span class="string">&quot;=&quot;</span> + <span class="number">3</span> / num);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ArithmeticException e1) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;A number cannot be divided by zero.&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InputMismatchException e2) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Not an integer.&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e3) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Undefined Exception.&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Program finished.&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果略。</p>
<h3 id="声明异常-throws"><a class="markdownIt-Anchor" href="#声明异常-throws"></a> 声明异常 throws</h3>
<p>当检查性异常产生时，不一定立刻处理它，可以说明用throws把异常声明出来，让专门负责异常处理的代码来解决。throws关键字放在方法签名的尾部。</p>
<ul>
<li>如果一个方法抛出多个已检查异常，就必须在方法的首部列出所有的异常，之间以逗号隔开。</li>
<li>throw了运行时异常，则方法声明中不需要throws</li>
<li>子类声明的异常范围不能超过父类声明范围。</li>
<li>父类没有声明异常，子类也不能。</li>
<li>不可抛出原有方法抛出异常类的父类或上层类。</li>
</ul>
<h3 id="手动抛出异常-throw"><a class="markdownIt-Anchor" href="#手动抛出异常-throw"></a> 手动抛出异常 throw</h3>
<p>也可以使用throw关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>
<p>注意抛出运行时异常和检查性异常的区别：</p>
<ul>
<li>抛出检查性异常，该throw语句要么处于try块中，要么方法签名中使用throws抛出；</li>
<li>抛出运行时异常，没有以上要求。</li>
</ul>
<h3 id="自定义异常"><a class="markdownIt-Anchor" href="#自定义异常"></a> 自定义异常</h3>
<p>在程序中，可能会遇到任何标准异常类都没有充分的描述清楚的问题，这种情况下可以创建自己的异常类。</p>
<ul>
<li>所有异常都必须是Throwable的子类。-</li>
<li>如果希望写一个检查性异常类，则需要继承Exception类。</li>
<li>如果你想写一个运行时异常类，那么需要继承RuntimeException类。</li>
</ul>
<p>可以像下面这样定义自己的异常类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">	<span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只继承Exception类来创建的异常类是<strong>检查性异常类</strong>。一个异常类和其它任何类一样，包含有变量和方法。</p>
<p>习惯上，定义的类应该包含2个构造方法：一个是默认构造方法，另一个是带有详细信息的构造方法。</p>
<h2 id="2-java匿名内部类的使用是怎样的试编程举例加以说明"><a class="markdownIt-Anchor" href="#2-java匿名内部类的使用是怎样的试编程举例加以说明"></a> 2、Java匿名内部类的使用是怎样的？试编程举例加以说明。</h2>
<p>在Java中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。Thinking in Java中这样说：可以将一个类的定义放在另外的一个类的定义中，这就是一个内部类。</p>
<p>如果我们定义的一个内部类需要多次使用，那肯定要给他一个名字；但是如果我们定义一个内部类就唯一使用一次，仅仅在当前位置使用一下，那其实他可以连名字都没有，这就是匿名内部类。在Java里面提供了像这样的定义匿名内部类的方法，匿名内部类在swing事件处理和Android开发中都有广泛的用途。</p>
<h3 id="使用匿名内部类"><a class="markdownIt-Anchor" href="#使用匿名内部类"></a> 使用匿名内部类</h3>
<p>匿名内部类由于没有名字，所以它的创建方式有点儿奇怪。创建格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> SuperType(<span class="comment">/* construction parameters */</span>) | InterfaceType() &#123; </span><br><span class="line">	<span class="comment">//匿名内部类的类体部分  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用匿名内部类必须要继承一个父类或者实现一个接口，也仅能只继承一个父类或者实现一个接口。由于匿名内部类不能是抽象类，所以它必须要实现它的抽象父类或者接口里面所有的抽象方法。</p>
<p>同时它也没有class关键字，匿名内部类直接使用new来生成隐式的对象的引用。创建匿名内部类时它会立即创建一个该类的实例，同时该类的定义会立即消失，所以匿名内部类是不能够被重复使用。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(String s)</span> </span>&#123; <span class="comment">//返回Destination引用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination() &#123;</span><br><span class="line">            <span class="comment">//这里用一个匿名类实现了Destination接口，并创建了一个实例引用</span></span><br><span class="line">            <span class="keyword">private</span> String label = s;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> label;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel parcel = <span class="keyword">new</span> Parcel();</span><br><span class="line">        Destination d = parcel.destination(<span class="string">&quot;Tasmania&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<ul>
<li>匿名内部类中不能存在任何的静态成员变量和静态方法。</li>
<li>匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。</li>
<li>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</li>
<li>匿名内部类中是不能定义构造函数的。但我们可以使用实例初始化块达到与构造方法类似的效果，例如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">destination</span><span class="params">(String s, <span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> cost;</span><br><span class="line">            &#123; <span class="comment">//实例初始化块，相当于构造方法</span></span><br><span class="line">                cost = Math.round(price);</span><br><span class="line">                <span class="keyword">if</span>(cost &gt; <span class="number">100</span>)</span><br><span class="line">                    System.out.println(<span class="string">&quot;Over budget!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">private</span> String label = s;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">readLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> label;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parcel parcel = <span class="keyword">new</span> Parcel();</span><br><span class="line">        Destination d = parcel.destination(<span class="string">&quot;Tasmania&quot;</span>, <span class="number">101.395F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>匿名内部类是唯一一种没有构造器的类。正因为其没有构造器，所以匿名内部类的使用范围非常有限，大部分匿名内部类用于接口回调。匿名内部类在编译的时候由系统自动起名为类似 <code>Outter$1.class</code> 的名字。一般来说，匿名内部类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的实现或是重写。</p>
<h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1>
<ol>
<li><a href="https://www.runoob.com/java">Java 教程 | 菜鸟教程</a></li>
<li><a href="https://holgerbest.top/2020/02/16/Java-OO0/">Java 类与对象（上）</a></li>
<li><a href="https://holgerbest.top/2020/02/16/Java-OO1/">Java 类与对象（下）</a></li>
<li><a href="https://holgerbest.top/2020/03/18/Java-OO2/">Java 类的重用</a></li>
<li><a href="https://holgerbest.top/2020/03/25/Java-interface/">Java 接口</a></li>
</ol>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 接口</title>
    <url>/2020/03/25/Java-interface/</url>
    <content><![CDATA[<img src="https://repo.live.holgerbest.top/img/NSwIfVCotyMBcRJ.png" alt="Java" style="zoom:50%;" />
<h1 id="1-什么是接口"><a class="markdownIt-Anchor" href="#1-什么是接口"></a> 1、什么是接口</h1>
<p><strong>接口可以看做是一个“纯”抽象类，它只提供一种形式，并不提供实现。</strong></p>
<p>接口中可以规定方法的<strong>原型</strong>：<u>方法名、参数列表以及返回类型</u>，但<strong>不规定方法主体</strong>；也可以包含<strong>基本数据类型</strong>的数据成员，但它们都默认为<code>static</code>和<code>final</code>。</p>
<a id="more"></a>
<h1 id="2-接口的作用"><a class="markdownIt-Anchor" href="#2-接口的作用"></a> 2、接口的作用</h1>
<ul>
<li>是面向对象的一个重要机制</li>
<li>是继承多个设计</li>
<li>建立了类和类之间的“协议”：
<ul>
<li>将类根据其实现的功能分组用<strong>接口</strong>代表，而<strong>不必顾虑它所在的类继承层次</strong>；这样可以最大限度地利用动态绑定，隐藏实现细节</li>
<li>实现不同类之间的<strong>常量</strong>共享</li>
</ul>
</li>
<li>接口允许我们在看起来不相干的对象之间定义共同行为，如下UML类图所示：</li>
</ul>
<p><img src="https://repo.live.holgerbest.top/img/java-interface.png" alt="接口的作用" /></p>
<h1 id="3-接口的语法"><a class="markdownIt-Anchor" href="#3-接口的语法"></a> 3、接口的语法</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[接口修饰符] interface 接口名称 [extends 父接口名]&#123;</span><br><span class="line">	<span class="comment">//方法的原型声明或静态常量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>接口的数据成员一定要有<strong>初值</strong>，且此值将不能再更改，可以省略<code>final</code>关键字，即接口中每一个方法是<strong>隐式抽象</strong>的，接口中的方法被隐式的指定为 <code>public abstract</code>（只能是<code>public abstract</code>，其他修饰符都会报错）；</li>
<li>接口中的方法必须是<strong>抽象方法</strong>，不能有方法体，可以省略<code>public</code>及<code>abstract</code>关键字，即接口中的变量会被隐式的指定为<code>public static final</code>变量（并且只能是<code>public</code>，用<code>private</code>修饰会报编译错误）。</li>
</ul>
<h1 id="4-接口与类的区别"><a class="markdownIt-Anchor" href="#4-接口与类的区别"></a> 4、接口与类的区别</h1>
<ul>
<li>接口不能用于实例化对象。</li>
<li>接口没有构造方法。</li>
<li>接口中所有的方法必须是<strong>抽象方法</strong>，只能由实现接口的类来实现接口中的方法。</li>
<li>接口不能包含成员变量，除了<code>static</code>和<code>final</code>变量。</li>
<li>接口不是被类继承了，而是<strong>要被类实现</strong>。</li>
<li>接口支持<strong>多继承</strong>。</li>
</ul>
<h1 id="5-抽象类和接口的区别"><a class="markdownIt-Anchor" href="#5-抽象类和接口的区别"></a> 5、抽象类和接口的区别</h1>
<ul>
<li>
<p>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</p>
<p><em>注：JDK 1.8 以后，接口里可以有静态方法和方法体了。</em></p>
</li>
<li>
<p>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是<code>public static final</code>类型的。</p>
</li>
<li>
<p>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p>
</li>
</ul>
<div class="note success flat"><p>**强调：**接口有以下特性</p>
<ul>
<li>接口是隐式抽象的，当声明一个接口的时候，不必使用<code>abstract</code>关键字。</li>
<li>接口中每一个方法也是隐式抽象的，声明时同样不需要<code>abstract</code>关键字。</li>
<li>接口中的方法都是公有的。</li>
</ul>
</div>
<p><strong>例：接口声明</strong></p>
<p>声明一个接口Shape2D，包括π和计算面积的方法原型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape2D</span> </span>&#123;	<span class="comment">//声明Shape2D接口</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;			<span class="comment">//数据成员一定要初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;	<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在接口的声明中，允许省略一些关键字，也可声明如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape2D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="6-实现接口"><a class="markdownIt-Anchor" href="#6-实现接口"></a> 6、实现接口</h1>
<h2 id="1-单一接口的实现"><a class="markdownIt-Anchor" href="#1-单一接口的实现"></a> (1)  单一接口的实现</h2>
<p>不能用<code>new</code>运算符直接产生接口对象。</p>
<p>利用接口设计类的过程，称为接口的实现，使用<code>implements</code>关键字，语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名称 <span class="keyword">implements</span> 接口名称 </span>&#123; </span><br><span class="line">	<span class="comment">//在类体中实现接口的方法</span></span><br><span class="line">	<span class="comment">//本类声明的更多变量和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note success flat"><p>注意：</p>
<ul>
<li>必须实现接口中的所有方法；</li>
<li>来自接口的方法必须声明成<code>public</code>。</li>
</ul>
</div>
<p>例：实现接口 Shape2D</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape2D</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> radius;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">		radius = r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (pi * radius * radius);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape2D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length, width;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">		length = l;</span><br><span class="line">		width = w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (width * length);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTester</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Rectangle rect = <span class="keyword">new</span> Rectangle(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Area of rect = &quot;</span> + rect.area());</span><br><span class="line">		Circle cir = <span class="keyword">new</span> Circle(<span class="number">2.0</span>)</span><br><span class="line">		System.out.println(<span class="string">&quot;Area of cir = &quot;</span> + cir.area());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Area of rect &#x3D; 30.0</span><br><span class="line">Area of cir &#x3D; 12.56</span><br></pre></td></tr></table></figure>
<h2 id="2-多个接口的实现"><a class="markdownIt-Anchor" href="#2-多个接口的实现"></a> (2)  多个接口的实现</h2>
<p><em>Java不允许一个类有多个超类</em></p>
<p><strong>一个类可以实现多个接口，通过这种机制可实现对设计的多重继承。</strong></p>
<p>实现多个接口的语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[类修饰符] <span class="class"><span class="keyword">class</span> 类名称 <span class="keyword">implements</span> 接口1, 接口2, … </span>&#123;</span><br><span class="line">	<span class="comment">//在类体中实现接口的方法</span></span><br><span class="line">	<span class="comment">//本类声明的更多变量和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note success flat"><p><strong>强调：</strong></p>
<ol>
<li>重写接口中声明的方法时，需要注意以下规则：</li>
</ol>
<ul>
<li>类在实现接口的方法时，<strong>不能抛出强制性异常</strong>，只能<u>在接口中，或者继承接口的抽象类中</u>抛出该强制性异常。</li>
<li>类在重写方法时要<strong>保持一致的方法名</strong>，并且应该保持<strong>相同或者相兼容的返回值类型</strong>。</li>
<li>如果实现接口的类是<strong>抽象类</strong>，那么就<strong>没必要实现该接口的方法</strong>。</li>
</ul>
<ol start="2">
<li>在实现接口的时候，也要注意一些规则：</li>
</ol>
<ul>
<li>一个类只能继承<strong>一个类</strong>，但是能实现<strong>多个接口</strong>。</li>
<li>一个接口能继承另一个接口，这和类之间的继承比较相似。</li>
</ul>
</div>
<h1 id="7-接口类型的引用变量"><a class="markdownIt-Anchor" href="#7-接口类型的引用变量"></a> 7、接口类型的引用变量</h1>
<p>接口的灵活性就在于“规定了一个类必须做什么，而不管你如何做”。</p>
<p>我们可以定义一个<strong>接口类型的引用变量</strong>来引用<strong>实现接口的类的对象</strong>，当这个引用来调用方法时，它会<u>根据实际引用的类的实例来判断具体调用哪个方法</u>（实现了方法在运行时的动态绑定）。</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableTester</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Shape2D var1, var2;</span><br><span class="line">		var1 = <span class="keyword">new</span> Rectangle(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Area of var1 = &quot;</span> + var1.area());</span><br><span class="line">		var2 = <span class="keyword">new</span> Circle(<span class="number">2.0</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Area of var2 = &quot;</span> + var2.area());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Area of rect &#x3D; 30.0</span><br><span class="line">Area of cir &#x3D; 12.56</span><br></pre></td></tr></table></figure>
<h1 id="8-接口的扩展"><a class="markdownIt-Anchor" href="#8-接口的扩展"></a> 8、接口的扩展</h1>
<p><strong>接口可通过扩展的技术派生出新的接口</strong></p>
<ul>
<li>原来的接口称为超接口（super interface）；</li>
<li>派生出的接口称为子接口（sub interface）。</li>
</ul>
<p>一个接口能继承另一个接口，和类之间的继承方式比较相似。接口的继承使用<code>extends</code>关键字，子接口继承父接口的方法。</p>
<p><em>在Java中，类的多继承是不合法，但接口允许多继承。</em></p>
<p>在接口的多继承中<code>extends</code>关键字只需要使用一次，在其后跟着继承接口。</p>
<p><strong>接口扩展的语法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> 子接口的名称 <span class="keyword">extends</span> 超口的名称1, 超接口的名称2, … </span>&#123;</span><br><span class="line">	<span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：实现一个接口的类也必须实现其超接口。</strong></p>
<p>例：Shape 是超接口，Shape2D 与 Shape3D 是其子接口。Circle 类及 Rectangle 类实现接口 Shape2D， 而 Box 类及 Sphere 类实现接口 Shape3D。关系可由如下UML类图表示：</p>
<p><img src="https://repo.live.holgerbest.top/img/java-ex-in.png" alt="接口的扩展的举例" /></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口声明</span></span><br><span class="line"><span class="comment">//声明Shape接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> pi = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明Shape2D接口扩展了Shape接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape2D</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明Shape3D接口扩展了Shape接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape3D</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">superficialArea</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类声明</span></span><br><span class="line"><span class="comment">//Circle类实现了Shape2D接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape2D</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> radius;</span><br><span class="line">	String color;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">		radius = r;</span><br><span class="line">		color = <span class="string">&quot;white&quot;</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;New Circle: radius = &quot;</span> + radius);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (pi * radius * radius);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		color = str;</span><br><span class="line">		System.out.println(<span class="string">&quot;color = &quot;</span> + color);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Rectangle类实现了Shape2D接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape2D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length, width;</span><br><span class="line">    String color;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">		length = l;</span><br><span class="line">		width = w;</span><br><span class="line">		color = <span class="string">&quot;white&quot;</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;New Rectangle: length = &quot;</span> + length</span><br><span class="line">				+ <span class="string">&quot;, width = &quot;</span> + width);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (width * length);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		color = str;</span><br><span class="line">		System.out.println(<span class="string">&quot;color = &quot;</span> + color);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Box类实现了Shape3D接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> <span class="keyword">implements</span> <span class="title">Shape3D</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> length, width, height;</span><br><span class="line">    String color;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">		length = l;</span><br><span class="line">		width = w;</span><br><span class="line">		height = h;</span><br><span class="line">		color = <span class="string">&quot;white&quot;</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;New Rectangle: length = &quot;</span> + length</span><br><span class="line">				+ <span class="string">&quot;, width = &quot;</span> + width + <span class="string">&quot;, height = &quot;</span> + height);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">superficialArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="number">2</span> * length * width + <span class="number">2</span> * height * width + <span class="number">2</span> * length * height);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> (length * width * height);		</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    	color = str;</span><br><span class="line">		System.out.println(<span class="string">&quot;color = &quot;</span> + color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Sphere类实现了Shape3D接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sphere</span> <span class="keyword">implements</span> <span class="title">Shape3D</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> radius;</span><br><span class="line">	String color;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sphere</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">		radius = r;</span><br><span class="line">		color = <span class="string">&quot;white&quot;</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;New Sphere: radius = &quot;</span> + radius);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">superficialArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="number">4</span> * pi * radius * radius);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> (<span class="number">4</span> * pi * radius * radius * radius / <span class="number">3</span>);		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		color = str;</span><br><span class="line">		System.out.println(<span class="string">&quot;color = &quot;</span> + color);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsInterfaceTester</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Circle cir;</span><br><span class="line">		cir = <span class="keyword">new</span> Circle(<span class="number">2.0</span>);</span><br><span class="line">		cir.setColor(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Area of Circle cir is &quot;</span> + cir.area());</span><br><span class="line">		System.out.println();</span><br><span class="line">		</span><br><span class="line">		Rectangle rec;</span><br><span class="line">		rec = <span class="keyword">new</span> Rectangle(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">		rec.setColor(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Area of Rectangle rec is &quot;</span> + rec.area());</span><br><span class="line">		System.out.println();</span><br><span class="line"></span><br><span class="line">		Box box;</span><br><span class="line">		box = <span class="keyword">new</span> Box(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">		box.setColor(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Superficial Area of Box box is &quot;</span> + box.superficialArea());</span><br><span class="line">		System.out.println(<span class="string">&quot;Volume of Box box is &quot;</span> + box.volume());</span><br><span class="line">		System.out.println();</span><br><span class="line"></span><br><span class="line">		Sphere sph;</span><br><span class="line">		sph = <span class="keyword">new</span> Sphere(<span class="number">15.0</span>);</span><br><span class="line">		sph.setColor(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Superficial Area of Sphere sph is &quot;</span> + sph.superficialArea());</span><br><span class="line">		System.out.println(<span class="string">&quot;Volume of Sphere sph is &quot;</span> + sph.volume());</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">New Circle: radius &#x3D; 2.0</span><br><span class="line">color &#x3D; blue</span><br><span class="line">Area of Circle cir is 12.56636</span><br><span class="line"></span><br><span class="line">New Rectangle: length &#x3D; 5, width &#x3D; 6</span><br><span class="line">color &#x3D; red</span><br><span class="line">Area of Rectangle rec is 30.0</span><br><span class="line"></span><br><span class="line">New Rectangle: length &#x3D; 3, width &#x3D; 4, height &#x3D; 5</span><br><span class="line">color &#x3D; green</span><br><span class="line">Superficial Area of Box box is 94.0</span><br><span class="line">Volume of Box box is 60.0</span><br><span class="line"></span><br><span class="line">New Sphere: radius &#x3D; 15.0</span><br><span class="line">color &#x3D; yellow</span><br><span class="line">Superficial Area of Sphere sph is 2827.431</span><br><span class="line">Volume of Sphere sph is 14137.155</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="9-标记接口"><a class="markdownIt-Anchor" href="#9-标记接口"></a> 9、标记接口 △</h1>
<p><em>最常用的继承接口是没有包含任何方法的接口。</em></p>
<p><strong>标记接口</strong>是没有任何方法和属性的接口。它仅仅表明它的类<strong>属于一个特定的类型</strong>，供其他代码来测试允许做一些事情。</p>
<p><strong>标记接口作用</strong>：使对象拥有某个或某些特权。（就是给某个对象打个标、盖个戳）</p>
<p>例如：<code>java.awt.event</code>包中的<code>MouseListener</code>接口继承的<code>java.util.EventListener</code>接口定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventListener</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>标记接口主要用于以下两种<strong>目的</strong>：</p>
<ul>
<li>
<p>建立一个公共的父接口：</p>
<p>正如<code>EventListener</code>接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了<code>EventListener</code>接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p>
</li>
<li>
<p>向一个类添加数据类型：</p>
<p>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法（因为标记接口根本就没有方法），但是该类通过多态性变成一个接口类型。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>Java</tag>
        <tag>学习笔记</tag>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 类的重用</title>
    <url>/2020/03/18/Java-OO2/</url>
    <content><![CDATA[<img src="https://repo.live.holgerbest.top/img/NSwIfVCotyMBcRJ.png" alt="Java" style="zoom:50%;" />
<h1 id="类的继承"><a class="markdownIt-Anchor" href="#类的继承"></a> 类的继承</h1>
<h2 id="1-概念和语法"><a class="markdownIt-Anchor" href="#1-概念和语法"></a> 1、概念和语法</h2>
<h3 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h3>
<ul>
<li><strong>根据已有类来设计新类</strong>，新类具有已有类的所有功能（属性和行为）。</li>
<li>Java中只支持类的<strong>单继承</strong>，每个子类只能拥有一个直接超类。</li>
<li><strong>超类</strong>是所有子类的<strong>公共</strong>属性和方法的集合；<strong>子类</strong>是超类的<strong>特殊化</strong>。</li>
<li>继承机制可以提高程序的抽象程度，提高代码的可重用性。</li>
</ul>
<a id="more"></a>
<h3 id="超类和子类"><a class="markdownIt-Anchor" href="#超类和子类"></a> 超类和子类</h3>
<ul>
<li>子类对象和超类对象的关系：<strong>是一种（个）……</strong></li>
<li>子类对象
<ul>
<li>从<strong>外部</strong>看它应该包括
<ul>
<li>与超类相同的接口</li>
<li>可以就有更多的方法和数据成员</li>
</ul>
</li>
<li>其<strong>内部</strong>包含着超类的所有属性和方法</li>
</ul>
</li>
</ul>
<h3 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[ClassModifier] <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">extends</span> <span class="title">SuperClassName</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note warning flat"><p>子类不能直接访问从超类继承来的私有属性和方法，但可以使用公有（或保护）方法来访问（如果超类定义了的话）。</p>
</div>
<h2 id="2-隐藏和覆盖"><a class="markdownIt-Anchor" href="#2-隐藏和覆盖"></a> 2、隐藏和覆盖</h2>
<h3 id="属性的隐藏"><a class="markdownIt-Anchor" href="#属性的隐藏"></a> 属性的隐藏</h3>
<p>子类中声明了与超类中相同的<strong>成员变量名（实例变量）</strong>（静态属性不影响，因为他们都是一个）——从超类继承的变量将隐藏。这时子类中将有<strong>两个</strong>名字相同的变量，一个继承自超类，一个由自己声明。</p>
<ul>
<li>当子类执行<strong>继承自超类的操作</strong>时，处理的时继承来的超类的变量</li>
<li>当子类执行<strong>自己声明的方法</strong>时，操作的是它自己声明的变量</li>
</ul>
<h4 id="访问被隐藏的属性"><a class="markdownIt-Anchor" href="#访问被隐藏的属性"></a> 访问被隐藏的属性</h4>
<ul>
<li>调用从超类继承来的方法</li>
<li>在本类中声明的方法访问需要使用 <code>super.属性</code> 访问</li>
</ul>
<h3 id="方法覆盖"><a class="markdownIt-Anchor" href="#方法覆盖"></a> 方法覆盖</h3>
<p>如果子类不需要使用从超类继承来的方法，可以声明自己的同名方法，称为方法覆盖。</p>
<p>覆盖方法的<strong>返回类型</strong>、<strong>方法名称</strong>、<strong>参数个数</strong>必须和被覆盖的方法完全一致。访问权限可以更宽松，但不能更严格。</p>
<blockquote>
<p>区分<strong>覆盖方法和被覆盖方法</strong>：在方法名前面使用<strong>不同的类名或不同的对象名</strong>即可区分。</p>
</blockquote>
<h4 id="方法覆盖的应用场合"><a class="markdownIt-Anchor" href="#方法覆盖的应用场合"></a> 方法覆盖的应用场合</h4>
<ul>
<li>子类中实现与超类相同的功能，但算法或公式不一样；</li>
<li>名字相同的方法中，要做比超类方法更多的事情；</li>
<li>子类中要取消从超类继承过来的方法。</li>
</ul>
<h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4>
<ul>
<li>必须覆盖的方法：派生类必须覆盖基类中的抽象方法，否则派生类自身将成为抽象类</li>
<li>不能覆盖覆盖的方法：终结方法（final）、静态方法（static）</li>
<li>调用被覆盖的方法：<code>super.被覆盖的方法名();</code></li>
</ul>
<h2 id="3-object类"><a class="markdownIt-Anchor" href="#3-object类"></a> 3、Object类</h2>
<p>Object类是所有类的直接或间接超类，处于类层次的最高点，包含了所有Java类的公共属性和行为。</p>
<h3 id="1-getclass方法"><a class="markdownIt-Anchor" href="#1-getclass方法"></a> (1) getClass方法</h3>
<p>获取当前对象所属类的信息，返回Class对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title">getClass</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回的Class对象用来代表所属类，可以查询类的各种信息：名字、超类、实现接口的名字等等。</p>
</blockquote>
<h3 id="2-tostring方法"><a class="markdownIt-Anchor" href="#2-tostring方法"></a> (2) toString方法</h3>
<p>返回表示当前对象本身有关信息的字符串对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Object类中实现的toString方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-equals方法"><a class="markdownIt-Anchor" href="#3-equals方法"></a> (3) equals方法</h3>
<p>比较<strong>两个对象引用是否指向同一个对象</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Object类中实现的equals方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="相等和同一"><a class="markdownIt-Anchor" href="#相等和同一"></a> 相等和同一</h4>
<ol>
<li>相等（equal）：两个对象类型相同，属性值相同。</li>
<li>同一（identical）：两个引用变量指向的是同一对象。</li>
<li>同一肯定相等，相等不一定同一。</li>
<li>比较运算符 <code>==</code> 判断两个对象是否<strong>同一</strong>。</li>
</ol>
<p><strong>equals方法</strong>：判断两个对象引用是否<strong>同一</strong>（<code>this == obj</code>）</p>
<blockquote>
<p><strong>String类覆盖了equals方法：<strong>可以比较两个字符串对象是否</strong>相等</strong>。</p>
</blockquote>
<h4 id="覆盖equals方法实现对象相等比较"><a class="markdownIt-Anchor" href="#覆盖equals方法实现对象相等比较"></a> 覆盖equals方法实现对象相等比较</h4>
<ul>
<li>
<p>原型必须和Object类中的一样，即：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>注意到形参为Object对象，并不知道其具体类型，方法体中首先要比较两者类型是否相同：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.getClass() != obj.getClass())</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在类型相同的情况下，将obj强制转换成当前类型，之后初始化当前类型的引用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassName b = (ClassName) obj;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>最后分别比较两者的属性值。</p>
</li>
</ul>
<blockquote>
<p>或者使用 <code>instanceof</code> 运算符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> ClassName) &#123;</span><br><span class="line">   ClassName b = (ClassName) obj;</span><br><span class="line">    <span class="comment">//分别比较两者的属性值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="4-clone方法"><a class="markdownIt-Anchor" href="#4-clone方法"></a> (4) clone方法</h3>
<p><strong>复制</strong>当前对象，并返回副本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<h4 id="使用clone方法复制对象"><a class="markdownIt-Anchor" href="#使用clone方法复制对象"></a> 使用clone方法复制对象</h4>
<ul>
<li>
<p>覆盖为public方法：在Object类中被定义为了protected方法（类外不能访问），需要覆盖为public。</p>
</li>
<li>
<p>实现 <code>Cloneable</code> 接口，赋予一个对象被复制的能力（cloneability）。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">	<span class="comment">//……</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//……</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-hashcode方法"><a class="markdownIt-Anchor" href="#5-hashcode方法"></a> (5) hashCode方法</h3>
<p>返回对象的哈希代码值（散列码）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<h4 id="方法实现的一般规定"><a class="markdownIt-Anchor" href="#方法实现的一般规定"></a> 方法实现的一般规定</h4>
<ul>
<li>在一个Java程序的一次执行过程中，如果对象”相等比较”所使用的信息没有被修改的话，同一对象执行hashCode方法每次都应返回同一个整数。在不同的执行中，对象的hashCode方法返回值不必一致。</li>
<li>如果依照equals方法两个对象是相等的，则在这两个对象上调用hashCode方法应该返回同样的整数结果。</li>
<li>如果依据equals方法两个对象不相等，并不要求在这两个对象上调用hashCode方法返回值不同。</li>
<li>只要实现得合理，Object类定义的hashCode方法为不同对象返回不同的整数。一个典型的实现是，将对象的内部地址转换为整数返回，但是Java语言并不要求必须这样实现。</li>
</ul>
<h3 id="6-finalize方法"><a class="markdownIt-Anchor" href="#6-finalize方法"></a> (6) finalize方法</h3>
<p>在对象被垃圾回收器回收前系统自动调用，通常完成资源的释放工作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>若要覆盖finalize方法，要在第一句调用超类的该方法 <code>super.finslize()</code></p>
</blockquote>
<h3 id="7-与线程相关的方法notify-notifyall-wait"><a class="markdownIt-Anchor" href="#7-与线程相关的方法notify-notifyall-wait"></a> (7) 与线程相关的方法：<code>notify</code>、<code>notifyAll</code>、<code>wait</code></h3>
<p>final方法，不能覆盖，主要用在多线程程序中。</p>
<h2 id="4-终结类和终结方法"><a class="markdownIt-Anchor" href="#4-终结类和终结方法"></a> 4、终结类和终结方法</h2>
<p>用final修饰的类和方法。</p>
<ul>
<li>终结类不能被继承；</li>
<li>终结方法在子类中不能被覆盖。</li>
</ul>
<h2 id="5-抽象类"><a class="markdownIt-Anchor" href="#5-抽象类"></a> 5、抽象类</h2>
<p>规定了整个类家族公共的属性和方法。</p>
<h3 id="抽象类"><a class="markdownIt-Anchor" href="#抽象类"></a> 抽象类</h3>
<ul>
<li>类名前加修饰符 <code>abstract</code> ；</li>
<li>可包含常规类能包含的任何成员，包括非抽象方法；</li>
<li>也可包含<strong>抽象方法</strong>：用 <code>abstract</code> 修饰，只有方法原型，没有方法的实现；</li>
<li>没有具体实例对象的类，不能使用new方法进行实例化，<strong>只能用作超类</strong>；</li>
<li>只有当子类实现了抽象超类中的所有抽象方法，子类才不是抽象类，才能产生实例；</li>
<li>如果子类中仍有抽象方法未实现，则子类也只能是抽象类。</li>
</ul>
<h4 id="语法形式"><a class="markdownIt-Anchor" href="#语法形式"></a> 语法形式</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果写：<code>new ClassName();</code> 编译将显示错误。</p>
<h3 id="抽象方法"><a class="markdownIt-Anchor" href="#抽象方法"></a> 抽象方法</h3>
<ul>
<li>仅有方法原型，没有方法体；</li>
<li>具体实现在各自的类声明中完成；</li>
<li>只有抽象类可以包含抽象方法。</li>
</ul>
<h4 id="语法形式-2"><a class="markdownIt-Anchor" href="#语法形式-2"></a> 语法形式</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数表);</span><br></pre></td></tr></table></figure>
<h4 id="抽象方法的优点"><a class="markdownIt-Anchor" href="#抽象方法的优点"></a> 抽象方法的优点</h4>
<ul>
<li>隐藏具体的细节信息，所有的子类使用的都是相同的方法原型，其中包含了调用该方法时需要了解的全部信息；</li>
<li>强迫子类完成指定的行为，规定所有子类的“标准”行为。</li>
</ul>
<h1 id="类的组合"><a class="markdownIt-Anchor" href="#类的组合"></a> 类的组合</h1>
<p>一个类的对象是另一个类的成员——将已经存在的类的对象放在新的类中。</p>
<h2 id="与继承的区别"><a class="markdownIt-Anchor" href="#与继承的区别"></a> 与继承的区别</h2>
<ul>
<li>继承：是一个（种）…… ——<strong>从属关系</strong></li>
<li>组合：有一个…… ——<strong>包含关系</strong></li>
</ul>
<h1 id="泛型"><a class="markdownIt-Anchor" href="#泛型"></a> 泛型</h1>
<p>泛型的本质：参数化类型。也就是说在泛型使用过程中，操作的数据类型<strong>被指定为一个参数</strong>，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p>
<h2 id="泛型类"><a class="markdownIt-Anchor" href="#泛型类"></a> 泛型类</h2>
<p>泛型类也就是把泛型定义在类上，这样用户在使用类的时候才把类型给确定下来。</p>
<h3 id="语法形式参见下例"><a class="markdownIt-Anchor" href="#语法形式参见下例"></a> 语法形式参见下例：</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectTool</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在使用时如果定义了类型，那么在使用时就可以不用进行强制类型转换，直接就可以得到一个T类型的对象。</p>
</blockquote>
<h3 id="使用方法"><a class="markdownIt-Anchor" href="#使用方法"></a> 使用方法：</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectTool&lt;Integer&gt; i = <span class="keyword">new</span> ObjectTool&lt;Integer&gt; (<span class="number">2</span>);</span><br><span class="line">ObjectTool&lt;Double&gt;  j = <span class="keyword">new</span> ObjectTool&lt;Double&gt; (<span class="number">3.14</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于基本类型应该使用它们的封装类型。</p>
</blockquote>
<h3 id="定义的泛型类并不一定要传入泛型类型实参"><a class="markdownIt-Anchor" href="#定义的泛型类并不一定要传入泛型类型实参"></a> 定义的泛型类，并不一定要传入泛型类型实参</h3>
<ul>
<li>在使用泛型的时候如果传入泛型实参，则会根据传入的泛型实参做相应的限制，此时泛型才会起到本应起到的限制作用。</li>
<li>如果不传入泛型类型实参的话，在泛型类中使用泛型的方法或成员变量定义的类型可以为任何的类型。</li>
</ul>
<p><strong>注意：不能对确切的泛型类型使用 <code>instanceof</code> 操作</strong></p>
<h2 id="泛型方法"><a class="markdownIt-Anchor" href="#泛型方法"></a> 泛型方法</h2>
<p>有时候只关心某个方法，那么使用泛型时可以只定义一个泛型方法，<strong>语法形式参见下例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">       System.out.println(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="泛型接口"><a class="markdownIt-Anchor" href="#泛型接口"></a> 泛型接口</h2>
<p><strong>例如</strong> 有如下的泛型接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>当实现泛型接口的类，未传入泛型实参时：</p>
<p>未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitGenerator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果不声明泛型，如：<code>class FruitGenerator implements Generator&lt;T&gt;</code> ，编译器会报错：<code>Unknown class</code> 。</p>
</blockquote>
<ol start="2">
<li>
<p>当实现泛型接口的类，传入泛型实参时：</p>
<p>定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口 <code>Generator&lt;T&gt;</code>，但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitGenerator</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] fruits = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Pear&quot;</span>&#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> fruits[rand.nextInt(<span class="number">3</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型。</p>
</blockquote>
<h2 id="类型通配符"><a class="markdownIt-Anchor" href="#类型通配符"></a> 类型通配符</h2>
<h3 id="无界"><a class="markdownIt-Anchor" href="#无界"></a> 无界</h3>
<p>和泛型方法相差不大，但不用在使用前进行定义，<strong>语法形式参见下例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElements</span><span class="params">(List&lt;?&gt; elements)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(Object o : elements)&#123;</span><br><span class="line">      System.out.println(o);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>?</code>可以接收任何类型。</p>
</blockquote>
<h3 id="上界"><a class="markdownIt-Anchor" href="#上界"></a> 上界</h3>
<p>能够接收这一类或者这一类的子类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElements</span><span class="params">(List&lt;? extends A&gt; elements)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(A a : elements)&#123;</span><br><span class="line">      System.out.println(a.getValue());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="下界"><a class="markdownIt-Anchor" href="#下界"></a> 下界</h3>
<p>能够接收这一类或者这一类的超类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertElements</span><span class="params">(List&lt;? <span class="keyword">super</span> A&gt; list)</span></span>&#123;</span><br><span class="line">    list.add(<span class="keyword">new</span> A());</span><br><span class="line">    list.add(<span class="keyword">new</span> B());</span><br><span class="line">    list.add(<span class="keyword">new</span> C());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="有限制的泛型"><a class="markdownIt-Anchor" href="#有限制的泛型"></a> 有限制的泛型</h2>
<p>在参数 <code>Type</code>后面使用 <code>extends</code> 关键字并加上类名或接口名，表明参数所代表的类型必须是该类的子类或者实现了该接口。</p>
<blockquote>
<p>注意，对于实现了某接口的有限制泛型，也是使用<code>extends</code>关键字，而不是<code>implements</code>关键字。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>Java</tag>
        <tag>学习笔记</tag>
        <tag>继承</tag>
        <tag>重用</tag>
        <tag>组合</tag>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习01-基本概念</title>
    <url>/2020/07/16/ML01/</url>
    <content><![CDATA[<h2 id="没有免费午餐定理-no-free-lunch-theorem"><a class="markdownIt-Anchor" href="#没有免费午餐定理-no-free-lunch-theorem"></a> 没有免费午餐定理 (No Free Lunch Theorem)</h2>
<p>内容：如果我们不对特征空间有先验假设，则所有算法的平均表现是一样的。</p>
<p>我们认为：特征差距小的样本更有可能是统一类。</p>
<p>总结：算法的优劣，与特征空间的假设有关，与具体情况有关。机器学习领域，没有所谓的最好的算法。</p>
<h2 id="机器学习算法种类"><a class="markdownIt-Anchor" href="#机器学习算法种类"></a> 机器学习算法种类</h2>
<ol>
<li>有监督学习（数据+标签）：SVM（支持向量机），神经网络</li>
<li>无监督学习（只有数据，没有标签）：CLUSTERING，EM算法，PCA</li>
<li>半监督学习（数据一部分有标签，一部分没有）</li>
<li>增强学习（Reinforcement learning，与上面三个预测标签不同，更关注最后的结果）</li>
</ol>
<p>根据标签的性质不同分为：</p>
<ol>
<li>聚类（Classification）：标签的值是离散的</li>
<li>回归（Regression）：标签的值是连续的</li>
</ol>
<p><strong>注意</strong> 这两种分类没有特别明显的区别。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习基本概念</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习02-支持向量机 SVM（线性模型）</title>
    <url>/2020/07/16/ML02/</url>
    <content><![CDATA[<blockquote>
<p>Vapnik 发明</p>
</blockquote>
<h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2>
<h3 id="1-线性模型"><a class="markdownIt-Anchor" href="#1-线性模型"></a> 1、线性模型</h3>
<p>简单来说，就是在一个二维平面中用一条直线，分开两类样本。像这样可以用一条直线分开的训练样本集称为<strong>线性可分训练样本集</strong>。如下图所示：</p>
<img src="https://repo.live.holgerbest.top/img/fFB3cZRWY8eTGqX.png" alt="线性可分与非线性可分"  />
<h3 id="2-最优直线"><a class="markdownIt-Anchor" href="#2-最优直线"></a> 2、最优直线</h3>
<p>可以证明，对于线性可分训练样本集，如果存在一条可以分开两类样本的直线，那么这样的直线有无数个。</p>
<img src="https://repo.live.holgerbest.top/img/grWypNaFtBdKAC3.png" alt="哪一条直线“更好”" style="zoom:80%;" />
<p>我们通过感觉判断应该是2号线更好一些。而且1、3号线对数据的噪声较为敏感（与样本数据比较靠近），而2号线对与误差的容忍程度会更多一点。</p>
<p><strong>那么，我们如何来定义2号线是怎么画的呢？</strong></p>
<p>我们可以为每条线定义一个“性能指标”，而且上面提到的2号线应该是“性能指标”最大的那一条线。</p>
<p>这里说的“性能指标”，简单来说就是将直线向两侧平移，直到第一次<em>擦到</em>两类样本点为止得到两条新的直线间的距离 <code>d</code>，如图。上面提到的2号线应该为距离 <code>d</code> 最大的那一条线。此外，为了使这条线唯一，还需要加上一个限制：这条线要在两条新直线的中间，即距离两条新直线的距离均为 <code>d/2</code> 。</p>
<img src="https://repo.live.holgerbest.top/img/LxerI2XdKwVAq9D.png" alt="“性能指标”" style="zoom:80%;" />
<h2 id="数学描述"><a class="markdownIt-Anchor" href="#数学描述"></a> 数学描述</h2>
<blockquote>
<p>支持向量机是一种最大化间隔的方法</p>
</blockquote>
<h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3>
<ul>
<li>
<p><code>d</code> ：间隔（Margin）</p>
</li>
<li>
<p>将平行线<em>擦到</em>的向量叫支持向量（Support Vectors）</p>
</li>
</ul>
<h4 id="训练数据以及标签"><a class="markdownIt-Anchor" href="#训练数据以及标签"></a> 训练数据以及标签</h4>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><msub><mi>X</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>3</mn></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mo stretchy="false">(</mo><msub><mi>X</mi><mi>N</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>N</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(X_1,y_1), (X_2,y_2), (X_3,y_3), \cdots, (X_N,y_N)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>其中X为样本向量，y为标签</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub><mo>=</mo><msup><mrow><mo fence="true">[</mo><msub><mi>X</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>X</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>X</mi><mrow><mi>i</mi><mi>m</mi></mrow></msub><mo fence="true">]</mo></mrow><mi>T</mi></msup><mo separator="true">,</mo><mi>i</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">X_i = \left[ X_{i1} , \  X_{i2} , \ \cdots , \ X_{im} \right]^T, i \in [1,N]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.231231em;vertical-align:-0.25em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy="false">{</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>i</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">y_i \in \{-1, 1\},  i \in [1,N]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span></span></p>
<h4 id="线性模型"><a class="markdownIt-Anchor" href="#线性模型"></a> 线性模型</h4>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>ω</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\omega,b)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span></span></p>
<p>其中</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi><mo>=</mo><msup><mrow><mo fence="true">[</mo><msub><mi>ω</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>ω</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>ω</mi><mi>m</mi></msub><mo fence="true">]</mo></mrow><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">\omega = \left[ \omega_1 , \ \omega_2 , \ \cdots , \ \omega_m \right]^T
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.231231em;vertical-align:-0.25em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>=</mo><mi>C</mi><mtext> (常数)</mtext></mrow><annotation encoding="application/x-tex">b = C \ \text{(常数)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace"> </span><span class="mord text"><span class="mord">(</span><span class="mord cjk_fallback">常数</span><span class="mord">)</span></span></span></span></span></span></p>
<p>描述超平面（Hyperplane）的线性方程为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>ω</mi><mi>T</mi></msup><mi>X</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\omega^TX+b=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9746609999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<div class="note info flat"><p>机器学习的目标：限定模型（超平面的线性模型） -&gt; 留出待定参数（W和b） -&gt; 通过训练样本以及算法确定待定参数（W和b）的具体取值</p>
</div>
<h4 id="线性可分的定义"><a class="markdownIt-Anchor" href="#线性可分的定义"></a> 线性可分的定义</h4>
<p>一个训练集线性可分的定义是：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>对训练集 </mtext><mo stretchy="false">{</mo><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo separator="true">,</mo><mtext> </mtext><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">\text{对训练集} \ \{(X_i,\,y_i)\}, \ i = 1,2,\cdots,N
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord cjk_fallback">对训练集</span></span><span class="mspace"> </span><span class="mopen">{</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>存在 </mtext><mo stretchy="false">(</mo><mi>ω</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><mi>s</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi mathvariant="normal">.</mi><mtext> 对 </mtext><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>N</mi><mtext> </mtext><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">\text{存在} \ (\omega,b), \ s.t. \ \text{对} \ \forall \ i = 1,2,\cdots,N \ ,
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord cjk_fallback">存在</span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mord">.</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mspace"> </span><span class="mord text"><span class="mord cjk_fallback">对</span></span><span class="mspace"> </span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace"> </span><span class="mpunct">,</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>若 </mtext><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mtext> 则 </mtext><msup><mi>ω</mi><mi>T</mi></msup><mi>X</mi><mo>+</mo><mi>b</mi><mo>≥</mo><mn>0</mn><mtext>    </mtext><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{若} \ y_i = 1, \ \text{则} \ \omega^TX+b \geq 0 \ \ \ \ (1)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord cjk_fallback">若</span></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0857709999999998em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord text"><span class="mord cjk_fallback">则</span></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>若 </mtext><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mtext> 则 </mtext><msup><mi>ω</mi><mi>T</mi></msup><mi>X</mi><mo>+</mo><mi>b</mi><mo>&lt;</mo><mn>0</mn><mtext>    </mtext><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{若} \ y_i = -1, \ \text{则} \ \omega^TX+b &lt; 0 \ \ \ \ (2)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord cjk_fallback">若</span></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0857709999999998em;vertical-align:-0.19444em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord text"><span class="mord cjk_fallback">则</span></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>其中 </mtext><msub><mi>y</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy="false">{</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">}</mo><mtext>时, (1)(2) 也合作 </mtext><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">[</mo><msup><mi>ω</mi><mi>T</mi></msup><mi>X</mi><mo>+</mo><mi>b</mi><mo stretchy="false">]</mo><mo>≥</mo><mn>0</mn><mtext>    (公式1)</mtext></mrow><annotation encoding="application/x-tex">\text{其中 } y_i \in \{-1, 1\} \text{时, (1)(2) 也合作} \ y_i[\omega^TX+b] \geq 0 \ \ \ \ \text{(公式1)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord cjk_fallback">其中</span><span class="mord"> </span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">}</span><span class="mord text"><span class="mord cjk_fallback">时</span><span class="mord">, (1)(2) </span><span class="mord cjk_fallback">也合作</span></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord text"><span class="mord">(</span><span class="mord cjk_fallback">公式</span><span class="mord">1)</span></span></span></span></span></span></p>
<h3 id="支持向量机support-vector-machine"><a class="markdownIt-Anchor" href="#支持向量机support-vector-machine"></a> 支持向量机（Support Vector Machine）</h3>
<h4 id="优化问题"><a class="markdownIt-Anchor" href="#优化问题"></a> 优化问题</h4>
<p>1、最小化（Minimize）：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>ω</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\frac 1 2 ||\omega||^2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord">2</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>2、限制条件（Subject to）：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">[</mo><msup><mi>ω</mi><mi>T</mi></msup><mi>X</mi><mo>+</mo><mi>b</mi><mo stretchy="false">]</mo><mo>≥</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">y_i[\omega^TX+b] \geq 1, \ i = 1,2,\cdots,N
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></p>
<h5 id="解释为什么要最小化"><a class="markdownIt-Anchor" href="#解释为什么要最小化"></a> 解释：为什么要最小化？</h5>
<p><strong>事实1</strong></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>ω</mi><mi>T</mi></msup><mi>X</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\omega^TX+b=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9746609999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p>和</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><msup><mi>ω</mi><mi>T</mi></msup><mi>X</mi><mo>+</mo><mi>a</mi><mi>b</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mi>a</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">a\omega^TX+ab=0, \ a \in \mathbb{R}^+
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9746609999999999em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.821331em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>是同一个平面。</p>
<p>换句话说</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>ω</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\omega,b)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span></span></p>
<p>满足公式1，则</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mi>ω</mi><mo separator="true">,</mo><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><mi>a</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">(a\omega,ab), \ a \in \mathbb{R}^+
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.821331em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>也满足公式1。</p>
<hr />
<p><strong>事实2</strong> 点到平面的距离公式</p>
<p>点</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_0,y_0)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>到平面</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>ω</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>ω</mi><mn>2</mn></msub><mi>y</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\omega_1x+\omega_2y+b=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p>的距离</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><msub><mi>ω</mi><mn>1</mn></msub><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>ω</mi><mn>2</mn></msub><msub><mi>y</mi><mn>0</mn></msub><mo>+</mo><mi>b</mi><mi mathvariant="normal">∣</mi></mrow><msqrt><mrow><msubsup><mi>ω</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>ω</mi><mn>2</mn><mn>2</mn></msubsup></mrow></msqrt></mfrac></mrow><annotation encoding="application/x-tex">d = \frac {|\omega_1x_0+\omega_2y_0+b|} {\sqrt{\omega_1^2+\omega_2^2}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.557em;vertical-align:-1.13em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.1602em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9498em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959080000000001em;"><span style="top:-2.433692em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959080000000001em;"><span style="top:-2.433692em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.9098em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,
158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067
c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,
175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71
c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,
-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26
s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2902em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mord">∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.13em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>在高维情况下的推广为：</p>
<p>向量</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mn>0</mn></msub><mo>=</mo><mo stretchy="false">[</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>X</mi><mi>m</mi></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">X_0 = [ X_{1}, X_{2}, \cdots , X_{m} ]^T
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>到超平面</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>ω</mi><mi>T</mi></msup><mi>X</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\omega^TX+b=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9746609999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p>的距离</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><msup><mi>ω</mi><mi>T</mi></msup><msub><mi>X</mi><mn>0</mn></msub><mo>+</mo><mi>b</mi><mi mathvariant="normal">∣</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>ω</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">d = \frac{|\omega^TX_0+b|}{||\omega||}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.454331em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5183309999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∣</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mord">∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>其中</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>ω</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>=</mo><msqrt><mrow><msubsup><mi>ω</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>ω</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><mo>+</mo><msubsup><mi>ω</mi><mi>m</mi><mn>2</mn></msubsup></mrow></msqrt></mrow><annotation encoding="application/x-tex">||\omega|| = \sqrt{\omega_1^2+\omega_2^2+\cdots+\omega_m^2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∣</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5413249999999998em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2986750000000002em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959080000000001em;"><span style="top:-2.433692em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959080000000001em;"><span style="top:-2.433692em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.258675em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,
572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,
-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39
c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60
s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,
-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z
M1001 80H400000v40H1013z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5413249999999998em;"><span></span></span></span></span></span></span></span></span></span></p>
<hr />
<p>所以，我们可以用 <code>a</code> 去缩放</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>ω</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>→</mo><mo stretchy="false">(</mo><mi>a</mi><mi>ω</mi><mo separator="true">,</mo><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><mi>a</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">(\omega,b) \ \rightarrow (a\omega,ab), \ a \in \mathbb{R}^+
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.821331em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>最终使在支持向量</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mn>0</mn></msub><mo>=</mo><mo stretchy="false">[</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>X</mi><mi>m</mi></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">X_0 = [ X_{1}, X_{2}, \cdots , X_{m} ]^T
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>有</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><msup><mi>ω</mi><mi>T</mi></msup><msub><mi>X</mi><mn>0</mn></msub><mo>+</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|\omega^TX_0+b| = 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p>此时，支持向量与超平面的距离</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>ω</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">d = \frac{1}{||\omega||}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∣</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>这样，进行最小化就相当于最大化了 <code>d</code>。</p>
<h5 id="有关限制条件的解释"><a class="markdownIt-Anchor" href="#有关限制条件的解释"></a> 有关限制条件的解释</h5>
<ol>
<li>小于等于，使得非支持向量的到超平面的距离都要大于支持向量的到超平面的距离。</li>
<li>小于等于1的1不一定非要是1，改成其他的整数得到的W和b也是一样的，只是在过程中用来缩放的a的值存在差距。</li>
<li>只要训练集满足线性可分，就一定可以求出W和b；否则训练集非满足线性可分，则找不到这样的W和b来满足限制条件。</li>
</ol>
<h4 id="凸优化问题二次规划问题"><a class="markdownIt-Anchor" href="#凸优化问题二次规划问题"></a> 凸优化问题，二次规划问题</h4>
<h5 id="二次规划quadratic-programming"><a class="markdownIt-Anchor" href="#二次规划quadratic-programming"></a> 二次规划（Quadratic Programming）</h5>
<ol>
<li>目标函数（Objective Function）是二次项</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>ω</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><msubsup><mi>ω</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>ω</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><mo>+</mo><msubsup><mi>ω</mi><mi>m</mi><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac 1 2 ||\omega||^2 = \frac 1 2  (\omega_1^2+\omega_2^2+\cdots+\omega_m^2)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord">2</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord">2</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<ol start="2">
<li>限制条件是一次项</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">[</mo><msup><mi>ω</mi><mi>T</mi></msup><mi>X</mi><mo>+</mo><mi>b</mi><mo stretchy="false">]</mo><mo>≥</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">y_i[\omega^TX+b] \geq 1, \ i = 1,2,\cdots,N
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></p>
<p>结果：要么无解，要么只有一个极值 （原理：拉格朗日数乘法求解条件极值）</p>
<p>方法：梯度下降法——选定一个初始位置，不断在附近搜索梯度更低的点，直到梯度不再下降</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>支持向量机</tag>
      </tags>
  </entry>
  <entry>
    <title>详细教程 | Office的安装与激活</title>
    <url>/2020/03/27/Office/</url>
    <content><![CDATA[<div class="note success flat"><p>原载：电脑义修小帮手 <a href="https://lostwinds.cn/2020/02/20/%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%9E%E5%AE%9Aoffice/">超详细教程 | 手把手教你搞定office</a></p>
</div>
<img src="https://repo.live.holgerbest.top/img/yPTxRHZiz7UGD6h.png" style="zoom:100%;" />
<blockquote>
<p>Office作为一款常用的办公软件，在我们的学习和工作中是不可少的。然而，这款软件的安装和激活困扰了很多人。下面用这三个方案，试试看能不能解决你的问题。</p>
</blockquote>
<a id="more"></a>
<div class="note info flat"><p>macOS用户可以直接移步方案二；</p>
<p>Linux用户由于微软没有兼容，可以直接选择金山WPS for Linux</p>
</div>
<h1 id="预备知识"><a class="markdownIt-Anchor" href="#预备知识"></a> 预备知识</h1>
<h2 id="预备知识1安装office之前的准备工作"><a class="markdownIt-Anchor" href="#预备知识1安装office之前的准备工作"></a> 预备知识1：安装Office之前的准备工作</h2>
<p><strong>1、检查C盘的剩余空间。</strong></p>
<p>Office如果不主动调整会自动安装在C盘（而且Office 2019无法在官方安装过程中调整安装位置），占用几个G的空间，如果C盘剩余不足10个G，要先对C盘进行清理，否则可能因为空间不足安装失败。</p>
<p><strong>2、卸载之前的Office（如果有)。</strong></p>
<p>如果是新装的Windows系统，那么系统不带有任何Office，或者是从未安装过Office的系统，可以跳过卸载步骤，直接安装Office。</p>
<p>此外，如果你的电脑是新买回来的且预装了Office（判断方法详见方案一），请先将Office激活，不然重装Office或系统后可能会无法激活Office。</p>
<p><strong>卸载步骤</strong></p>
<p>1、打开控制面板-&gt;程序-&gt;卸载程序（Windows 10更建议使用设置-&gt;应用-&gt;应用和功能），找到 Microsoft Office相关的全部卸载。</p>
<p>2、分别删除<code>C:\Program Files</code>和<code>C:\Program Files(x86)</code>下带有Microsoft Office 的所有文件夹。重启计算机，至此，之前的Office卸载工作完成。</p>
<p>3、重启之后，再次确认Office是否完全卸载完成：控制面板-&gt;程序-&gt;卸载程序（Windows 10更建议使用设置-&gt;应用-&gt;应用和功能）找不到 Microsoft Office；打开Office文档（如docx文档）不再使用Microsoft Office打开。如果还存在Microsoft Office，重复卸载步骤直到它不存在为止。</p>
<p>4、如果卸载失败或者觉得太麻烦，可以使用方案三中的卸载方法。</p>
<h2 id="预备知识2如何查看office的激活状态"><a class="markdownIt-Anchor" href="#预备知识2如何查看office的激活状态"></a> 预备知识2：如何查看Office的激活状态</h2>
<h3 id="一-windows系统"><a class="markdownIt-Anchor" href="#一-windows系统"></a> 一、Windows系统</h3>
<p>打开Microsoft Office 办公软件中的任意一个产品（这里以Office 2013 Word文档为例）。</p>
<p>这个时候出现新建界面，这里有各种模板，选择“空白文档”。 在出现的文件新建编辑窗口中点击“文件”选项。</p>
<p>这时候在新出现的界面中点击“账户”，就出现了相关信息。如果在产品信息下面有“激活的产品”就说明已经激活了。</p>
<p>如下图所示，表示目前Office2013没有激活。</p>
<img src="https://repo.live.holgerbest.top/img/office01.png" alt="激活" style="zoom:67%;" />
<p>如下图所示，表示目前Office2013已经成功激活。Office有很多组件，只要任何一个组件显示已激活，就表示Office已激活。</p>
<img src="https://repo.live.holgerbest.top/img/office02.png" alt="激活" style="zoom: 67%;" />
<h3 id="二-macos"><a class="markdownIt-Anchor" href="#二-macos"></a> 二、macOS</h3>
<p>打开Office 办公软件中的任意一个产品（这里以Word文档为例)。</p>
<p>这个时候出现新建界面，这里有各种模板，选择“空白文档”。未激活的Office会有提示需要激活，如图:</p>
<img src="https://repo.live.holgerbest.top/img/office03.png" alt="激活" style="zoom:100%;" />
<p>当激活成功以后，便不会再提示需要激活了，功能也会全部解锁。</p>
<img src="https://repo.live.holgerbest.top/img/office04.png" alt="激活" style="zoom:67%;" />
<h1 id="方案一官方下载数字许可证激活"><a class="markdownIt-Anchor" href="#方案一官方下载数字许可证激活"></a> 方案一：官方下载+数字许可证激活</h1>
<div class="note success flat"><p><strong>适用于：笔记本预装了正版Office 2016或2019 ，并且激活时绑定了微软账户。</strong></p>
<p>（可以通过查看笔记本C、D面是否有Office贴纸判断，或详询电脑经销商）</p>
<img src="https://repo.live.holgerbest.top/img/office20200220151020-1.png" alt="Office贴纸" style="zoom:60%;" />
</div>
<p>1、打开<a href="https://www.office.com/">Office官网</a>，并登录激活时的微软账户。</p>
<p>2、点击右上角的账户头像，并选择“我的个人资料”（如图）。</p>
<p><img src="https://repo.live.holgerbest.top/img/office05.png" alt="我的个人资料" /></p>
<p>3、选择最上方中间的“服务和订阅”。</p>
<p>4、点击下方“Office家庭和学生版2019”右侧的“安装”（视版本而定，考虑到预装的Office大部分为家庭和学生版，故以此为例）。</p>
<p>5、在弹出的界面中，点击“安装”，开始下载Office安装程序。</p>
<img src="https://repo.live.holgerbest.top/img/office06.png" alt="下载" style="zoom:100%;" />
<p>6、安装程序下载好后，运行，Office即开始安装。保持网络畅通，等待Office安装完成。</p>
<p>7、联网激活：打开安装好的Word、PowerPoint、Excel任意一个软件，会弹出激活对话框（如果没有弹出，请点击“文件”-&gt;“账户”-&gt;在右侧找到激活的一项），选择**“我希望通过Internet激活软件(I)。（推荐）**”，保持网络畅通，即可激活完毕（如图）。</p>
<img src="https://repo.live.holgerbest.top/img/office07.png" alt="激活" style="zoom:67%;" />
<h1 id="方案二-利用苏大正版软件服务下载激活"><a class="markdownIt-Anchor" href="#方案二-利用苏大正版软件服务下载激活"></a> 方案二 利用苏大正版软件服务下载激活</h1>
<div class="note warning flat"><p>适用于：<strong>仅限</strong>苏州大学校内师生。同样也适用于其中的macOS用户</p>
</div>
<h2 id="一-windows用户"><a class="markdownIt-Anchor" href="#一-windows用户"></a> 一、Windows用户</h2>
<div class="note success flat"><p>以Windows10企业版安装Office 2019专业增强版为例介绍安装及激活过程。</p>
<p><strong>说明：</strong></p>
<ol>
<li>Office 2019只能安装在Windows 10上，Windows 7等其他系统可以选择其他版本，其安装与激活过程大同小异。</li>
<li>若要在校外使用，请先连接苏大VPN（<a href="http://vpn1.suda.edu.cn">vpn1.suda.edu.cn</a>）。</li>
</ol>
</div>
<p>1、准备工作：Office安装包和激活工具下载。</p>
<p>打开<a href="https://its.suda.edu.cn/2319/list.htm">苏州大学信息化建设与管理中心-&gt;微软正版软件服务</a>；</p>
<p>找到想要下载的Office版本，下载对应的软件包（<strong>近几年的新电脑一般为64bit</strong>）；</p>
<p>点击<a href="https://its.suda.edu.cn/2320/list.htm">激活与帮助</a>，下载KMS激活工具。</p>
<p>2、下载好Office软件包后，直接双击即可用Windows资源管理器打开。</p>
<div class="note success flat"><p><strong>另：如果你是Windows 7系统，还需要下载虚拟光驱软件来将iso格式的Office软件包挂载到电脑上：</strong></p>
<p>可以使用“工具与其他服务/常用工具与应用”提供的<a href="ftp://kms:microsoftkms@kms.suda.edu.cn/Tools/Daemon_DTLite4491-0356.1394761051.exe">Daomon虚拟光驱软件</a>。</p>
<p>(具体操作方法可参见网站旁边的<a href="ftp://kms:microsoftkms@kms.suda.edu.cn/Tools/KMS%E6%BF%80%E6%B4%BB%E7%A4%BA%E4%BE%8B.pdf">帮助文档</a>，这里不再赘述。)</p>
</div>
<p>3、点击**“点我”**安装文件（批处理文件），即可把Office安装到你的电脑上。</p>
<p>4、激活：</p>
<div class="note warning flat"><p><em><strong>请确保激活过程中连接了苏大网络（suda-WiFi）或者苏大VPN，否则激活不成功</strong></em></p>
</div>
<p>解压下载好的suda.KMS.Update2019压缩包，右击解压得到的bat（批处理）文件，<strong>选择“以管理员身份运行”</strong>，如图所示：</p>
<img src="https://repo.live.holgerbest.top/img/office08.png" alt="以管理员身份运行" style="zoom:67%;" />
<p>系统会再次确认，点击**“是”**。</p>
<p>程序运行，会打开一个cmd窗口，上面显示一个菜单，对应于不同的Office版本</p>
<p>（说明：Windows的激活也可以使用这个方法）</p>
<p>您需要根据下载的版本输入对应的数字并回车确认。激活程序将自动运行，并在屏幕上显示运行结果</p>
<p>当屏幕提示<code>Product activation successful</code>即意味着激活成功，如图所示：</p>
<img src="https://repo.live.holgerbest.top/img/office09.png" alt="激活" style="zoom:80%;" />
<p><strong>下面列出了一些常见的激活不成功情况，如果出现错误信息可以参考以下解决方案：</strong></p>
<p>① 错误0xC004F074　软件授权服务无法联系 0xC004F074</p>
<p><strong>原因：此讯息表示可能与KMS服务器间连线有异常。</strong></p>
<p><strong>解决办法：</strong></p>
<p>检查您电脑网路连线是否正常。</p>
<p>若为校外认证，请先确认使用VPN连线工具登入；</p>
<p>您可能在系统的时区设定和KMS 相差太多，造成启动失败。务必调整为UTC+8北京，以通过认证。</p>
<p>② 错误0x80070005　访问被拒绝，错误代码 0x80070005</p>
<p><strong>原因：这个错误信息，表示您没有权限来执行请求操作。</strong></p>
<p>意思是您在执行KMS激活文件时，没有以管理员身份运行，造成启动失败。</p>
<p><strong>解决办法：</strong></p>
<p>鼠标右键该文件，然后点击“以管理员身份运行”。</p>
<p>其他错误信息，请查阅<a href="https://its.suda.edu.cn/2320/list.htm">https://its.suda.edu.cn/2320/list.htm</a></p>
<p>或者报告信息化建设与管理中心处理（E-mail：<strong><a href="mailto:80000@suda.edu.cn">80000@suda.edu.cn</a></strong>）。</p>
<h2 id="二-macos用户"><a class="markdownIt-Anchor" href="#二-macos用户"></a> 二、macOS用户</h2>
<div class="note success flat"><p>以macOS Mojave 10.14安装Office 2019 for Mac为例介绍安装及激活过程。</p>
</div>
<p>1、准备工作：Office安装包下载。</p>
<p>打开<a href="https://its.suda.edu.cn/2319/list.htm">苏州大学信息化建设与管理中心-&gt;微软正版软件服务</a>；</p>
<p>最下方找到想要下载的Office for Mac版本，下载对应的软件包。</p>
<div class="note warning flat"><p><strong>注意：请勿使用MAC自带的Safari浏览器下载。</strong></p>
</div>
<img src="https://repo.live.holgerbest.top/img/office10.png" alt="下载" style="zoom:80%;" />
<p>2、下载好Office软件包后，直接双击打开。</p>
<img src="https://repo.live.holgerbest.top/img/office11.png" alt="安装" style="zoom:80%;" />
<p>先运行<code>Microsoft_Office_16.18.18101400_Installer.pkg</code>安装Office（注意记得保留安装包）。</p>
<p>再运行<code>Microsoft_Office_2019_VL_Serializer.pkg</code>激活即可。</p>
<p>就可以在启动器里面找到Office全家桶了，而且是已经激活的了。</p>
<img src="https://repo.live.holgerbest.top/img/office12.png" alt="Office" style="zoom:80%;" />
<h1 id="方案三-利用office-tool-plus安装激活"><a class="markdownIt-Anchor" href="#方案三-利用office-tool-plus安装激活"></a> 方案三 利用Office Tool Plus安装激活</h1>
<div class="note success flat"><p><strong>适用于：所有使用Windows系统的用户</strong></p>
<blockquote>
<p>Office Tool Plus，简称OTP，是一个可以管理、安装、激活Office的工具</p>
<p>支持Office 2016和Office 2019，在线安装与离线安装。</p>
</blockquote>
</div>
<p>1、准备工作：</p>
<p>首先到<a href="https://otp.landian.vip/zh-cn/">Office Tool Plus网站</a>下载OTP工具。</p>
<p>下载完毕后，将其解压，找到主程序，然后运行。</p>
<p>2、卸载电脑中已有的Office：（如果之前卸载成功请跳过这一步）</p>
<p>转到“工具箱”页面，点击第一个“移除Office”，点击移除。</p>
<p>（如果无法正常卸载可以换个方式再试一次）</p>
<p>3、安装：</p>
<p>转到“部署”页面，点击“添加产品”。</p>
<p>选择ProPlus2019Volume（Office2019）、或者ProPlusVolume（Office 2016）</p>
<p>之后把不需要的应用程序取消勾选。</p>
<p>安装方式选择“先下载再安装”可以避免安装过程中卡进度的问题。最后点击开始部署即可安装Office。</p>
<img src="https://repo.live.holgerbest.top/img/office13.png" alt="激活" style="zoom:80%;" />
<p>4、激活：</p>
<p>转到&quot;激活&quot;页面。</p>
<p>为防止多授权的情况，可以先点击“安装许可证”旁边的三角，点击“清除激活状态”，然后选择一个Volume证书来安装。</p>
<p>推荐Office 2019 Volume（Office 2019）或者Office 2016 Volume（Office 2016），点击“安装许可证”，即可激活。</p>
<img src="https://repo.live.holgerbest.top/img/office14.png" alt="激活" style="zoom:80%;" />
<h1 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h1>
<p>1、什么是<strong>KMS激活</strong>？</p>
<p>KMS激活，全称是Key Management Service，是微软官方认可的一种系统激活方式。</p>
<p>这个激活方式主要用于企业计算机的批量激活，目的是为了Microsoft更好的遏制非法软件授权行为。</p>
<p>KMS激活只需要部署一台KMS服务器，就能够在局域网内持续提供激活服务。</p>
<p>适用于大量激活批量虚拟机等大量消耗授权的操作，并且能够保证每一个激活单位拥有同长期激活相同的功能与服务范围。</p>
<p>2、在<strong>MSDN, I tell you</strong>下载<strong>Office</strong>、<strong>Windows</strong>等。</p>
<p>我们也可以在<a href="https://msdn.itellyou.cn/">MSDN, I tell you</a>中下载我们所需的Office和Windows，如下载Office 2019（Office Professional Plus 2019）、Windows 10（1909 Update Jan 2020）等。</p>
<h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1>
<ol>
<li><a href="https://baijiahao.baidu.com/s?id=1594099293695016614">超详细的Office2016安装和激活教程</a>. 百度|系统之城. [March 05, 2018].</li>
<li><a href="ftp://kms:microsoftkms@kms.suda.edu.cn/Tools/KMS%E6%BF%80%E6%B4%BB%E7%A4%BA%E4%BE%8B.pdf">KMS激活示例</a>. 苏州大学信息化建设与管理中心. [January, 2015]</li>
<li><a href="https://its.suda.edu.cn/2320/list.htm">微软正版软件服务激活与帮助</a>. 苏州大学信息化建设与管理中心. [February 09, 2020]</li>
</ol>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器概述</title>
    <url>/2020/03/28/STL-iter/</url>
    <content><![CDATA[<p><img src="https://repo.live.holgerbest.top/img/stl-cpp.png" alt="简明STL" title="简明STL" /></p>
<div class="note success flat"><p><strong>主要内容</strong></p>
<p>迭代器及其分类、区间、辅助函数</p>
</div>
<p>迭代器是提供了访问容器中每个元素的方法，用于对一个对象群集的元素进行<strong>遍历</strong>。对象群集可能是容器，也可能是容器的一部分。</p>
<p>迭代器为容器提供一组公共接口，能够使程序非常快捷地实现对容器中内容的反复访问，反复访问意味着一次可以访问一个或多个元素。</p>
<p>迭代器是<strong>泛化的指针</strong>，提供了类似指针的操作（诸如<code>++</code>、<code>*</code>、<code>-&gt;</code>运算符）。</p>
<a id="more"></a>
<h1 id="迭代器是算法和容器的桥梁"><a class="markdownIt-Anchor" href="#迭代器是算法和容器的桥梁"></a> 迭代器是<strong>算法</strong>和<strong>容器</strong>的桥梁</h1>
<img src="https://repo.live.holgerbest.top/img/92YFOTjghp7wNsk.png" alt="迭代器是算法和容器的桥梁" style="zoom:50%;" />
<p>迭代器是用来访问容器中元素的；算法并不直接操作容器中的数据，而是通过<strong>迭代器</strong>间接操作。这就使得<strong>算法和容器相互独立</strong>：增加新的算法，无需影响容器的实现；增加新的容器，原有的算法也能适用。</p>
<h1 id="迭代器的分类"><a class="markdownIt-Anchor" href="#迭代器的分类"></a> 迭代器的分类</h1>
<p>STL定义了5种类型的迭代器，并根据其使用方法命名。每种容器都支持某种类别的迭代器。</p>
<p>常见的迭代器包括<u>输入、输出、前向、双向和随机访问</u>等类别。</p>
<img src="https://repo.live.holgerbest.top/img/lyDKdnUfN28GmAh.png" alt="分类" style="zoom:50%;" />
<ul>
<li><strong>输入迭代器</strong>主要用于为程序中需要的<strong>数据源</strong>（容器、数据流）提供<u>输入</u>接口。输入迭代器<strong>只能从一个序列中读取数值</strong>。</li>
<li><strong>输出迭代器</strong>主要用于<u>输出</u>程序中已经得到的数据结果（容器，数据流）。输出迭代器只能<strong>向一个序列写入数据</strong>。</li>
<li><strong>前向迭代器</strong>既可以用来读又可以用来写，并可以在<u>一个方向</u>上遍历。<strong>双向迭代器</strong>可以<u>同时进行前向和后向元素操作</u>。所有STL容器都提供了双向迭代器功能，这既有利于数据的写入和读出，又有利于提供更加灵活的数据操作。</li>
<li>有的容器提供了<strong>随机访问迭代器</strong>。随机接人迭代器可以通过<strong>跳跃</strong>的方式访问容器中的任意数据，使数据的访问非常灵活。随机访问迭代器<u>具有双向迭代器的所有功能</u>，是功能最强大的迭代器类型。</li>
</ul>
<h1 id="迭代器的区间"><a class="markdownIt-Anchor" href="#迭代器的区间"></a> 迭代器的区间</h1>
<p>STL算法常以迭代器的区间作为输入，传递输入数据。两个迭代器表示一个区间：<code>[p1, p2)</code>。</p>
<p>合法区间的定义：<code>p1</code>经过n次(n &gt; 0)自增(<code>++</code>)操作后满足<code>p1 == p2</code>，也就是说：区间包含<code>p1</code>，但不包含<code>p2</code>。</p>
<h1 id="迭代器的辅助函数"><a class="markdownIt-Anchor" href="#迭代器的辅助函数"></a> 迭代器的辅助函数</h1>
<ol>
<li>
<p><code>advance(p, n)</code>：对p迭代器执行n次自增操作</p>
</li>
<li>
<p><code>distance(first, last)</code>：计算两个迭代器first和last的距离，即对first执行多少次<code>++</code>操作后能够使得<code>first == last</code></p>
</li>
</ol>
<h1 id="流迭代器"><a class="markdownIt-Anchor" href="#流迭代器"></a> 流迭代器</h1>
<p>流迭代器是从流中读取的单通迭代器（输入迭代器 或 输出迭代器）。流迭代器只能传送给定类型的数据到流中或者从流中读取给定类型的数据。</p>
<p>和其他迭代器相比，流迭代器不同的是，递增一个流迭代器并不会将迭代器转移指向下一个数据项，而是会从流中读取或者插入一个值。</p>
<ul>
<li>输入流迭代器 <code>istream_iterator&lt;T&gt;</code>
<ul>
<li>以输入流（如 cin）为参数构造</li>
<li>可用 <code>*(p++)</code> 获得下一个输入的元素</li>
</ul>
</li>
<li>输出流迭代器 <code>ostream_iterator&lt;T&gt;</code>
<ul>
<li>构造时需要提供输出流（如 cout）</li>
<li>可用 <code>(*p++) = x</code> 将 <code>x</code> 输出到输出流</li>
</ul>
</li>
<li>二者都属于适配器
<ul>
<li>适配器是用来为已有对象提供新的接口的对象</li>
<li>输入流适配器和输出流适配器为流对象提供了迭代器的接口</li>
</ul>
</li>
</ul>
<p><strong>例  从标准输入读入几个实数，分别将它们的平方输出</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求平方的函数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从标准输入读入若干个实数，分别将它们的平方输出</span></span><br><span class="line">    transform(istream_iterator&lt;<span class="keyword">double</span>&gt;(<span class="built_in">cin</span>), istream_iterator&lt;<span class="keyword">double</span>&gt;(),</span><br><span class="line">        ostream_iterator&lt;<span class="keyword">double</span>&gt;(<span class="built_in">cout</span>, <span class="string">&quot;\t&quot;</span>), square);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>例  综合运用几种迭代器的示例</strong></p>
<p>程序涉及到输入迭代器、输出迭代器、随机访问迭代器这三个迭代器概念，并且以前两个概念为基础编写了一个通用算法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将来自输入迭代器的n个T类型的数值排序，将结果通过输出迭代器result输出</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="keyword">class</span> <span class="title">OutputIterator</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySort</span><span class="params">(InputIterator first, InputIterator last, OutputIterator result)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过输入迭代器将输入数据存入向量容器s中</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;T&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (;first != last; ++first)</span><br><span class="line">        s.push_back(*first);</span><br><span class="line">    <span class="comment">// 对s进行排序，sort函数的参数必须是随机访问迭代器</span></span><br><span class="line">    sort(s.begin(), s.end());  </span><br><span class="line">    copy(s.begin(), s.end(), result);   <span class="comment">//将s序列通过输出迭代器输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将s数组的内容排序后输出</span></span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">5</span>] = &#123; <span class="number">1.2</span>, <span class="number">2.4</span>, <span class="number">0.8</span>, <span class="number">3.3</span>, <span class="number">3.2</span> &#125;;</span><br><span class="line">    mySort&lt;<span class="keyword">double</span>&gt;(a, a + <span class="number">5</span>, ostream_iterator&lt;<span class="keyword">double</span>&gt;(<span class="built_in">cout</span>, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 从标准输入读入若干个整数，将排序后的结果输出</span></span><br><span class="line">    mySort&lt;<span class="keyword">int</span>&gt;(istream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cin</span>), istream_iterator&lt;<span class="keyword">int</span>&gt;(), ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.8 1.2 2.4 3.2 3.3</span><br><span class="line">2 -4 5 8 -1 3 6 -5</span><br><span class="line">-5 -4 -1 2 3 5 6 8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++-简明STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
        <tag>迭代器</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型程序设计与STL概述</title>
    <url>/2020/03/27/STL-sketch/</url>
    <content><![CDATA[<p><img src="https://repo.live.holgerbest.top/img/stl-cpp.png" alt="简明STL" title="简明STL" /></p>
<div class="note success flat"><p><strong>主要内容</strong></p>
<p>泛型、模板、STL基本组件及之间的关系</p>
</div>
<h1 id="泛型"><a class="markdownIt-Anchor" href="#泛型"></a> 泛型</h1>
<div class="note info flat"><p>Generic Programming，泛型程序设计，是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。	——<a href="http://wikipedia.org">wikipedia.org</a></p>
</div>
<p>简单来说，<strong>泛型</strong>就是编写<strong>不依赖于具体数据类型</strong>的程序，将算法从特定的数据结构中抽象出来，成为通用的。</p>
<a id="more"></a>
<h2 id="术语"><a class="markdownIt-Anchor" href="#术语"></a> 术语</h2>
<ol>
<li>
<p><strong>概念</strong>：用来界定具备一定功能的数据类型。例如：</p>
<ul>
<li>将 <em>可以比大小的所有数据类型（有比较运算符）</em> 这一概念记为<strong>Comparable</strong>；</li>
<li>将 <em>具有公有的复制构造函数并可以用<code>=</code>赋值的数据类型</em> 这一概念记为<strong>Assignable</strong>；</li>
<li>将 <em>“可以比大小、具有公有的复制构造函数并可以用<code>=</code>赋值的所有数据类型</em> 这个概念记作<strong>Sortable</strong>。</li>
</ul>
<p><strong>子概念</strong>：对于两个<strong>不同</strong>的概念A和B，如果概念A所需求的所有功能也是概念B所需求的功能，那么就说概念B是概念A的<strong>子概念</strong>。例如：</p>
<ul>
<li>Sortable既是Comparable的子概念，也是Assignable的子概念。</li>
</ul>
<p><strong>用概念做模板参数名</strong>：很多STL的实现代码就是使用概念来命名模板参数的——为概念赋予一个名称，并使用该名称作为<strong>模板参数名</strong>。</p>
</li>
<li>
<p><strong>model 模型</strong>：符合一个概念的数据类型称为<strong>该概念的模型</strong>。例如：</p>
<ul>
<li>int是Comparable概念的模型；</li>
<li>静态数组类型无法用<code>=</code>给整个静态数组赋值，故不是Assignable概念的模型。</li>
</ul>
</li>
</ol>
<h2 id="模板"><a class="markdownIt-Anchor" href="#模板"></a> 模板</h2>
<p>C++的<strong>模板</strong>为泛型程序设计奠定了关键的基础。</p>
<h3 id="函数模板"><a class="markdownIt-Anchor" href="#函数模板"></a> 函数模板</h3>
<p><strong>从函数重载到函数模板</strong></p>
<p>重载的函数，如果其<u>解决问题的逻辑一致、函数体语句相同，仅仅处理的数据类型不同</u>，写多个相同的函数体就是一种重复劳动，而且还可能因为代码的冗余造成不一致性（即修改算法时需要多次修改，容易导致bug的出现）。为了解决这一问题，可以引入<strong>函数模板</strong>的概念，将函数与它所处理的数据类型分离开来。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;模板参数表&gt;</span><br><span class="line">函数定义</span><br></pre></td></tr></table></figure>
<p>其中模板参数表的内容可以有以下三种：</p>
<ul>
<li>类型参数：<code>class|typename 标识符</code></li>
<li>常量参数：<code>类型说明符 标识符</code></li>
<li>模板参数：<code>template &lt;模板参数表&gt; class 标识符</code></li>
</ul>
<p>函数模板固然好，但是也是有使用条件的。应当注意以下几点：</p>
<ol>
<li>一个函数模板<strong>并非</strong>能够处理<strong>所有数据类型</strong>的数据，有时候我们也需要为某一或某些数据类型声明独立的函数；</li>
<li>一种数据类型要<strong>能够进行模板中涉及到的运算或操作</strong>，才可以函数模板的类型实参；</li>
<li>同样，自定义的类需要<strong>重载</strong>函数模板涉及到的运算符，才可作为类型实参。</li>
</ol>
<h3 id="类模板"><a class="markdownIt-Anchor" href="#类模板"></a> 类模板</h3>
<p>有时候，我们希望类的一些属性、方法参数和返回值可以不受到数据类型的限制，我们可以<strong>类模板</strong>。使用类模板使用户可以为类声明一种<strong>模式</strong>，使得类中的某些数据成员、某些成员函数的参数、某些成员函数的返回值，能取任意类型，这包括基本类型的和用户自定义类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;模板参数表&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名 [继承方式:</span> 基类名] &#123;</span><br><span class="line">    <span class="comment">//类成员声明</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果需要在类模板以外定义其成员函数，则要采用以下的形式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;模板参数表&gt;</span><br><span class="line">类型名 类名&lt;模板参数标识符列表&gt;::函数名(参数表) &#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即每个成员函数都相当于一个函数模板。</p>
<p>此外，在模块化编程（多文件编程）中，使用类模板的类的定义和实现要写在一个头文件中。</p>
<p>与函数模板不同的是，在类模板的类实例化产生对象时，要为其提供提供类型实参：<code>类名&lt;类型列表&gt; 对象名</code>。</p>
<h1 id="标准模板库-stl"><a class="markdownIt-Anchor" href="#标准模板库-stl"></a> 标准模板库-STL</h1>
<p>Standard Template Library，标准模板库，简称STL，提供了一些非常常用的数据结构和算法。定义了一套概念体系，为泛型程序设计提供了逻辑基础。</p>
<ul>
<li>STL中的各个类模板、函数模板的参数都是用这个体系中的<strong>概念</strong>来规定的。</li>
<li>使用STL的模板时，类型参数既可以是C++标准库中已有的类型，也可以是自定义的类型——只要这些类型是所要求<strong>概念的模型</strong>。</li>
</ul>
<h2 id="stl的基本组件"><a class="markdownIt-Anchor" href="#stl的基本组件"></a> STL的基本组件</h2>
<p>STL有四大基本组件：</p>
<ul>
<li>Container 容器</li>
<li>Iterator 迭代器</li>
<li>Algorithms 算法</li>
<li>Function Object 函数对象（仿函数）</li>
</ul>
<h3 id="container"><a class="markdownIt-Anchor" href="#container"></a> Container</h3>
<p>容器，顾名思义，就是容纳、包含并管理一组元素的对象。</p>
<p>每一种容器都有其优点和缺点。为满足程序的各种需求，STL 准备了多种容器类型。基本容器类模板如下：</p>
<ul>
<li>
<p><strong>顺序容器</strong>：顺序容器是一种各元素之间有<strong>顺序关系</strong>的线性表，是一种<strong>线性结构</strong>的可序群集。顺序性容器中的每个元素均有<strong>固定的位置</strong>，除非用删除或插入的操作改变这个位置。这个位置和元素本身无关，而和操作的时间和地点有关，即顺序容器<strong>不会根据元素的特点排序</strong>而是直接保存了<strong>元素操作时的逻辑顺序</strong>。</p>
<p>大致包含以下几类容器：array（数组）、vector（向量）、deque（双端队列）、forward_list（单链表）、list（列表）</p>
</li>
<li>
<p><strong>关联容器</strong>：关联式容器是<strong>非线性</strong>的树结构，更准确的说是<strong>二叉树结构</strong>。以<strong>键值</strong>的方式来保存数据，各元素之间没有严格的物理上的顺序关系，但是关联容器提供了对<strong>根据元素特点排序</strong>的功能，这样迭代器就能根据元素的特点**“顺序地”**（双引号是指我们可以自己规定这种顺序）获取元素。</p>
<p>大致包含以下几类容器：</p>
<ul>
<li>
<p>有序关联容器：set（集合）、multiset（多重集合）、map（映射）、multimap（多重映射）</p>
</li>
<li>
<p>无序关联容器：unordered_set （无序集合）、unordered_multiset（无序多重集合）unordered_map（无序映射）、unorder_multimap（无序多重映射）</p>
</li>
</ul>
<p><em>有序关联容器通过比较运算符来组织元素；而无序关联容器通过哈希函数和<code>==</code>来组织元素，故表现为无序。</em></p>
</li>
<li>
<p><strong>容器适配器</strong>：适配器是使一事物的行为<strong>类似于另一事物的行为</strong>的一种机制，让一种<strong>已存在</strong>的容器类型采用<strong>另一种不同的抽象类型的工作方式</strong>的一种机制。可以理解为容器的接口，而具体采用哪种容器类型可以自己决定。</p>
<p>大致有三种适配器：stack（栈）、queue（队列）、priority_queue（优先队列）</p>
</li>
</ul>
<div class="note info flat"><p>使用容器需要包含相应容器对应的头文件。</p>
</div>
<h3 id="iterator"><a class="markdownIt-Anchor" href="#iterator"></a> Iterator</h3>
<p>迭代器用于在一个对象群集的元素上进行<strong>遍历</strong>动作。对象群集可能是容器，也可能是容器的一部分。迭代器为容器提供一组公共接口。每种容器基本上都提供了各自的迭代器，且迭代器了解该容器的内部结构。</p>
<p>迭代器是<strong>泛化的指针</strong>，提供了访问容器中每个元素的方法。</p>
<p>同样，迭代器的本质是指针，指针也具有迭代器同样的特性，因此指针本身就是一种迭代器。</p>
<ul>
<li>
<p>可以使用<code>++</code>运算符来获得指向下一个元素的迭代器；</p>
</li>
<li>
<p>可以使用<code>*</code>运算符访问一个迭代器所指向的元素，如果元素类型是类或结构体，还可以使用<code>-&gt;</code>运算符直接访问该元素的一个成员；</p>
</li>
<li>
<p>有些迭代器还支持通过<code>--</code>运算符获得指向上一个元素的迭代器。</p>
</li>
</ul>
<div class="note info flat"><p>使用独立于STL容器的迭代器，需要包含头文件<code>&lt;iterator&gt;</code>。</p>
</div>
<h3 id="algorithms"><a class="markdownIt-Anchor" href="#algorithms"></a> Algorithms</h3>
<p>算法用来<strong>处理群集内的元素</strong>，可以出于不同目的搜寻、排序、修改、使用那些元素。所有容器的迭代器都提供一致的接口，通过<strong>迭代器</strong>的协助，算法程序可以用于<strong>任意容器</strong>。</p>
<p>STL包括70多个算法，可以广泛用于不同的对象和内置的数据类型。</p>
<p>​	例如：排序算法，消除算法，计数算法，比较算法，变换算法，置换算法和容器管理等等。</p>
<div class="note info flat"><p>使用STL的算法，需要包含头文件<code>&lt;algorithm&gt;</code>。</p>
</div>
<h3 id="function-object"><a class="markdownIt-Anchor" href="#function-object"></a> Function Object</h3>
<p>函数对象是泛化的函数：函数对象是一个行为类似函数的对象，对它可以像调用函数一样调用。</p>
<p>任何普通的函数和任何重载了<code>()</code>运算符的类的对象（或者结构体）都可以作为函数对象使用。</p>
<div class="note info flat"><p>使用STL的函数对象，需要包含头文件<code>&lt;functional&gt;</code>。</p>
</div>
<h2 id="基本组件间的关系"><a class="markdownIt-Anchor" href="#基本组件间的关系"></a> 基本组件间的关系</h2>
<img src="https://repo.live.holgerbest.top/img/5btKx3V8D92wRda.png" alt="STL" style="zoom:50%;" />
<p><strong>Iterators（迭代器）是 Algorithms（算法）和 Container（容器）的桥梁。</strong></p>
<ul>
<li>
<p>将<strong>迭代器</strong>作为<strong>算法</strong>的参数、<strong>通过迭代器来访问容器</strong>而不是把容器直接作为算法的参数。</p>
</li>
<li>
<p>将<strong>函数对象</strong>作为算法的参数而不是将函数所执行的运算作为算法的一部分。</p>
</li>
<li>
<p>使用STL中提供的或自定义的迭代器和函数对象，配合STL的算法，可以组合出各种各样的功能。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>C++-简明STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>算法分析与设计课程报告：Dijkstra——带权有向图单源最短路径算法</title>
    <url>/2022/01/18/alg-report/</url>
    <content><![CDATA[<h3 id="报告"><a class="markdownIt-Anchor" href="#报告"></a> 报告</h3>


	<div class="row">
    <embed src="https://repo.live.holgerbest.top/pdf/alg-report.pdf" width="100%" height="550" type="application/pdf">
	</div>



<h3 id="ppt"><a class="markdownIt-Anchor" href="#ppt"></a> PPT</h3>


	<div class="row">
    <embed src="https://repo.live.holgerbest.top/pdf/alg-report-ppt.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
      <categories>
        <category>算法分析与设计</category>
      </categories>
      <tags>
        <tag>算法分析与设计</tag>
        <tag>算法</tag>
        <tag>课程报告</tag>
      </tags>
  </entry>
  <entry>
    <title>20200215-锦标赛</title>
    <url>/2020/02/15/algorithm-20200215/</url>
    <content><![CDATA[<h1 id="nc13223"><a class="markdownIt-Anchor" href="#nc13223"></a> <a href="https://ac.nowcoder.com/acm/problem/13223">NC13223</a> 锦标赛</h1>
<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p>组委会正在为美团点评CodeM大赛的决赛设计新赛制。</p>
<p>比赛有 n 个人参加（其中 n 为2的幂），每个参赛者根据资格赛和预赛、复赛的成绩，会有不同的积分。比赛采取锦标赛赛制，分轮次进行，设某一轮有 m 个人参加，那么参赛者会被分为 m/2 组，每组恰好 2 人，m/2 组的人分别厮杀。我们假定积分高的人肯定获胜，若积分一样，则随机产生获胜者。获胜者获得参加下一轮的资格，输的人被淘汰。重复这个过程，直至决出冠军。</p>
<p>现在请问，参赛者小美最多可以<strong>活到第几轮</strong>（<strong>初始为第0轮</strong>）？</p>
<a id="more"></a>
<h2 id="输入描述"><a class="markdownIt-Anchor" href="#输入描述"></a> 输入描述</h2>
<p>第一行一个整数 n (1 ≤n≤ 2^20)，表示参加比赛的总人数。<br />
接下来 n 个数字（数字范围：-1000000…1000000），表示每个参赛者的积分。<br />
小美是<strong>第一个参赛者</strong>。</p>
<h2 id="输出描述"><a class="markdownIt-Anchor" href="#输出描述"></a> 输出描述</h2>
<p>小美最多参赛的轮次。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<p>乍一看第一想法是用数组保存所有数据，但是数据只是用来与小美的积分（a）作比较，<strong>不需要保存下来</strong>，节省了内存开销；而且只需要遍历读取积分数据一遍。</p>
<p>对于积分小于等于小美的积分的人来说，假定小美一定会获胜，统计他们的人数，再加上小美，记为j，计算这些人进行了多少轮比赛还能保证小美还活着——<strong>进行了多少轮比赛不会有这j个人以外的其他人参与进来</strong>，即计算j与2的多少次幂（<code>log2(j)</code>，向下取整）最接近。</p>
<p>注意：<strong>初始为第0轮、求活到第几轮</strong>，所以计算结果可以直接作为答案。</p>
<h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b, n, j = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line">		<span class="keyword">if</span> (b &lt;= a)</span><br><span class="line">			j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)log2(j);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>PDF Viewer Demo</title>
    <url>/2021/12/29/PDF-demo/</url>
    <content><![CDATA[<p>基于 <a href="https://github.com/superalsrk/hexo-pdf">hexo-pdf</a> 插件实现了 PDF 的在线预览功能。</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save hexo-pdf</span></span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% pdf https://repo.live.holgerbest.top/pdf/default.pdf %&#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>


	<div class="row">
    <embed src="https://repo.live.holgerbest.top/pdf/default.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>20200216-题目</title>
    <url>/2020/02/16/algorithm-20200216/</url>
    <content><![CDATA[<h1 id="nc14581"><a class="markdownIt-Anchor" href="#nc14581"></a> <a href="https://ac.nowcoder.com/acm/problem/14581">NC14581</a>  客官这边请（A+B）</h1>
<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p>我有一个很简单的题目，给你两个整数A和B，请把A和B的结果算出来。</p>
<a id="more"></a>
<h2 id="输入描述"><a class="markdownIt-Anchor" href="#输入描述"></a> 输入描述</h2>
<p>第一个行会输入一个整数T（1&lt;=T&lt;=20），代表有T组测试数据，接下来T行，每一行会输入两个整数A和B（0&lt;A,B&lt;<strong>10的100次方</strong>）。</p>
<h2 id="输出描述"><a class="markdownIt-Anchor" href="#输出描述"></a> 输出描述</h2>
<p>每一个测试数据，你要输出两行，第一行是<code>Case #:</code>，<code>#</code>代表第T组测试数据，第二行要输出<code>A + B = Sum</code>，<code>Sum</code>是<code>A+B</code>的结果。<br />
两组数据之间输出一个换行。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<p>注意到A和B的最大值有可能达到<strong>10的100次方</strong>，这远远超过了C/C++的长长整形能够表示的数据范围，而long double会损失精度，所以需要手动处理这些数据的加法（Python无视，因为其数据可以是任意大的），需要用字符串来接收输入的数据。</p>
<p>考虑到直接对字符串的处理比较困难（实际操作其实也还可以），可以自定义一个数据类型，用数组储存每位数字，并实现加法。</p>
<h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2>
<h3 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, T + <span class="number">1</span>):</span><br><span class="line">    a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    print(<span class="string">&#x27;Case %d:&#x27;</span> % i)</span><br><span class="line">    print(a, <span class="string">&#x27;+&#x27;</span>, b, <span class="string">&#x27;=&#x27;</span>, a + b)</span><br><span class="line">    <span class="keyword">if</span> i != T:</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure>
<h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">short</span> N = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//储存大型数据的LongInt类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LongInt</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">short</span> self[N];		<span class="comment">//保存每一位的数字，共N=105位</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//构造函数，用字符串init初始化数组self</span></span><br><span class="line">	LongInt(<span class="keyword">const</span> <span class="built_in">string</span>&amp; init) &#123;</span><br><span class="line">		<span class="keyword">short</span> index;</span><br><span class="line">		<span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; N - init.length(); ++index)</span><br><span class="line">			self[index] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="number">0</span>; index &lt; N; ++index, ++i)</span><br><span class="line">			self[index] = init[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将数组self中的数据组成字符串</span></span><br><span class="line">	<span class="function"><span class="built_in">string</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="built_in">ostringstream</span> os;</span><br><span class="line">		<span class="comment">//辅助判断是否输出了第一个非零数字</span></span><br><span class="line">		<span class="keyword">bool</span> done = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">short</span> i : self) &#123;</span><br><span class="line">			<span class="comment">//前零不输出判断</span></span><br><span class="line">			<span class="keyword">if</span> (i != <span class="number">0</span> || (i == <span class="number">0</span> &amp;&amp; done)) &#123;</span><br><span class="line">				os &lt;&lt; i;</span><br><span class="line">				<span class="keyword">if</span> (i != <span class="number">0</span>) done = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> os.str();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将一个LongInt对象加到这个对象上</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> LongInt&amp; num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">short</span> i = N<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">			self[i] += num.self[i];</span><br><span class="line">			<span class="keyword">if</span> (self[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">				self[i - <span class="number">1</span>]++;</span><br><span class="line">				self[i] %= <span class="number">10</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++) &#123;</span><br><span class="line">		<span class="built_in">string</span> as, bs;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; as &gt;&gt; bs;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; as &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; bs &lt;&lt; <span class="string">&quot; = &quot;</span>;</span><br><span class="line">		<span class="comment">//用两个字符串as、bs初始化a、b</span></span><br><span class="line">		LongInt a(as), b(bs);</span><br><span class="line">		a.add(b);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; a.get() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span> (i != T)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>建站一周年</title>
    <url>/2021/04/15/anniversary2021/</url>
    <content><![CDATA[<div class="note success flat"><p><strong>年度数据总览</strong></p>
<p>2020.04.15 ==&gt;&gt; 2021.04.15</p>
<p><a href="https://hzhang19.gitee.io">hzhang19.gitee.io</a> ==&gt;&gt; <a href="https://holgerbest.top">holgerbest.top</a></p>
<p>共计 13 分类，31 篇文章。</p>
</div>
<a id="more"></a>
<h1 id="年度词云图"><a class="markdownIt-Anchor" href="#年度词云图"></a> 年度词云图</h1>
<div class="tagcloud-item"><a href="/tags/Android/" style="font-size: 16px; color: #a4d8fa">Android</a> <a
        href="/tags/C/" style="font-size: 22px; color: #6dc1f7">C++</a> <a href="/tags/DB/"
        style="font-size: 16px; color: #a4d8fa">DB</a> <a href="/tags/Java/"
        style="font-size: 26px; color: #49b1f5">Java</a> <a href="/tags/Linux/"
        style="font-size: 24px; color: #5bb9f6">Linux</a> <a href="/tags/Linux%E5%91%BD%E4%BB%A4/"
        style="font-size: 18px; color: #92d0f9">Linux命令</a> <a href="/tags/Linux%E7%94%A8%E6%88%B7/"
        style="font-size: 16px; color: #a4d8fa">Linux用户</a> <a href="/tags/Linux%E7%B3%BB%E7%BB%9F%E7%8A%B6%E6%80%81/"
        style="font-size: 16px; color: #a4d8fa">Linux系统状态</a> <a href="/tags/Office/"
        style="font-size: 18px; color: #92d0f9">Office</a> <a href="/tags/Python/"
        style="font-size: 16px; color: #a4d8fa">Python</a> <a href="/tags/STL/"
        style="font-size: 20px; color: #80c8f8">STL</a> <a href="/tags/Selenium/"
        style="font-size: 16px; color: #a4d8fa">Selenium</a> <a href="/tags/Verilog/"
        style="font-size: 16px; color: #a4d8fa">Verilog</a> <a href="/tags/Word/"
        style="font-size: 16px; color: #a4d8fa">Word</a> <a href="/tags/string%E7%B1%BB/"
        style="font-size: 16px; color: #a4d8fa">string类</a> <a href="/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"
        style="font-size: 16px; color: #a4d8fa">字符串</a> <a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"
        style="font-size: 24px; color: #5bb9f6">学习笔记</a> <a href="/tags/%E5%BB%BA%E7%AB%99/"
        style="font-size: 16px; color: #a4d8fa">接口</a> <a href="/tags/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/"
        style="font-size: 16px; color: #a4d8fa">支持向量机</a> <a href="/tags/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"
        style="font-size: 20px; color: #80c8f8">数字电路</a> <a href="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"
        style="font-size: 18px; color: #92d0f9">数据结构</a> <a href="/tags/%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/"
        style="font-size: 16px; color: #a4d8fa">文本文件</a> <a href="/tags/%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF/"
        style="font-size: 16px; color: #a4d8fa">时序电路</a> <a
        href="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"
        style="font-size: 16px; color: #a4d8fa">机器学习基本概念</a> <a
        href="/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/" style="font-size: 16px; color: #a4d8fa">正则表达式</a> <a
        href="/tags/%E6%B3%9B%E5%9E%8B/" style="font-size: 18px; color: #92d0f9">泛型</a> <a
        href="/tags/%E7%AE%97%E6%B3%95/" style="font-size: 18px; color: #92d0f9">算法</a> <a
        href="/tags/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/" style="font-size: 18px; color: #92d0f9">类与对象</a> <a
        href="/tags/%E7%BB%84%E5%90%88/" style="font-size: 16px; color: #a4d8fa">组合</a> <a
        href="/tags/%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF/" style="font-size: 16px; color: #a4d8fa">组合电路</a> <a
        href="/tags/%E7%BB%84%E6%88%90/" style="font-size: 16px; color: #a4d8fa">组成</a> <a
        href="/tags/%E7%BB%88%E7%AB%AF/" style="font-size: 16px; color: #a4d8fa">终端</a> <a
        href="/tags/%E7%BB%A7%E6%89%BF/" style="font-size: 16px; color: #a4d8fa">继承</a> <a
        href="/tags/%E8%AF%BE%E5%A0%82/" style="font-size: 20px; color: #80c8f8">课堂</a> <a
        href="/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/" style="font-size: 16px; color: #a4d8fa">迭代器</a> <a
        href="/tags/%E9%87%8D%E7%94%A8/" style="font-size: 16px; color: #a4d8fa">重用</a></div>
<p></p>
<h1 id="一年来文章回顾"><a class="markdownIt-Anchor" href="#一年来文章回顾"></a> 一年来文章回顾</h1>
<div>
    <section class="timeline"><time class="timeline-item timeline-item--year">2021</time>
        <article class="timeline-item"><time class="timeline-item__time">04-15</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2021/04/15/db-mid/">数据库系统概念 -
                    期中复习 (1)</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">04-14</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2021/04/14/computer-mid/">计算机组成知识点 -
                    期中复习</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">03-07</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2021/03/07/linux-05-regex/">Linux笔记05：正则表达式与文本处理</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">01-19</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2021/01/19/linux-04-text/">Linux笔记04：文本文件及处理工具</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">01-19</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2021/01/19/python-selenium/">基于
                    Python Selenium 的表单填写自动化程序</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">01-18</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2021/01/18/linux-03-state/">Linux笔记03：系统状态</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">01-18</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2021/01/18/linux-02-user-man/">Linux笔记02：用户登录和联机手册的查阅</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">01-18</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2021/01/18/linux-01-terminal/">Linux笔记01：字符终端</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">01-14</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2021/01/14/DataStructure-Tree/">数据结构知识点-树和二叉树</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">01-12</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2021/01/12/DataStructure-1/">数据结构知识点-基础部分</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">01-02</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2021/01/02/verilog/">数字电路（第三部分）</a>
            </h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">01-01</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2021/01/01/digital-circuit-2/">数字电路（第二部分）</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">01-01</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2021/01/01/digital-circuit-1/">数字电路（第一部分）</a></h2>
        </article><time class="timeline-item timeline-item--year">2020</time>
        <article class="timeline-item"><time class="timeline-item__time">07-16</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/07/16/ML02/">机器学习02-支持向量机
                    SVM（线性模型）</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">07-16</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/07/16/ML01/">机器学习01-基本概念</a>
            </h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">07-16</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/07/16/BasicAndroid/">Android
                    入个门</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">07-02</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/07/02/Cpp-learning/">C++
                    基础语法部分课堂代码</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">03-28</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/03/28/word/">Word排版的艺术</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">03-28</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2020/03/28/JavaQ-A/">Java基础Q&amp;A</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">03-28</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/03/28/STL-iter/">迭代器概述</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">03-27</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2020/03/27/STL-sketch/">泛型程序设计与STL概述</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">03-27</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/03/27/Office/">详细教程 |
                    Office的安装与激活</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">03-25</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/03/25/Java-interface/">Java
                    接口</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">03-18</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/03/18/Java-OO2/">Java 类的重用</a>
            </h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">02-23</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/02/23/Cpp-string/">C++
                    string类</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">02-16</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/02/16/Java-OO1/">Java
                    类与对象（下）</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">02-16</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link" href="/2020/02/16/Java-OO0/">Java
                    类与对象（上）</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">02-16</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2020/02/16/algorithm-20200216/">20200216-题目</a></h2>
        </article>
        <article class="timeline-item"><time class="timeline-item__time">02-15</time>
            <h2 class="timeline-item__title"><a class="timeline-item__link"
                    href="/2020/02/15/algorithm-20200215/">20200215-锦标赛</a></h2>
        </article>
    </section>
</div>]]></content>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>大英 4 期中复习</title>
    <url>/2021/04/23/college-english-4-mid/</url>
    <content><![CDATA[<ul>
<li><a href="https://blog.holgerbest.top/2021/06/27/college-english-4-recite/">背诵段落</a></li>
<li><a href="https://blog.holgerbest.top/2021/06/27/college-english-4-translation/">段落翻译</a></li>
<li><a href="https://blog.holgerbest.top/2021/06/27/college-english-4-fast-reading/">快速阅读文章翻译</a></li>
</ul>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>大英 4 背诵段落</title>
    <url>/2021/06/27/college-english-4-recite/</url>
    <content><![CDATA[<h3 id="unit-1"><a class="markdownIt-Anchor" href="#unit-1"></a> UNIT 1</h3>
<p>In 1812, Napoleon Bonaparte, Emperor of the French, led his Grand Army into Russia. He was prepared for the <strong>fierce resistance</strong> of the Russian people defending their homeland. He was prepared for the <strong>long march</strong> across Russian soil to Moscow, the capital city. But he was not prepared for the <strong>devastating</strong> enemy that met him in Moscow – the <strong>raw</strong>, <strong>bitter</strong>, <strong>bleak</strong> Russian winter.</p>
<p>1812年，法国皇帝拿破仑•波拿巴率大军入侵俄罗斯。他准备好俄罗斯人民会为保卫祖国而奋勇抵抗。他准备好在俄罗斯广袤的国土上要经过长途跋涉才能进军首都莫斯科。但他没有料到在莫斯科他会遭遇劲敌—俄罗斯阴冷凄苦的寒冬。</p>
<p>In 1941, Adolf Hitler, leader of Nazi Germany, <strong>launched an attack against</strong> the Soviet Union, as Russia then was called. Hitler's military might was <strong>unequaled</strong>. His war machine had <strong>mowed down</strong> <strong>resistance</strong> in most of Europe. Hitler <strong>expected</strong> <strong>a short campaign</strong> but, like Napoleon before him, was <strong>taught</strong> a painful lesson. The Russian winter again <strong>came to the aid of</strong> the Soviet soldiers.</p>
<p>1941年，纳粹德国元首阿道夫•希特勒进攻当时被称作苏联的俄罗斯。希特勒的军事实力堪称无敌。他的战争机器扫除了欧洲绝大部分地区的抵抗。希特勒希望速战速决，但是，就像在他之前的拿破仑一样，他得到的是痛苦的教训。仍是俄罗斯的冬天助了苏维埃士兵一臂之力。</p>
<h3 id="unit-2"><a class="markdownIt-Anchor" href="#unit-2"></a> UNIT 2</h3>
<p>Two of the most <strong>frustrating</strong> things about driving a car are <strong>getting lost</strong> and <strong>getting stuck in traffic</strong>. While the <strong>computer revolution</strong> is unlikely to <strong>cure</strong> these <strong>problems</strong>, it will <strong>have a positive impact</strong>. Sensors in your car <strong>tuned to radio signals</strong> from <strong>orbiting satellites</strong> can locate your car <strong>precisely</strong> at any moment and <strong>warn</strong> of traffic jams. We already have twenty-four <strong>Navstar satellites</strong> orbiting the earth, <strong>making up</strong> what is called the Global Positioning System. They <strong>make it possible</strong> to determine your location on the earth to <strong>within</strong> about a hundred feet. <strong>At any given time</strong>, there are several GPS satellites orbiting <strong>overhead</strong> at a distance of about 11,000 miles. Each satellite contains four &quot;<strong>atomic</strong> clocks,&quot; which <strong>vibrate</strong> <strong>at a precise frequency</strong>, according to <strong>the laws of the quantum theory</strong>.</p>
<p>开车最头疼的两大麻烦是迷路和交通堵塞。虽然计算机革命不可能彻底解决这两个问题，但却会带来积极的影响。你汽车上与绕轨道运行的卫星发出的无线电信号调谐的传感器能随时精确地确定你汽车的方位，并告知交通阻塞情况。我们已经有24颗环绕地球运行的导航卫星，组成了人们所说的全球卫星定位系统。通过这些卫星我们有可能以小于100英尺的误差确定你在地球上的方位。在任何一个特定时间，总有若干颗全球定位系统的卫星在11000英里的高空绕地球运行。每颗卫星都装有4个“原子钟”，它们根据量子理论法则，以精确的频率振动。</p>
<p>As a satellite passes overhead, it <strong>sends out</strong> a <strong>radio signal</strong> that can be <strong>detected</strong> by a receiver in a car's computer. The car's computer can then <strong>calculate</strong> how far the satellite is by <strong>measuring</strong> how long it took <strong>for</strong> the signal <strong>to</strong> arrive. <strong>Since</strong> the speed of light is <strong>well known</strong>, any delay in receiving the satellite's signal can <strong>be converted into</strong> a distance.</p>
<p>卫星从高空经过时发出能被汽车上计算机里的接收器辨认的无线电信号。汽车上的计算机就会根据信号传来所花的时间计算出卫星有多远。由于光速为人熟知，接收卫星信号时的任何时间迟缓都能折算出距离的远近。</p>
<h3 id="unit-3"><a class="markdownIt-Anchor" href="#unit-3"></a> UNIT 3</h3>
<p>2  When a recent college graduate came into my office not too long ago looking for a <strong>sales</strong> job, I asked him what he had done to prepare for the interview. He said he’d read something about us somewhere.</p>
<p>不久前一个新近毕业的大学生到我办公室谋求一份销售工作。我问他为这次面试做过哪些准备。他说他在什么地方看到过有关本公司的一些情况。</p>
<p>3  Had he called anyone at Mackay Envelope <strong>Corporation</strong> to find out more about us? No. Had he called our suppliers? Our customers? No.</p>
<p>他有没有给麦凯信封公司的人打过电话，好了解更多有关我们的情况？没打过。他有没有给我们的供应厂商打过电话？还有我们的客户？都没有。</p>
<p>4  Had he <strong>checked</strong> with his university to see if there were any <strong>graduates</strong> working at Mackay whom he could interview? Had he asked any friends to <strong>grill</strong> him in a <strong>mock interview</strong>? Did he go to the library to find newspaper <strong>clippings</strong> on us?</p>
<p>他可曾在就读的大学里查问过有没有校友在本公司就职，以便向他们了解一些情况?他可曾请朋友向他提问，对他进行模拟面试？可曾去图书馆查找过有关本公司的剪报？</p>
<p>5  Did he write a letter <strong>beforehand</strong> to tell us about himself, what he was doing to prepare for the interview and why he’d be right for the job? Was he planning to follow up the interview with another letter <strong>indicating</strong> his <strong>eagerness</strong> to join us? Would the letter be in our hands within 24 hours of the meeting, possibly even <strong>hand-delivered</strong>? 他事先有没有写封信来介绍自己，告诉我们自己为这次面试在做哪些准备，自己何以能胜任此项工作？面试之后他是否打算再写一封信，表明自己加盟本公司的诚意？这封信会不会在面试后的24小时之内送到我们手上，也许甚至是亲自送来？</p>
<p>6  The answer to every question was the same: no. That left me with only one other question: How well prepared would this person be if he were to call on a <strong>prospective</strong> <strong>customer</strong> for us? I already knew the answer.</p>
<p>他对上述每一个问题的回答全都一样：没有。这样我就只剩一个问题要问了：如果此人代表本公司去见可能成为我们客户的人，他准备工作会做得怎样？答案不言自明。</p>
<h3 id="unit-4"><a class="markdownIt-Anchor" href="#unit-4"></a> UNIT 4</h3>
<p>Although Browder and Mandl <strong>define</strong> their <strong>nationality</strong> differently, both see their <strong>identity as</strong> a matter of <strong>personal choice</strong>, not an <strong>accident</strong> of birth.</p>
<p>And <strong>not</strong> <strong>incidentally</strong>, both are Davos Men, members of the international business <strong>elite</strong> <u>who <strong>trek</strong> each year to the Swiss Alpine town for the annual meeting of the world Economic Forum, founded in 1971.</u></p>
<p>This week, Browder and Mandl will join more than 2,200 <strong>executives</strong>, <strong>politicians</strong>, <strong>academics</strong>, <strong>journalists</strong>, <strong>writers</strong> and a <strong>handful</strong> of Hollywood stars for five days of networking, parties and endless <strong>earnest</strong> discussions about everything from post-election Iraq and HIV in Africa to the global supply of oil and <strong>the</strong> <strong>implications</strong> of <strong>nanotechnology</strong>.</p>
<p>Yet this year, perhaps <strong>more than ever</strong>, a hot topic at Davos is Davos itself.</p>
<p>Whatever their <strong>considerable</strong> difference<strong>s</strong>, most Davos Men and Women share at least one belief that <strong>globalization</strong>, the <strong>unimpeded</strong> flows of capital, labor and technology across national borders, is both welcome and unstoppable.</p>
<p>They see the world increasing<strong>ly</strong> as one <strong>vast</strong>, <strong>interconnected</strong> <strong>marketplace</strong> in which <strong>corporations</strong> search for the most <strong>advantageous</strong> locations to buy, <strong>produce</strong> and sell their goods and services.</p>
<p>虽然布劳德和曼德尔对各自的国籍有不同的界定，但他们都将国籍视为个人选择问题，而并非由出生地决定。</p>
<p>而且，他们两个人都是达沃斯人，这可不是凑巧的事。达沃斯人指的是那些每年长途跋涉去瑞士阿尔卑斯山区的小城参加年度世界经济论坛的国际商业精英们。（该论坛成立于1971年）</p>
<p>本周，布劳德和曼德尔将同2200余名企业高管﹑政客﹑学者﹑记者﹑作家和几位好莱坞明星一起，参加为期五天的交际活动﹑宴会和无休止的认真的讨论。讨论话题形形色色，从大选后的伊拉克和非洲的艾滋病病毒到全球的石油供应和纳米技术的意义。</p>
<p>但是今年，或许比以往更甚的是，达沃斯论坛的一个热门话题即达沃斯本身。</p>
<p>尽管与会男女各不相同，但他们大多数有一个共同的信念：全球化，即资本﹑劳动力和技术不受阻碍的跨国界流动，既值得欢迎又不可阻挡。</p>
<p>在他们看来，世界越来越像一个巨大的互相联系的市场。在这个市场里，企业寻求采购﹑生产及销售产品和服务的最佳地点。</p>
<h3 id="unit-5"><a class="markdownIt-Anchor" href="#unit-5"></a> UNIT 5</h3>
<p>1   For thirty years now I have been studying my <strong>fellowmen</strong>. I do not know very much about them. I shrug my shoulders when people tell me that their first impressions of a person are always right. I think they must have <strong>small</strong> <strong>insight</strong> or <strong>great</strong> <strong>vanity</strong>. For my own part I find that the longer I know people the more they <strong>puzzle</strong> me.</p>
<p>三十年来，我一直研究我的人类同胞，但至今了解不多。每当有人跟我说他对一个人的第一次印象向来不错的时候，我就耸耸肩。我想这种人不是无知，就是自大。拿我自己来说，我发现，认识一个人的时间越长，我就越感到困惑。</p>
<p>2  These <strong>reflections</strong> have <strong>occurred</strong> to me because I read in this morning’s paper that Edward Hyde Burton had died at Kobe. He was a <strong>merchant</strong> and he had been in business in Japan for many years. I knew him very little, but he <strong>interested</strong> <strong>me</strong> because once he gave me a great surprise.</p>
<p>Unless I had heard the story from his own <strong>lips</strong>, I should never have believed that he was <strong>capable</strong> of such an action. It was more <strong>startling</strong> because both in <strong>appearance</strong> and manner he suggested a very <strong>definite</strong> type. Here <strong>if ever</strong> was a man <strong>all of a</strong> <strong>piece</strong>.</p>
<p>He was a tiny little fellow, not much more than five feet four in height, and very <strong>slender</strong>, with white hair, a red face much <strong>wrinkled</strong>, and blue eyes. I suppose he was about sixty when I knew him. He was always neatly and quietly dressed <strong>in accordance with</strong> his age and station.</p>
<p>我产生这些想法，是因为我在今天早上的报纸上看到爱德华·海德·伯顿在神户去世的消息。他是个商人，在日本经商多年。我跟他并不熟，但是对他挺有兴趣，因为有一次他让我大吃一惊。</p>
<p>要不是听他亲口讲述这个故事，我根本不会相信他能做出这种事来。这件事之所以特别令人惊讶，是因为无论是外表还是风度，他都让人想到一种非常明确的类型。要说真有表里如一的人的话，那就是此公了。</p>
<p>他个子很小，身高不过5英尺4英寸，身材纤细，白头发、蓝眼睛，红红的脸上布满皱纹。我估计自己认识他时，他大约有60岁光景。他向来衣着整洁素雅，合乎他的年龄和身份。</p>
<p>3  Though his offices were in Kobe, Burton often came down to Yokohama. I <strong>happened on one occasion to</strong> be spending a few days there, waiting for a ship, and I was introduced to him at the British Club. We played <strong>bridge</strong> together. He played a good game and a <strong>generous</strong> one. He did not talk very much, either then or later when we were having drinks, but what he said was <strong>sensible</strong>. He had a quiet, <strong>dry</strong> <strong>humor</strong>. He seemed to be popular at the club and afterwards, when he had gone, they described him as one of the best.</p>
<p>It happened that we were both staying at the Grand Hotel and next day he asked me to <strong>dine</strong> with him. I met his wife, fat, <strong>elderly</strong>, and smiling, and his two daughters. It was <strong>evidently</strong> a <strong>united</strong> and <strong>affectionate</strong> family. I think the <strong>chief</strong> thing that struck me about Burton was his kindliness. There was something very <strong>pleasing</strong> in his <strong>mild</strong> blue eyes. His voice was <strong>gentle</strong>; you could not <strong>imagine</strong> that he could possibly raise <strong>it</strong> in anger; his smile was <strong>benign</strong>. Here was a man who attracted you because you felt in him a real love for his fellows.</p>
<p>At the same time he liked his game of cards and his <strong>cocktail</strong>, he could tell with point a good and <strong>spicy</strong> <strong>story</strong>, and in his youth he had been <strong>something of</strong> an athlete. He was a rich man and he had made every penny himself. I suppose one thing that made you like him was that he was so small and <strong>frail</strong>; he <strong>aroused</strong> <strong>your</strong> <strong>instincts</strong> <strong>of</strong> <strong>protection</strong>. You felt that he could not bear to hurt a <strong>fly</strong>.</p>
<p>伯顿的办事处设在神户，但他常常到横滨来。有一次，我正好因为等船，要在那里呆几天，在英国俱乐部经人介绍与他相识。我们在一起玩桥牌。他打得不错，牌风也好。无论在玩牌的时候，还是在后来一起喝酒的时候，他的话都不多，但说的话却都合情合理。他挺幽默，但并不咋呼。他在俱乐部里似乎人缘不错，后来，在他走了以后，人家都说他是个顶呱呱的人。</p>
<p>事有凑巧，我们俩都住在格兰德大酒店。第二天他请我吃饭。我见到了他的太太――一位肥肥胖胖、满面笑容的半老妇人――和他的两个女儿。这显然是和睦恩爱的一家人。我想，伯顿当时给我印象最深的主要还是他这个人和善。他那双温和的蓝眼睛有种令人愉快的神情。他说话的声音轻柔；你无法想象他会提高嗓门大发雷霆；他的笑容和蔼可亲。这个人吸引你，是因为你从他身上感到他对别人的真正的爱。</p>
<p>同时他也喜欢玩牌，喝鸡尾酒，他能绘声绘色地讲个来劲儿的段子什么的，他年轻时多少还是个运动员呢。他是个阔佬，但他的每一个便士都是自己挣来的。我想，人们喜欢他还有一个原因，那就是他非常瘦小、脆弱，容易引起人们的恻隐之心。你觉得他甚至连只苍蝇都不忍伤害。</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>大英 4 期末不挂科指南</title>
    <url>/2021/06/27/college-english-4-final-exam/</url>
    <content><![CDATA[<ul>
<li><a href="https://blog.holgerbest.top/2021/06/27/college-english-4-recite/">背诵段落</a></li>
<li><a href="https://blog.holgerbest.top/2021/06/27/college-english-4-translation/">段落翻译</a></li>
<li><a href="https://blog.holgerbest.top/2021/06/27/college-english-4-fast-reading/">快速阅读文章翻译</a></li>
</ul>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>大英 4 快速阅读文章翻译</title>
    <url>/2021/06/27/college-english-4-fast-reading/</url>
    <content><![CDATA[<h3 id="unit-1-text-1"><a class="markdownIt-Anchor" href="#unit-1-text-1"></a> Unit 1 Text 1</h3>
<p><strong>中国画</strong></p>
<blockquote>
<p>摘自苏大英语在线公众号</p>
</blockquote>
<p>A)  <strong>中国画，中国的民族美术(national fine art)，因其悠久的历史和与众不同(distinctive)的风格而著名(be celebrated for)。</strong>它通过在物象的表达(subject expression)中用不受透视(perspective)限制的笔触(brush strokes)来强调(emphasize)线条的运用(execution)，并因此在世界美术之中开创出一种特殊的绘画体系。</p>
<p>B)  <strong>在封建时代(imperial times)</strong>，国画和书法(calligraphy)是<u>宫廷圈</u>(court circles)内最高雅(appreciated)的艺术，并且几乎都(exclusively)由业余爱好者们(amateurs)——贵族(aristocrats)和士大夫(scholar-officials)创作——<strong>只有他们才有空闲(leisure)去完善自己的绘画技巧和必要的感知力(sensibility)。</strong>书法被认为是最高级也最纯粹(pure<u>st</u>)的绘画形式。他们绘画的工具(implement)是由动物毛发制作的毛笔和由松烟(pine soot)及动物胶制成的黑色墨水。在古代，书写和绘画都是在丝绸上完成的。但是在公元1世纪纸发明之后，丝绸逐渐被这种新型便宜的材料取代。著名书法家所独创(original)的书法作品(calligraphers)<u>在中国历史上</u>(throughout China’s history)有极大的价值并且被用卷轴裱起来挂在墙上，绘画也是如此。</p>
<p>C)  传统方式的绘画所包含的技巧本质上(essentially)是和书法一样的，用蘸(dip<u>ped</u>)着黑色或彩色墨水的毛笔完成，颜料(oils)是不用的。<strong>和书法一样(As with …)，绘画使用的最受欢迎的材料是纸张和丝绸。</strong>完成的作品之后会被裱在卷轴上，以便能卷起来或挂起来。</p>
<p>D)  从唐朝(Tang dynasty)开始（公元618——907）,绘画最主要的主体(the primary subject matter of painting)是风景，为人所知的是山水画。在这些风景之中，最主要的目的不是具体地(exactly)重现(produce)自然的面貌，<strong>而是抓住(grasp)其中的一种情感或者气氛以此来(so as to)抓住自然的“节律(rhythm)”</strong>。<strong>在宋朝</strong>（公元960——1279），风景画出现了更加微妙(subtle)的表达，无限远(immeasurable)的距离通过模糊(blurred)的边界来体现(convey)，山的轮廓(contour)消失在薄雾(mist)中，<strong>还有对于自然现象(phenomena)的印象派(impressionistic)处理</strong>。<strong>绘画的重心是放在画的精神品质上还有画家揭示(reveal)内在的人与自然和谐的能力</strong>，正如感知(perceived)道家和佛教的宗旨。</p>
<p>E)  从13世纪开始，发展出了一种以简单事物为题材的传统——一树枝的水果，一丛花或者一两匹马。<strong>叙事(Narrative)画，比宋画使用范围更广且成分(composition)更为复杂的颜色，在明朝（公元1368——1644）是十分受欢迎的。</strong></p>
<p>F) 在明朝期间出现了第一批有彩色木刻画插图(illustrate with)的书籍。随着彩色印刷技术的完善(perfected)，<strong>关于绘画艺术的插图手册开始出版</strong>。《芥子园画传》，1679年第一次出版的五卷作品，直到现在(ever since)仍被用作画家以及学生的技术教科书。</p>
<p>G) <strong>从新文化运动(<em>the New Culture Movement</em>)（20世纪初）起，中国画家开始采用(adopt)西方技巧。</strong>油画也是在此期间被传入(be introduced to)中国的。</p>
<p><strong>段落匹配</strong></p>
<ol>
<li>在明代，叙事画比宋代的山水画使用更广泛的颜色。<strong>E</strong></li>
<li>中国画，世界美术中的一个特殊的绘画系统，历史悠久(enjoy a long history)。<strong>A</strong></li>
<li>书法和绘画创作(execute)中使用的最流行的材料是丝绸和纸张。<strong>C</strong></li>
<li>直到20世纪初中国画家才开始采用西方技巧。<strong>G</strong></li>
<li>展示人与自然和谐的能力是一幅优秀的画的条件(criteria)之一，尤其是在宋代。<strong>D</strong></li>
<li>在封建时代，中国画很少由中国普通老百姓创作。<strong>B</strong></li>
</ol>
<p><strong>按事件发生的顺序排序（1~4）</strong></p>
<p>a. 关于绘画艺术的插图手册出版 (<strong>3</strong>)<br />
b. 自然现象(phenomena)的印象派(impressionistic)处理 (<strong>2</strong>)<br />
c. 采用西方技巧 (<strong>4</strong>)<br />
d. 在山水画中可以抓住自然的“节律(rhythm)” (<strong>1</strong>)</p>
<h3 id="unit-1-text-2"><a class="markdownIt-Anchor" href="#unit-1-text-2"></a> Unit 1 Text 2</h3>
<p><strong>聚光灯(spotlight)下的佛罗伦萨(Florence)</strong></p>
<p>在佛罗伦萨这个城市里，吃的、睡的、和呼吸的都是艺术，人类艺术天才的典范几乎矗立在每一条街上。数不胜数的博物馆和艺术商店等待着探索，意大利小镇佛罗伦萨是艺术爱好者的天堂。</p>
<p>在文艺复兴期间，佛罗伦萨就是艺术家的天堂。事实上，五百多年以前文艺复兴就在这里发迹了。在此之前，艺术只关注宗教主题。文艺复兴开始之后，艺术包含的领域更加广泛。艺术家们会为普通百姓作画，也会为希腊和罗马神话中的人物和历史场景作画。</p>
<p>米开朗琪罗是佛罗伦萨艺术家中的佼佼者。游客们在<strong>E) 阿卡得米亚博物馆(Academia museum)</strong>前排上数个小时的队，只为一睹令人印象深刻的“<strong>大卫</strong>”的风采。这一尊十四英尺高的雕像已经成为文艺复兴时期最完美的一尊人物塑像。“大卫”是<strong>米开朗琪罗</strong>简单而有力地雕刻人物这一能力的典范。</p>
<p>米开朗琪罗的大部分作品都被收藏于<strong>A) 维奇奥宫(Palazzo Vecchio)</strong>中。这座建筑在1299-1322年曾经是<strong>佛罗伦萨政府所在地</strong>。宫殿的房间充满了意大利艺术家们的画作和雕像。米开朗琪罗也来帮忙装饰外观。他在宫墙上雕刻头像，据说是他为了赢下一场赌局，背对墙壁反手雕刻了出了这个头像。</p>
<p>维奇奥宫不远处便是<strong>G) 佛罗伦萨主教堂(Cathedral Square)</strong>。这个<strong>漂亮的圆顶</strong>大教堂，或者叫“上帝之屋”，由当时最出名的设计师之一设计并花费近150年来建造。时至今日，游客依旧会被它的圆顶（教堂最大的(crowning)特点）而震撼。至今在佛罗伦萨没有任何一栋建筑的<strong>高度超过了它</strong>。</p>
<p>短暂的步行穿过狭窄的街道，游客被带到了<strong>B) 乌菲齐美术馆(Pitti Palace)</strong>。这栋建筑修建于1560年且曾被用作机关大楼（“乌菲齐”在意大利语中是办公室的意思）。今天，她依旧被称赞为(boast)一个杰出的艺术品。游客在观光前应穿上舒适的鞋子，因为游览需要耗费数个小时。<strong>波提切利的《春宫》和《维纳斯的诞生》(Botticelli’s Primavera and Birth of Venus)</strong>等一些最著名的作品都被它收藏。</p>
<p>甚至是厌倦了艺术的游客依然不想错过<strong>C) 皮蒂宫(Pitti Palace)</strong>。曾经是佛罗伦萨强大的美策奇家族的家，这座宏伟的宫殿现在内藏三座博物馆。</p>
<p>许多充满无价之宝的房间中的金饰闪闪发光。为了呼吸新鲜空气，漫步于<strong>宫廷花园</strong>中的雕像和喷泉。它们是一些意大利最大的宫廷花园。除了满院的雕塑和喷泉，美策奇一家人在那里实验(experiment with)种植土豆和菠萝。</p>
<p>在令人振奋的皮蒂宫之后，右转游客便来到了佛罗伦萨最有名的室外景观之一——<strong>D) 老桥（蓓琪奥桥, Ponte Vecchio）</strong>。自1593年起，这座连通亚诺河的桥的两边排满了<strong>黄金珠宝店</strong>。那些对买一些现代珠宝感兴趣的人很乐意在此购物。这里工艺品的质量和价格都很高。</p>
<p>想要体验现代佛罗伦萨生活，来参加晚上的散步(promenade)。这种意大利生活的传统从晚上6点人们下班开始。人们漫步(stroll down)于佛罗伦萨中心街道做着最后的消费或与朋友畅聊。一定要从当地最古老的、最棒的<strong>冰淇淋</strong>的发源地 <strong>F) Perche Noi</strong> 前走过。</p>
<p>佛罗伦萨提供了世人许多绝佳的艺术宝藏。它们有些矗立在花园和广场上，有些则陈列在华丽的宫墙上，还有些宝藏就是那些宫殿本身。<strong>对艺术爱好者而言，佛罗伦萨确实是天堂。 </strong></p>
<p><strong>M - 中心思想 B - 太宽泛 N - 太窄</strong></p>
<ol start="8">
<li>米开朗琪罗是佛罗伦萨最棒的艺术家。<strong>N</strong></li>
<li>佛罗伦萨是一个极好的地点。<strong>B</strong></li>
<li>佛罗伦萨是一个艺术爱好者的天堂。<strong>M</strong></li>
</ol>
<h3 id="unit-1-text-3"><a class="markdownIt-Anchor" href="#unit-1-text-3"></a> Unit 1 Text 3</h3>
<p><strong>上帝之声</strong></p>
<p>A) 约翰·艾略特·加德纳(John Eliot Gardiner)在多塞特(Dorset)的自家农场长大，他每天都在楼梯上遇见约翰·塞巴斯蒂安·巴赫(John Sebastian Bach)。<strong>一次特殊的机会，一个来自西里西亚的难民给了嘉丁纳一家一幅作曲家的画像，让他们在第二次世界大战期间保证它的安全。</strong>这幅画由Elias Gottlob Haussmann于1748年创作，也就是巴赫去世前几年。在这位伟大的人物的一生中，这幅画是为数不多的(tiny: 很少的, handful: 少数)几幅经过鉴定的(authenticated)画作之一。年轻时的托恩·艾略特(Tohn Eliot)觉得这有点可怕，但是他还是对这位作曲家终生着迷。现在，约翰爵士(Sir John)，后来已经成为，正在一本新书中阐述(present)他对食神和他的音乐的感想(reflection)。</p>
<p>B) 称为(bill as)约翰·塞巴斯蒂安·巴赫(John Sebastian Bach)的半身雕塑像(portrait)，它也不可避免的是约翰·艾略特·加德纳(John Eliot Gardiner)的半身雕塑像。加德纳后来成为著名的指挥家，也是20世纪70年代开始的“早期音乐”运动的领军人物之一。<strong>作为一名表演者和音乐鉴赏家，约翰爵士从内心感受了很多巴赫的音乐， 它比大多数人能更好地传达巴赫本人站在他的音乐家面前的感受，以及当一个作曲家在创作音乐时脑海中在想什么。</strong></p>
<p>C) 尤其是(more than anything else)，他着迷于(be captivated by)巴赫的声乐(vocal)作品：大合唱，赞美诗，激情和群众。<strong>2000年</strong>是巴赫逝世250周年纪念日，他带着他的蒙特威尔第唱诗班和英国巴洛克独奏家 (Monteverdi Choir and English Baroque Soloist) 进行了一次“巴赫大合唱朝圣(Bach Cantata Pilgrimage)”。在一年的时间里，他们在欧洲和美洲的一些教堂里演奏了<strong>巴赫现存的200首神圣大合唱中的198首。</strong></p>
<p>D) 这本书不是传统意义上的传记——传统意义上的传记已经有很多了，其中一些非常优秀——而是试图通过他的音乐来揭示他。令人惊讶的是，人们对巴赫的个人生活知之甚少。<strong>他饱经忧患</strong>(be acquainted with grief)。他在9岁时成为孤儿(Orphaned)，在13年的婚姻后失去了第一任妻子玛丽亚·芭芭拉(Maria Barbara)。他与妻子所生的七个孩子中，有四个比他先死了。他的第二任妻子安娜·玛格达莱娜(Anna Magdalena)又为他生了13个孩子，但只有6个活到了成年。</p>
<p>E) 在职业方面，巴赫的生活似乎也很艰难。他出生在一个著名的音乐家家庭，<strong>找到第一份工作相对容易。但职业机会有限，</strong>他必须在一个法院任命的职位和教堂管风琴手和音乐家之间选择。每一个都有其缺点。有一段时间，巴赫在两者中犹豫不决（因试图辞去魏玛法院的工作而被短暂监禁是更好的选择），但在1723年，他接受了康托尔的位置，在圣托马斯的路德教会（称作托马斯教堂 Thomaskirche，在莱比锡）负责音乐，直到他1750年去世。</p>
<p>F) 有很多挫折。工资不高；这座城市没有足够的资金为他提供一流的(first-rate)歌唱家和演奏家，这是他复杂的音乐所需要的；人们期望他做很多教学工作；当他试图引进任何过于冒险的东西时，委员会(council)都紧紧地盯着他(breath down his neck)；还有很多音乐上的政治。</p>
<p>G) 但在某种意义上，他是对的。正如他向一位早期雇主解释的那样，他的最终(ultimate)目标是“为了荣耀上帝，创作一曲规范有序的教堂音乐”。作为一个虔诚的新教(Protestant)徒和路德的崇拜者，巴赫有机会做很多他最想做的事情：写出辉煌的(glorious)教堂音乐。他刚到<strong>托马斯教堂</strong>，就开始了一轮(a bout of)热烈兴奋的(furious)大合唱作曲。在三年的大部分时间里，他都在为每周日的教堂礼拜制作一段新的音乐——大约20分钟的音乐。在此期间，他还为每个复活节创作了长篇的《激情 (Passions)》，并创作了其他各种音乐。<strong>这是一个不可持续的(unsustainable)创意爆发，但留下了持久的遗产。</strong></p>
<p>H) 约翰爵士从学术的角度分析了许多大合唱。他还解释了巴赫每一个伟大的《激情》和崇高的《B小调拉丁弥撒 (Latin Mass in B minor)》的组成。他展示了在选择文字时花了多少心思，以及作品的质量是如何始终如一地高。这是当时真正的“新音乐”，与众不同(like no one else’s)的异常复杂和大胆。它对表演者和听众都提出了很高的要求。即使是阅读它也需要集中注意力。你要么必须非常了解这首音乐，要么在阅读文本时听它来理解它。<strong>约翰爵士的书不是给初学者看的，但很值得。</strong></p>
<p>I) 那么巴赫这个人呢？试图在这个固执己见(opinionated)、脾气暴躁(crabby )、经常与他人相反的工作狂(workaholic)的个人品质和他音乐的奇迹(marvel)之间建立直接的联系可能没有多大意义。当被问及他在音乐上成功的秘诀时，他故意(deliberately)含糊其辞(opaque)：“我不得不(be obliged to)勤勉(industrious)；谁也同样勤劳，谁就会同样成功。”</p>
<p>J) 约翰爵士通过仔细检查(scrutinizing)作品得出了更好的答案。他发现了大量迄今为止(hitherto)没出现过的发明和才智(ingenuity)。但最后，他发现这归结为(come down to)一种信仰的行为。其他作曲家，包括蒙特威尔第，贝多芬和莫扎特(Monteverdi, Beethoven and Mozart)，都在不同方面取得了伟大的成就，“但巴赫……他以人类的形式向我们传达了上帝之声。”</p>
<p><strong>段落匹配</strong></p>
<ol>
<li>巴赫经历了许多人生的沧桑，对悲伤并不陌生。<strong>D</strong></li>
<li>正是在托马斯教堂，巴赫全身心投入了音乐创作，给我们留下了宝贵的艺术遗产。<strong>G</strong></li>
<li>嘉丁纳夫妇有一幅约翰·塞巴斯蒂安·巴赫的肖像，是一位难民送给他们的。<strong>A</strong></li>
<li>虽然巴赫找到一份与音乐有关的工作并不难，但他所从事的工作提供了有限的职业机会。<strong>E</strong></li>
<li>约翰爵士关于巴赫的书对初学者来说可能要求很高，但值得花时间。<strong>H</strong></li>
<li>2000年，约翰·艾略特·加德纳(John Eliot Gardiner)和他的同伴们演奏了巴赫大部分现存的大合唱。<strong>C</strong></li>
<li>约翰·艾略特·加德纳从内心深处理解巴赫的音乐，比大多数人都更能表达作曲家巴赫想要表达的音乐。<strong>B</strong></li>
</ol>
<p><strong>F表示事实，O表示观点</strong></p>
<ol start="8">
<li>70岁的约翰·艾略特·加德纳写了一本关于约翰·塞巴斯蒂安·巴赫的书，反思了他的音乐。<strong>F</strong></li>
<li>这位固执己见、脾气暴躁、经常与他人对立的工作狂的个人品质与他的音乐成就之间的直接联系可能没有多大意义。<strong>O</strong></li>
<li>2000年是巴赫逝世250周年。<strong>F</strong></li>
</ol>
<h3 id="unit-1-text-4"><a class="markdownIt-Anchor" href="#unit-1-text-4"></a> Unit 1 Text 4</h3>
<p><strong>The British Museum. 大英博物馆</strong></p>
<p>The British Museum is the biggest in the world; inside, you feel smaller than usual. Notices tell you about a hundred different things to see: clocks which have been telling the time for six hundred years, Roman money, some of the earliest books in the world,Shakespeare’s own writing…<br />
大英博物馆是世界上最大的博物馆；在里面，你会觉得自己比平时更渺小。通告告诉你大约有100种不同的东西值得一看：已经有600年历史的时钟、罗马货币、世界上一些最早的书籍、莎士比亚自己的作品……</p>
<p>The story of the British Museum goes back three hundred years to one unusual man: Sir Hans Sloane, doctor to King George II. The doctor couldn’t stop collecting – books, drawings, money, animals, flowers; things from all over the world. The doctor wanted everything to stay together when he died, so that people could come and look at it. The British Museum started to grow when King George II gave his library. The presenting has never stopped.<br />
大英博物馆的故事可以追溯到(go back to)300年前一个不寻常的人：汉斯·斯隆爵士，乔治二世的医生。医生不停地收集——书籍、图画、钱币、动物、花卉…来自世界各地的东西。医生希望在他死后，所有的东西都能保存在一起，这样人们就能来看看。大英博物馆在乔治二世国王捐赠图书馆后开始发展。捐赠(present)从未停止过。</p>
<p>The first difficulty was finding a home. One idea was Buckingham Palace, but the Palace wasn’t big enough. Finally people found a larger building for the Museum in the middle of London. <strong>To pay for it, they bought tickets at £3 each.</strong><br />
第一个困难是找到一个家。一个想法是建造白金汉宫，但是这座宫殿不够大。最后，人们在伦敦市中心找到了一座更大的博物馆。<strong>为了买下它，参观者需要以每张3英镑的价格买票。</strong></p>
<p><strong>The British Museum opened in 1759, six years after Sir Hans Sloane died.</strong> The doctor wanted people “to enter freely”. But the Museum was afraid of letting everybody in. Assistants with guns stood at the doors. Only “gentlemen” could visit the Museum then and they had to buy tickets. They also had to make two or three journeys to the Museum to ask for the tickets, and then they had to wait weeks or months before it came. Ladies could only come in pairs, and <strong>children were forbidden</strong>! And as the Museum was only open three days a week and only ten people could enter in an hour, there wasn’t much time to see things. Visitors had to run through the rooms!<br />
<strong>大英博物馆于1759年开放，也就是汉斯·斯隆爵士去世六年后。</strong>医生希望人们“自由进入”，但是博物馆不敢让所有人都进去。拿着枪的助理站在门口，只有“绅士”才能参观博物馆，而且他们必须买票。他们还不得不两三次去博物馆索要门票，然后还要等上几周或几个月才能拿到门票。女士们只能成对地进来，<strong>孩子们是禁止进来的</strong>！由于博物馆每周只开放三天，而且一个小时内只能进10个人，所以没多少时间看东西。来访者不得不在房间里跑来跑去(run through)!</p>
<p>By about 1800, things began to get better. Wonderful statues, three thousand years old, arrived from Egypt. There were kings with animals’ heads. There were strange lions with wings and men’s faces. A Scotsman, Lord Elgin, brought back some of the oldest and most beautiful Greek sculptures in the world – girls with vase, horses and riders. When he found them, they had been lying on the ground, broken and forgotten. Lord Elgin saved all the pieces he could get, spending thousands of pounds of his own money. <strong>During the Second World War, the Museum hid the Elgin sculptures in London’s underground railway to keep them safe.</strong><br />
到了大约1800年，情况开始好转。三千年前的奇妙雕像从埃及(Egypt)运来。有长着动物脑袋的国王，有长着翅膀和人的脸的奇怪的狮子。苏格兰人埃尔金勋爵带回了一些世界上最古老、最美丽的希腊雕塑(sculptures)——有着女孩、马匹和骑手的花瓶。当他找到它们时，它们躺在地上，破损不堪，被人遗忘了。埃尔金勋爵把所有能得到的东西都存了起来，花了自己数千英镑。<strong>在第二次世界大战期间，博物馆把埃尔金的雕塑藏在伦敦的地铁里，以确保它们的安全。</strong></p>
<p>More and more people wanted to visit the Museum, George IV gave all his books, too– <strong>though the truth was that he secretly sold them to the Museum for £180,000</strong>! The King’s Library is the most beautiful of the new museum buildings.<br />
越来越多的人想参观博物馆，乔治四世也捐出了他所有的书——<strong>尽管事实是他秘密地以18万英镑的价格将它们卖给了博物馆</strong>!国王图书馆是新博物馆建筑中最漂亮的。</p>
<p>New books as well as old ones arrived at the Museum a hundred years ago, and more people came to read them. The old reading rooms were crowded. The air was bad and readers got terrible headaches. The <strong>librarian, Panizzi</strong>, like Sloane, wanted poor students, as well as rich men, to be able to learn. He got a free copy of every new book for the British Museum. Soon, there were three rows of books on every shelf and hundreds of books on the floor. Something had to happen. <strong>So Panizzi himself designed the famous round Reading Room</strong>, with a beautiful high roof and forty kilometers of bookshelves. Some of the equipment was unusual. Cool air came up through small holes in the tables. Hot air in tubes underneath the floor kept readers’ feet warm. When the new Reading Room opened, there was a party with drinks and a large breakfast on the desks. Everybody said that the new Reading Room was wonderful. Since then, many famous men have written and studied there. And the Library is growing faster and faster: there are four kilometers of new shelves every year!<br />
一百年前，新书和旧书都来到了博物馆，越来越多的人来阅读它们。旧阅览室里挤满了人。空气很糟糕，看书的人头疼得厉害。和斯隆一样，<strong>图书管理员(librarian)潘尼齐希</strong>望穷人和富人都能学习。他为大英博物馆的每一本书都免费赠送了一本复制版。很快，每个书架上都有三排书，地板上有几百本书。一定会有事发生的。因此，<strong>潘尼齐亲自设计了著名的圆形阅览室</strong>，有一个美丽的高屋顶(roof)和40公里长的书架。有些设备很不寻常。冷空气从桌子上的小洞里飘出来，地板下面(underneath)管子里的热空气让读者的脚保持温暖。当新的阅览室开放时，有一个聚会，饮料和桌子上有一大堆早餐。大家都说新阅览室很好。从那时起，许多名人都在那里写作和学习。图书馆发展得越来越快:每年都有4公里的新书架!</p>
<p>A lot of the Museum’s work now is also scientific. New machines can find out how old things are and how to mend them and keep them for the future. And Sir Hans Sloane would be happy to see what the British Museum does for its visitors today. <strong>It is open every day of the year, except for three holidays. </strong>Entrance is free. There are lots of special exhibitions and every day there are different films and talks, some of them for children. Small machines tell you about the Museum as you walk round it, you can look and listen at the same time. So if you are <strong>one of the British Museum’s two million visitors this year</strong>, you have a lot to look forward to. Don’t try to see it all too quickly. There is a life-time of looking in the British Museum.<br />
博物馆现在的许多工作也是科学的。新的机器可以知道东西有多旧，如何修理它们，并为将来保留它们。汉斯·斯隆爵士会很高兴看到大英博物馆今天为它的游客做了什么。<strong>除了三个假期外，全年每天都开放</strong>。进入是免费的。那里有很多特别的展览，每天都有不同的电影和访谈，其中一些是给孩子们的。当你在博物馆周围走动时，小型机器会向你介绍博物馆，你可以同时看和听。所以，如果你是<strong>今年大英博物馆200万游客中的一员</strong>，你会有很多期待。不要试图很快就把它们都看完，大英博物馆的展品值得一生去欣赏。</p>
<p><strong>填空:</strong></p>
<ol>
<li>当大英博物馆首次开放时，每位游客都应该以<strong><u>3英镑</u></strong>的价格购买一张门票来支付建筑费用。 <strong>3 pounds</strong></li>
<li>在第二次世界大战期间，博物馆把埃尔金的雕塑藏在伦敦的<strong><u>地铁</u></strong>里，以确保它们的安全。 <strong>underground railway</strong></li>
<li>著名的圆形阅览室是由大英博物馆的<u><strong>图书管理员</strong></u>潘尼齐设计的。  <strong>librarian</strong></li>
<li>大英博物馆现在每天开放，除了<u><strong>3个节假日</strong></u>。  <strong>three holidays</strong></li>
<li>据估计，今年参观大英博物馆的游客人数将达到<strong><u>200万</u></strong>   <strong>two million</strong></li>
</ol>
<p><strong>判断推断是否正确 C - 正确 F - 错误.</strong></p>
<ol start="6">
<li>国王乔治二世的医生汉斯·斯隆爵士死于1753年。<strong>C</strong></li>
<li>自从博物馆开放以来，它就<strong>一直是</strong>孩子们参观的好地方。<strong>F</strong></li>
<li>乔治四世国王把他所有的书都赠送给了博物馆。<strong>F</strong></li>
</ol>
<h3 id="unit-1-text-5"><a class="markdownIt-Anchor" href="#unit-1-text-5"></a> Unit 1 Text 5</h3>
<p><strong>音乐电影(Musical Film)</strong></p>
<p>A musical film belongs to a film genre that features songs, sung by the actors, interwoven into the narrative. The songs are usually used to advance the plot or develop the film’s characters. <strong>A sub-genre of the <u>musical</u> is the <u>musical comedy</u></strong>, which includes a strong element of humour as well as the usual <strong>music, dancing and storyline.</strong><br />
音乐电影是一种电影类型(genre)，其特点是由演员演唱的歌曲与叙事(narrative)交织(<u>interwove</u>n)在一起。这些歌曲通常用于推进(advance)情节或发展电影中的人物。<strong><u>音乐喜剧</u>是<u>音乐剧</u>(musical)的一个分支(sub-genre)</strong>，它包括了强大的幽默元素以及通常的<strong>音乐、舞蹈和故事情节(storyline)</strong>。</p>
<p>The musical is responsible for the transition from silent film to sound film in the development of the motion picture. The popularity of movies grew rapidly during the golden days of the silent film era, <strong>but the concept of “talking pictures” was considered a risky investment by the major Hollywood studios</strong>, until the Warner Bros. studio took the leap and produced <em>The Jazz Singer</em>, starring Al Jolson. Jolson’s song “My Mammy” in the picture forever changed the medium of film, and it jolted(震动) Hollywood into the era of sound. As Hollywood adapted to sound films, musicals were an important part of Hollywood’s movie output, ranking alongside action movies (Westerns), dramas, and comedies.<br />
在电影(motion picture)的发展过程中，音乐剧是由无声电影向有声电影过渡(transition)的原因(be responsible for)。电影在无声电影时代的黄金时期迅速流行起来，<strong>但“有声电影(talking pictures)”的概念被好莱坞各大电影公司认为是一项风险投资</strong>，直到华纳兄弟电影公司迈出一大步(take the leap)，制作了由艾尔·乔尔森主演(star)的《爵士歌手》。影片(picture)中乔尔森的歌曲《我的妈妈》永远地改变了电影的媒介(medium)，并且它将好莱坞带入了有声时代。随着好莱坞对有声电影的改编(adapt)，音乐剧成为好莱坞电影输出的重要组成部分，与动作片(西部片)、戏剧和喜剧并列(rank alongside)。</p>
<p>Musical stars such as Fred Astaire and Ginger Rogers were among the most popular and highly respected personalities in Hollywood. <strong>Many dramatic actors gladly participated in musicals as a way to break away from their typical typecast roles.</strong> For instance, James Cagney had originally risen to fame on the stage as a singer and dancer, and he was highly talented; but his repeated casting in “tough guy” roles and gangster movies gave him few chances to display these talents. <strong>Cagney’s Oscar-winning role in <em>Yankee Doodle Dandy</em> allowed him to sing and dance, and he considered it to be one of his finest moments.</strong><br />
弗雷德·阿斯泰尔和金格·罗杰斯等音乐明星是好莱坞最受欢迎和最受尊敬的人物(personalities)。<strong>许多戏剧演员乐于参与音乐剧，以此来摆脱他们经典的角色定型(typecast)。</strong>例如，詹姆斯·卡格尼最初以歌手和舞者的身份在舞台上成名，他才华横溢；但他反复出演(cast)“硬汉(tough guy)”角色和黑帮(gangster, 歹徒、恶棍)电影，很少有机会展示自己的才华。<strong>卡格尼在《胜利之歌》（ <em>Yankee Doodle Dandy</em> ）中饰演的获得奥斯卡奖的角色允许他唱歌和跳舞，他认为这是他最辉煌的时刻之一。</strong></p>
<p>Many comedies (and a few dramas) included their own musical numbers. The Marx Brothers’ movies included a musical number in nearly every film, allowing the Marx Brothers themselves to highlight their own musical talents.<br />
许多喜剧(和一些戏剧)都有自己的音乐剧(musical number)。马克思兄弟的电影中几乎每一部电影都有一个音乐剧，这使得马克思兄弟能够突出(highlight)他们自己的音乐天赋。</p>
<p>The musical in film was a natural development from the stage musical. Typically the biggest difference between the movie musical and the musical theater is the use of lavish background scenery which would be impractical in a theater. Many musical films, e.g. <em>Oklahoma!</em> and <strong><em>The Sound of Music</em></strong>, are straight forward adaptations or restagings of <strong>successful stage productions</strong>. Others, e.g. <em>Moulin Rouge!</em>, were specifically written for the screen, and some, <strong>such as <em>Singin’ in the Rain</em>, have made a reverse transition from their original screen version to a successful stage format at a much later date</strong>.<br />
电影中的音乐剧是舞台音乐剧的自然发展。一般来说，音乐电影和剧院中的音乐剧之间最大的区别就是使用了奢华(lavish)的背景布景(scenery)，这在剧院里是不现实的(impractical)。许多音乐电影，例如《俄克拉何马州》和<strong>《音乐之声》</strong>，都是<strong>成功舞台剧</strong>的直接改编或重新上演(restaging)。很久以后(at a much later date)，其他的例如《红磨坊》是专为银幕而写的，<strong>《雨中曲》（ <em>Singin’ in the Rain</em> ）则从最初的银幕版本向后来成功的舞台版本进行了反向转换</strong>。</p>
<p>The trend in modern film-making is not to make a “musical” as such, but to use a lot of background music by popular rock or pop bands in the hopes of selling the soundtrack album to fans. There are exceptions to this rule, and films about actors, dancers or singers have been made as successful modern-style musicals, with the music as an intrinsic part of the storyline. The other exception to the rule is children’s animated movies. These almost always include traditional musical numbers, and some of them, such as <em>Beauty and the Beast</em>, have later become full live stage productions.<br />
现代电影制作的趋势不是制作一部“音乐剧”，而是使用大量流行摇滚或流行乐队作为背景音乐，希望能把原声专辑(soundtrack album)卖给粉丝。这一规则也有例外，关于演员、舞者或歌手的电影也被制作成成功的现代风格音乐剧，音乐成为故事情节中不可或缺(intrinsic, 固有的)的一部分。规则的另一个例外是儿童动画电影。这些几乎总是包括传统的音乐剧，其中一些，如《美女和野兽》，后来成为完整的现场舞台演出。</p>
<p><strong>单项选择</strong></p>
<ol>
<li>音乐电影________。<strong>B</strong><br />
A)是一种<s>无声电影</s><br />
B)<strong>是一个比音乐喜剧更广泛的类别</strong><br />
C)是一种使用大量背景音乐的电影类型<br />
D)属于西方人</li>
<li>为什么有些演员很乐意在音乐电影中扮演一个角色?  <strong>A</strong><br />
A)<strong>音乐电影为他们提供了一个改变重复表演相同部分的机会。</strong><br />
B)音乐电影在当时是成功的保证。<br />
C)他们认为音乐电影可能帮助他们赢得奥斯卡奖。<br />
D)音乐电影是好莱坞电影制作的重要组成部分。</li>
<li>下面哪个是先在银幕上播放，之后才在舞台上表演?  <strong>D</strong><br />
A)《俄克拉何马州》（ <em>Oklahoma!</em> ）<br />
B)《音乐之声》（ <em>The Sound of Music</em> ）<br />
C)《红磨坊》（ <em>Moulin Rouge!</em> ）<br />
D)<strong>《雨中曲》（ <em>Singin’ in the Rain</em> ）</strong></li>
<li>下列哪项不是音乐电影的基本元素?  <strong>A</strong><br />
A)<strong>幽默</strong><br />
B)音乐<br />
C)跳舞<br />
D)的故事情节</li>
<li>下列哪项是不正确的? <strong>D</strong><br />
A)詹姆斯·卡格尼的才能在《胜利之歌》（ <em>Yankee Doodle Dandy</em> ）中得到了最好的展示。<br />
B)《音乐之声》最初是一部舞台音乐剧。<br />
C)一开始，投资有声电影被认为是一种风险。<br />
D)<strong>在音乐电影中，歌曲是由演员演唱的，因为演员在唱歌方面有特殊的才能。</strong></li>
</ol>
<p><strong>C - 接近, O - 相反, D - 不同</strong></p>
<ol start="6">
<li>Jolson’s song “My Mammy” in the picture forever changed the medium of film, and it <u>jolted（震动）</u> Hollywood into the era of sound.<br />
影片(picture)中乔尔森的歌曲《我的妈妈》永远地改变了电影的媒介(medium)，并且它将好莱坞带入了有声时代。<br />
（<strong>C</strong>） a. made … move suddenly  使…突然移动<br />
（<strong>O</strong>） b. prevented … from moving  阻止…移动<br />
（<strong>D</strong>） c. laughed  笑了</li>
<li>Typically the biggest difference between the musical movie and the musical theater is the use of <u>lavish</u> background scenery which would be impractical in a theater.<br />
一般来说，音乐电影和剧院中的音乐剧之间最大的区别就是使用了<u>奢华</u>(lavish)的背景布景(scenery)，这在剧院里是不现实的(impractical)。<br />
（<strong>O</strong>） a. <strong>sparing  节俭</strong><br />
（<strong>D</strong>） b. special  特殊的<br />
（<strong>C</strong>） c. <strong>extravagant  奢侈的</strong></li>
</ol>
<h3 id="unit-2-text-1"><a class="markdownIt-Anchor" href="#unit-2-text-1"></a> Unit 2 Text 1</h3>
<p><strong>睡眠行为</strong></p>
<blockquote>
<p><s>摘自苏大英语在线公众号</s>，已经自己翻译了一遍，在这里吐槽一下原作者的翻译是真的…</p>
</blockquote>
<p>昨晚你睡得好吗？会不会醒来的时候会觉得疲乏(fatigued)慵懒(sluggish)甚至怀疑自己根本没有入睡？睡个好觉不仅仅是爬上床，闭上你的眼睛。了解你自己的睡眠行为并且为安然入睡(a sound sleep)做好准备可以确保你每天晚上睡个好觉。</p>
<p>华盛顿大学护理学院生物行为护理和健康系统睡眠研究员、副教授卡罗·兰蒂斯博士解释道：“睡眠是一种行为，就像所有的行为，人与人之间的差异很大。最大的区别在于(occur in)睡眠时间(the timing of sleep)和睡眠总量(the amount of sleep)，这些因素(factor)对于决定你是否能醒来时觉得精力充沛(rested)是最重要的。”</p>
<p>研究表明，<strong>人们会在昼夜周期中的不同时间会睡得更好。例如，有些人早睡早起会<u>工作</u>(function, <em>vi.</em>)得更好（ <em>即更适合早睡早起，译注</em> ）而有些人晚睡晚起会感到更精力充沛（ <em>即更适合晚睡晚起，译注</em> ）</strong>。兰蒂斯指出，“很多人会不会注意他们的睡眠时间，然而延迟或者改变睡眠时间会对你醒来时的感觉有重大影响(have a major impact on)。”</p>
<p>成年人平均每晚需要的睡眠总量也有差异。有些人睡六个小时就够了，然而有些人会需要长达(up to)每晚九个小时。兰蒂斯指出，<strong>那些遵循有规律的睡眠计划的人更易于(be apt to)在较短的时间内(on fewer hours)<u>工作</u>(function, <em>vi.</em>)得更好</strong>。但她补充道，大多数成年人每晚至少需要六个小时的睡眠。</p>
<p>兰斯蒂强调：“<strong>一个人的睡眠模式不是一成不变的（be set in concrete，<em>直译为“被安置在混凝土中”，意译为一成不变的，译注</em> ）</strong>。逐渐地改变睡眠时间会帮助改变睡眠模式。<strong>一个需要早上早起工作的“夜猫子(evening people)”可以尝试着每隔几天提前三十分钟睡觉。</strong>几个星期后，这种缓慢的调整能够帮助“重置”（身体）内部的生物钟。</p>
<p>除了保持一个有规律的睡眠计划，兰蒂斯给出以下几个养成良好的睡眠保健卫生(hygiene)的小贴士：</p>
<ul>
<li>避免刺激(stimulants)，<strong>包括傍晚或晚上吸烟，食用/饮用含咖啡因的饮料、食物</strong>（<strong>如巧克力</strong>）。</li>
<li>避免在摄入酒精。这会产生反弹(rebounding)效果：导致（仅）睡几个小时就醒来并且打乱睡眠模式。</li>
<li>在睡觉的至少两小时前结束锻炼。<strong>运动会升高体温，使人兴奋(arousing)，更难入睡。</strong></li>
<li>不要在温暖的环境里入睡。体温降低对开始(onset, <em>n.</em>)深度睡眠十分重要。<strong>在恒温房间或使用电热毯的人也许不会睡得那么舒适。</strong></li>
<li>如果有机会，<strong>补觉</strong>(<u>catch up on</u> missed sleep)。繁忙的工作安排或周末活动经常会使我们获得和每晚一样的睡眠时间变得困难。为了减少睡眠不足(sleep debt, <em>debt: 债务</em> )，试着<strong>在白天下午四点前小憩(nap)半小时</strong>或在周末睡个懒觉（当你有机会的时候）。</li>
<li>兰蒂斯指出：“人们可以通过十五分钟至半个小时的小憩来恢复精力，而不是(instead of)在工作间隙喝一杯咖啡。从长期来看(in the long run)，你将感觉更好。”</li>
</ul>
<p><strong>判断对错</strong></p>
<ol>
<li><strong>每个人都需要8小时</strong>睡眠来感到更精力充沛。<strong>F</strong></li>
<li>遵循有规律的睡眠计划将帮助你获得更好的休息。<strong>T</strong></li>
<li>一个凉爽的房间比一个炎热的房间对于舒适的睡眠更好。<strong>T</strong></li>
<li>在<strong>睡觉前喝东西</strong>可以帮助放松、促进睡眠。<strong>F</strong></li>
<li><strong>睡前一杯热巧克力</strong>可以帮助你入睡。<strong>F</strong></li>
<li>在白天下午<strong>五点前</strong>的半个小时的小憩是一个建议的方式来补觉。<strong>F</strong></li>
<li>一个“夜猫子”可以通过比平常早上床睡觉来逐渐地改变他的睡眠模式。<strong>T</strong></li>
</ol>
<p><strong>判断推论是否合理：C——正确，F——错误</strong></p>
<ol>
<li>为了得到最好的休息，你应该早睡早起。<strong>F</strong></li>
<li>为了不让自己犯困，你可以做一些运动。<strong>C</strong></li>
<li>如果某物是 “set in concrete” 的，意思是它可以被轻易地改变。<strong>F</strong></li>
</ol>
<h3 id="unit-2-text-2"><a class="markdownIt-Anchor" href="#unit-2-text-2"></a> Unit 2 Text 2</h3>
<p><strong>我们的梦意味着什么</strong></p>
<p><a href="https://get.holgerbest.top/data/FR_U2_T2.pdf">点击下载全文翻译</a></p>
<h3 id="unit-2-text-3"><a class="markdownIt-Anchor" href="#unit-2-text-3"></a> Unit 2 Text 3</h3>
<p><strong>睡眠的缺乏影响着孩子们的智力</strong></p>
<blockquote>
<p>摘自苏大英语在线公众号</p>
</blockquote>
<p>研究显示(reveal)，多出一个小时的睡眠时间对于一个机智的(alert)和一个反应有点慢的(sluggish)孩子来说出现了差别。</p>
<p>特拉维夫大学心理学教授萨德哈说：“在现实生活中，在家长和孩子之间的日常争论(struggle)中总是围绕着这些小事(narrow margins)：比如多一个小时，额外的电视节目等。”他还说，睡得太少可能会导致在校的表现不佳和很多事故的发生。</p>
<p><strong>为了调查(investigate)多或者少(subtracting)一个小时的睡眠对于孩子们的影响，萨德哈在一周之内的五天对77个四年级和六年级的学生调整了睡眠时间，</strong>这些学生都很<strong><u>健康</u></strong>并且没有什么特殊的社交活动或是校园活动。</p>
<p>萨德哈和他的同事们发现多一个小时的睡眠会有很大的不同。萨德哈在三月/四月出版的《儿童发展杂志》上报道，<strong>那些睡得时间久的孩子们</strong>，即使<strong>他们会在夜里醒来的更频繁</strong>(frequently)，但是他们在反应(reaction)测试中得到了更高的分数(scored higher)。</p>
<p>萨德哈说：“当孩子们睡的时间久了一点他们的睡眠质量(quality)就有一点受损(impaired)——睡眠更碎片化，他们醒来地更频繁了——但是除了(in spite of)这个他们的表现更好了，因为额外的睡眠是比睡眠质量的受损(reduction)更有意义的(significant)。”</p>
<p>先前的睡眠缺乏(deprivation)研究注重于极端的、短期的(short-term periods)、不充分的(inadequate)睡眠，而且多半是针对成人的，他说，增加一些新的发现是很重要的，因为其他的研究已经显示儿童比几十年前的睡得更少了。这个和以前的研究都<strong>不能肯定的是对于孩子来说睡眠缺乏是否影响到成年时期(adulthood)的发育</strong>，即使一些可能的影响已经被假定(hypothesize)了，他说。</p>
<p>“一些研究表明有<strong>睡眠障碍</strong>(sleep-disturbed)的婴幼儿(infants)当他们<strong>长大后很可能会发展为注意力缺陷多动障碍</strong>（<strong><u>attention</u></strong> deficit hyperactivity disorder, A. D. H. D.）”，萨德哈说。</p>
<p>在早期的研究中，萨德哈的团队发现四年级的孩子平均睡眠时间为8.2个小时，而六年级的为7.7个小时。</p>
<p>贝塞斯达国家睡眠障碍研究中心主任卡尔·杭特说道，先前的研究已经显示了<strong>小学生一晚经常(on a regular basis)需要至少九个小时的睡眠</strong>。他说，<strong>初中生和高中生需要的时间少一点</strong>，增长的睡眠不充足(insufficient)的后果(consequence)可能会很严重。</p>
<p>杭特说：“<strong>一个疲惫的孩子就是事故等待着在发生</strong>。并且随着孩子们长大，玩具变得更大，危险也更大。”杭特哈同时指出了过少的睡眠可能会导致(result in)学习和记忆的问题和<strong>长期的在学校的表现中的影响</strong>。</p>
<p>杭特对于萨德哈的研究说，“这是一个关于我们已经了解到的东西的重要扩展，<strong>对于好的健康来说，增加睡眠和营养、锻炼一样重要</strong>。”为了将其转化为应用，杭特说，<strong>父母应该确保知道他们孩子真的去睡觉了以及他们的屋子是<u>有益于(conducive)</u>睡眠而不是玩耍的</strong>。</p>
<p>一致的(consistent)就寝时间和在傍晚直到当他们去睡觉<strong>限制儿童的咖啡因摄入</strong>也可以提高儿童的睡眠质量，杭特说。</p>
<p><strong>填空（一个单词）</strong></p>
<ol>
<li>为了调查一个小时的睡眠对于孩子们的作用，萨德哈在五天内对77个<strong><u>健康的(healthy)</u></strong>学生调整了睡眠时间.</li>
<li>对于孩子来说睡眠缺乏是否影响到成年时期的发育是不确定的，但是有人认为他们成年后可能会导致注意力缺陷多动障碍（<strong><u>attention</u></strong> deficit hyperactivity disorder)。</li>
<li>萨德哈的研究证明了，对于好的健康来说，增加睡眠和<strong><u>营养(nutrition)</u> </strong>、锻炼一样重要。</li>
<li>根据杭特，父母有责任安排<strong><u>有助于(conductive)</u></strong>睡眠的房间。</li>
</ol>
<p><strong>根据文章，我们可以对睡眠了解到什么？选择五项答案</strong> <strong>CDEFH</strong></p>
<p>A) 十岁的儿童睡得<strong>更多</strong>。<em>更少</em><br />
B) 儿童时期睡眠<strong>较少</strong>影响到成年时期的发育。<em>更多</em><br />
C) 小学的孩子比中学和高中的孩子需要更多的睡眠。<br />
D) 睡眠充足的孩子发生事故的风险较低。<br />
E) 父母应该确保他们的孩子在睡觉前吃正确的东西。<br />
F) 额外的睡眠可以提高孩子们在学校的表现。<br />
G) <strong>睡眠中断</strong>的婴幼儿长大后会变得多动。<em>睡眠障碍</em><br />
H) 睡得越久的孩子晚上醒来得越频繁。</p>
<h3 id="unit-2-text-4"><a class="markdownIt-Anchor" href="#unit-2-text-4"></a> Unit 2 Text 4</h3>
<p><strong>睡个好觉（A Good Night’s Sleep）</strong></p>
<p>1 There’s nothing quite like the refreshment of a good night’s sleep; conversely there is much misery which comes from a restless night. The whole of the next day can be disturbed by a bad night, as the poor sleepless one drags himself or herself through the day, snapping at friends and colleagues alike. Hopefully the problem can be solved quickly so the next night is not so bad, <strong>because bad sleeping habits may lead to serious problems.</strong><br />
1 没有什么能像一个好觉一样使人精神爽快；相反，一个不眠之夜会带来很多痛苦(misery)。一个糟糕的夜晚可能会影响整个第二天，因为可怜的失眠者会拖着自己度过这一天，对朋友和同事发火(snap at)。希望这个问题能很快解决，这样第二天晚上就不会那么糟糕了，<strong>因为不良的睡眠习惯可能会导致严重的问题。</strong></p>
<p>2 Why do we have bad nights? In some cases it is because of some traumatic event or emotional upset which deprives us of sleep. A good example would be if we are waiting for someone who is late coming home, or we are anticipating a serious examination, or are worried about some event which will occur the next day. The event may equally be something we are looking forward to, like a party or a celebration, so we cannot get to sleep for thinking about it. These bad nights are limited by the <strong>temporary nature</strong> of the events which cause them.<br />
2 为什么我们会有糟糕的夜晚?在某些情况下，是由于一些创伤(traumatic: （心理）创伤的；（生理）外伤的)事件或情绪上的不安剥夺了我们的睡眠。一个很好的例子是，如果我们在等待很晚回家的人，或者我们正在准备一个庄重的考试，或者担心第二天会发生的一些事情。同样，事件也可能是我们期待的东西，比如聚会或庆典，所以我们想着这些事而不能睡觉。这些糟糕的夜晚受限于导致它们的事件的<strong>暂时性</strong>。</p>
<p>3 <strong>Anxiety</strong> is a great thief of sleep, and may settle into a pattern where the sufferer gets to bed and to sleep only to awaken in the early hours of the morning. This sort of chronic pattern may go on for a long time, and is a serious health issue. Opinions differ on the best way to handle this sort of sleep deprivation: the early morning is probably no time to try to resolve the issue which is causing the concern. The immediate solution at 2 a.m. may be to get up and move around a little and then return to bed, ready to sleep. This method is advocated by people who have running nightmares about their problems if they just try to lie in bed and go back to sleep.<br />
3 <strong>焦虑</strong>是睡眠的小偷，并且可能会习惯于一种患者上床睡觉后只在早晨很早的时候就醒来的模式。这种慢性(chronic)模式可能会持续很长时间，是一个严重的健康问题。关于如何处理这种睡眠剥夺(deprivation)的最佳方法，人们意见不一：清晨可能不是解决这个引起了关注的问题的时间。在凌晨2点，立刻的解决办法可能是起床，稍微活动活动，然后回到床上，准备睡觉。这种方法是由那些如果只是试图躺在床上睡觉就做噩梦的人提倡的(advocated)，。</p>
<p>4 People may lose sleep because they are in <strong>greater or lesser degrees of pain</strong>. Here the problem becomes medical, and is beyond the scope of this article. <u>Suffice it to say that</u> a whole array of medicine is out there, and should be administered by experts.<br />
4 人们可能会<strong>因为疼痛的程度而失眠</strong>。在这里，问题变成了医学问题，超出了本文的范围。我只想说(Suffice it to say that: 只要说…就够了)，有各种各样的药物，并且这些药物应该由专家来管理(administered)。</p>
<p>5 People may find it hard to sleep because they are too hot or too cold. In hot, airless conditions even <strong>a standard fan</strong> will help immensely, and if there is a ceiling fan it should be set to move the air gently. Many people prefer to sleep with a window open to allow plenty of fresh air into the room, although in some places the fresh air may be accompanied by noise and mosquitoes.<br />
5 人们可能因为太热或太冷而难以入睡。在炎热、没有空气的条件下，即使是<strong>一个标准的风扇</strong>也会有很大的帮助，如果有一个吊扇(ceiling fan)，它应该设定为轻柔地转动。许多人喜欢开着窗户睡觉，以便让大量的新鲜空气进入房间，尽管在一些地方，新鲜空气可能伴随着噪音和蚊子(mosquitoes)。</p>
<p>6 The topic of bedding is often neglected. Bed clothes should be light and clean, and in summer they should be minimal. <strong>In winter</strong> people can resort to heavier blankets or the <u>self-indulgence</u>(自我放纵) of electric blankets, best used to heat the bed before anyone gets into it and then turned off. It is quite easy to over-estimate the number of blankets needed in winter, and many people make themselves too hot, kick the bedclothes off, and then wake up cold.<br />
6 床上用品的话题经常被忽视。床上衣物应该轻便、干净，在夏天应该最少。<strong>在冬天</strong>，人们可以使用更厚的毛毯或将自己沉醉于电热毯中，电热毯最好是在人们上床之前加热，然后关掉。人们很容易高估冬天所需要的毯子的数量，许多人把自己弄得太热，把被褥踢掉，然后醒来时却很冷。</p>
<p>7 Finally, one must consider the part habit plays in our lives, and our sleep. People often claim they cannot sleep in a strange bed. When we settle down for the night a powerful part of us demands to feel <strong>secure</strong>, and to know that nothing has changed since the last time we slept. Lead me to my bed!<br />
7 最后，我们必须考虑到习惯在我们的生活和睡眠中所起的作用。人们经常说他们睡不着陌生的床。当我们静下心来睡觉的时候，我们身上的一部分强烈地想要<strong>安全感</strong>，要知道从我们最后一次睡觉到现在什么都没有改变。领我到床上去!</p>
<p><strong>为段落选择小标题</strong></p>
<p>A) Sleeplessness and <strong>discomfort</strong>  失眠和<strong>不适</strong><br />
B) How sleep habits have changed  睡眠习惯是如何改变的<br />
C) Long-term <strong>anxiety</strong>  长期<strong>焦虑</strong><br />
D) Staying <strong>cool</strong> in summer  在夏天保持<strong>凉爽</strong><br />
E) Sleep and <strong>security</strong>  睡眠和<strong>安全感</strong><br />
F) Comparisons between good and bad sleep  好睡眠和坏睡眠的比较<br />
G) The <strong>importance</strong> of sleep  睡眠的<strong>重要性</strong><br />
H) The correct temperature for <strong>winter</strong>  <strong>冬天</strong>的正确温度<br />
I) <strong>Temporary</strong> problems  <strong>临时</strong>问题<br />
J) The full moon  满月</p>
<table>
<thead>
<tr>
<th style="text-align:right">段落</th>
<th style="text-align:left">答案</th>
<th style="text-align:right">段落</th>
<th style="text-align:left">答案</th>
<th style="text-align:right">段落</th>
<th style="text-align:left">答案</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:left"><strong>G</strong></td>
<td style="text-align:right">2</td>
<td style="text-align:left"><strong>I</strong></td>
<td style="text-align:right">3</td>
<td style="text-align:left"><strong>C</strong></td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:left"><strong>A</strong></td>
<td style="text-align:right">5</td>
<td style="text-align:left"><strong>D</strong></td>
<td style="text-align:right">6</td>
<td style="text-align:left"><strong>H</strong></td>
</tr>
<tr>
<td style="text-align:right">7</td>
<td style="text-align:left"><strong>E</strong></td>
<td style="text-align:right"></td>
<td style="text-align:left"></td>
<td style="text-align:right"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p><strong>M - 中心思想 B - 太宽泛 N - 太窄</strong></p>
<ol start="8">
<li>Mental and physical <strong>pain</strong> makes it difficult for people to sleep. <strong>N</strong><br />
精神和身体上的<strong>疼痛</strong>使人们难以入睡。</li>
<li>Several <strong>suggestions</strong> are given to help readers avoid problems at night. <strong>B</strong><br />
本文给出了一些<strong>建议</strong>，以帮助读者避免夜间出现问题。</li>
<li>A good night’s sleep is very important and bad nights are caused by various factors. <strong>M</strong><br />
一个好的夜晚睡眠是非常重要的，糟糕的夜晚是由各种因素造成的。</li>
</ol>
<h3 id="unit-2-text-5"><a class="markdownIt-Anchor" href="#unit-2-text-5"></a> Unit 2 Text 5</h3>
<p><strong>美梦：少睡，长寿 (Sweet Dream: Sleep Less, Live Longer)</strong></p>
<p>A) Contrary to popular belief, people <strong>who sleep six to seven hours a night live longer</strong>, and those who sleep eight hours or more die younger, according to the latest study ever conducted on the subject. The study, which tracked the sleeping habits of 1.1 million Americans <strong>for six years</strong>, undermines the advice of many sleep doctors who have long recommended that people get eight or nine hours of sleep every night.</p>
<p>A) 与人们的普遍观念恰恰相反，就睡眠所做的最新研究发现，<strong>每晚睡6 - 7个小时的人活得更久</strong>，睡8个小时或更长时间的人会更年轻死亡。这项对110万美国人的睡眠习惯进行了<strong>为期6年</strong>跟踪(track)调查的研究削弱(undermine)了许多睡眠医生长期以来建议人们每晚要睡8到9个小时的说法。</p>
<p>B) “There’s an old idea that people should sleep eight hours a night, which has no more scientific basis than the gold at the end of the rainbow,” said Daniel Kripke, a professor of psychiatry at the University of California at San Diego who led the study, published in a recent issue of the Archives of General Psychiatry. “That’s an old wives’ tale.”</p>
<p>B) 加州大学精神病学教授丹尼尔·克里普克在圣地亚哥主持了这项研究，并发表在最近一期的《普通精神病学文献》中。他说道：“旧的观点认为人们每晚应该睡8个小时，但这个观点就像彩虹末端的金色一样毫无科学依据(scientific basis)，那是无稽之谈。”</p>
<p>C) The study was not designed to answer why sleeping longer may be deleterious or whether people could extend their life span by sleeping less.<br />
But Kripke said it was possible that people who slept longer tended to suffer from sleep apnea, a condition where impaired breathing puts stress on the heart and brain. He also speculated that <strong>the need for sleep was akin to food, where getting less than people want may be better for them</strong>. The study quickly provoked cautions and criticism, with some sleep experts saying that the main problem in America’s sleep habits was deprivation, not sleeping too much.</p>
<p>C) 这项研究不是为了回答为什么睡得多可能是有害的(deleterious)，也不是为了回答人们能否通过减少睡眠来延长寿命。<br />
但克里普克说这有可能是因为睡得多的人就容易遭受睡眠呼吸暂停(sleep apnea)，这是一种受损的呼吸带给心脏和大脑压力的状况。他还推测，<strong>人们对睡眠的需求类似于(be akin to)对食物的需求，人们的睡眠量比需求量少一点可能对身体更好</strong>。这项研究很快激起(provoke)了告诫和批评，一些睡眠专家说，美国人睡眠习惯的主要问题是人们缺乏(deprivation)，而不是睡得太多。</p>
<p>D) “None of this says sleep kills people,”said Daniel Buysse, a University of Pittsburgh psychiatrist and the immediate past president of the American Academy of Sleep Medicine.<br />
“You should <strong>sleep as much as you need to feel awake, alert and attentive the next day</strong>,” Buysse added. “I’m much more concerned about people short-changing themselves on sleep than people sleeping too long.”</p>
<p>D) 美国睡眠医学学会前主席，匹兹堡大学精神病学家丹尼尔·布斯说：“这并不是说睡眠导致死亡。”<br />
布斯补充道：“你的<strong>睡眠要足够使你第二天保持清醒、警觉和专心致志(attentive)</strong>。我更担心的是人们减少自己的睡眠时间，而不是他们睡得太多。”</p>
<p>E) Sleeplessness produces a variety of health consequences that were not measured in the study, critics said.<br />
“The amount of sleep you get impacts how alert you are, your risk for accidents, how you perform at work and school,” said James Walsh, president of the National Sleep Foundation, a non-profit that advocates for better sleep habits. “<strong>There’s much more to life than how long you live</strong>.”</p>
<p>E) 批评者们说，这项研究没有考虑失眠(Sleeplessness)对人们健康所造成的种种后果。<br />
国家睡眠基金会（一家致力于提倡改善睡眠习惯的非赢利机构）主席詹姆斯·沃尔什说，“睡眠时间的长短会影响你的警觉程度、出事故的可能性和工作和学习表现。<strong>生命的意义远不止寿命的长短</strong>。”</p>
<p>F) The study used data from an extensive survey conducted by the American Cancer Society from 1982 to 1988. Women sleeping 8, 9 and 10 hours a night had 13 percent, 23 percent and 41 percent higher risk of dying, respectively, than those who slept 7 hours, the study found. Men sleeping 8, 9 and 10 hours a night had 12 percent, 17 percent and 34 percent greater risk of dying within the study period.</p>
<p>F) 这项研究使用了美国癌症协会从1982年到1988年进行的一项广泛的调查的数据。该研究发现，每晚睡8、9和10个小时的女性与睡7小时的女性相比，死亡率分别上升了13%、23%和41%。在此研究中，每晚睡8、9和10个小时的男性死亡率则分别上升了12%、17%和34%。</p>
<p>G) By contrast, <strong>sleeping five hours</strong> a night increased the risk for women by only 5 percent, and for men, by 11 percent. Among people who slept just three hours a night, women had a 33 percent increase in death, and men had a 19 percent increase, compared with those who slept seven hours.<br />
Kripke, the new study’s leader, pointed out that relatively few people slept so little – 1 in 1,000 – whereas almost half of all people slept eight hours or more.</p>
<p>G) 相比之下，<strong>每晚睡5个小时</strong>的女性患病风险仅增加了5%，男性增加了11%。在每晚仅睡3小时的人群中，与睡7小时的人相比，女性死亡率上升33%，男性上升19%。<br />
领导此项新的研究的克里普克指出：相对而言，睡这么少的人比较少——千分之一而已，而近乎有一半的人要睡8个小时甚至更多。</p>
<p>H) The study also found that taking a sleeping pill every day increased the risk of death by 25 percent.<br />
“It appears there is no mortality risk to having insomnia,” Kripke said.<br />
He recommended that people should not routinely take pills to get eight hours of sleep. While acknowledging that the sleeping pills used from 1982 to 1988 were not the same pills being used today, Kripke said, “without data showing that contemporary pills are safe, these data provide the best information about whether sleeping pills are safe for long-term use.”</p>
<p>H) 研究还发现，每天服用一粒安眠药会使死亡风险增加25%。<br />
克里普克说：“似乎失眠(insomnia)没有死亡(mortality)风险。”<br />
他建议人们不要为了达到8小时的睡眠而经常(routinely)服用安眠药。尽管克里普克承认1982年到1988年期间使用的安眠药和现在的安眠药不一样了，但他说：“如果没有数据表明现在的(contemporary)安眠药是安全的，这些数据就能提供最好的信息，说明安眠药长期使用是否安全。”</p>
<p>I) Kripke, whose study was funded by federal tax dollars, said doctors’ recommendations that <strong>everyone get eight hours of sleep a night may have been partly influenced by the drug companies that make sleeping pills.</strong> He cited a report from a public relations firm representing the medicine Ambien, which gave money to the National Sleep Foundation to alert people about an insomnia “public health crisis” as part of a marketing campaign.</p>
<p>I) 研究由联邦税款资助的克里普克说，医生们建议每人每晚睡8小时，<strong>这在一定程度上可能是受到了生产安眠药的药物公司的影响</strong>。他引用了一家公共关系公司撰写的关于安必恩药物的报告作为例子。该报告指出药物安必恩资助了国家睡眠基金会，以警告人们失眠问题是一场“公共健康危机”，而这其实是营销活动(marketing campaign)的一部分。</p>
<p>J) Both Buysse and Walsh have served as paid consultants to makers of sleeping pills, but both denied being influenced by that role. Walsh said most researchers in the field had accepted consulting fees from the companies, because 99 percent of the funding to support this type of research is from pharmaceutical companies.</p>
<p>J) 布斯和沃尔什都曾担任安眠药生产公司的付费顾问(paid consultants)，但两人都否认受到了这个职位的影响。沃尔什说这个领域的大多数研究人员都接受公司向他们支付的咨询费(consulting fees)，因为这类研究经费有99%是制药(pharmaceutical)公司资助的。</p>
<p>K) Buysse, who wrote an editorial accompanying Kripke’s article, said more research was needed to pin down exactly what the connection was between sleep and the risk of death. The study relied on people’s own reports of their sleeping habits, which can be faulty. When people are asked how long they sleep, they usually report how long they spend in bed, Buysse said.<br />
<strong>That could mean that people who reported sleeping eight hours were really sleeping around seven and a half hours</strong>, which would bring them into the study’s lower risk category. Buysse also disagreed that sleep was like food, arguing that while people can restrict sleep, they cannot “choose” to sleep longer.</p>
<p>K) 布斯随同(accompanying)沃尔什的文章撰写了一篇社论(editorial)，他说需要更多的研究来确定(pin down)睡眠和死亡风险之间的确切联系。这项研究依赖于人们自己报告的睡眠习惯，这可能会出错。布斯说，当人们被问及他们睡多长时间时，他们通常会报告他们在床上花多长时间。<br />
<strong>这可能意味着那些报告睡8小时的人实际上睡了7.5个小时左右</strong>，这将把他们带入该研究的低风险类别。布斯也不同意睡眠如食物的观点，他强调虽然人们可以抵制睡眠，但他们无法“选择”睡得更久。</p>
<p>L) Donald Bliwise, a psychologist at Emory University, in Atlanta, said studies had shown that when people were allowed to sleep however long they wanted, without cues from alarm clocks and watches, they often slept 14 to 15 hours a day for the first few days.<br />
“Everyone,” Bliwise said, “walks around somewhat sleep-deprived.”</p>
<p>L)亚特兰大埃默里大学心理学家唐纳德·布利怀斯说，已有研究表明，当让人们随心所欲地去睡，不受闹钟和手表提示的时候，他们通常在最初几天里每天会睡14到15个小时。<br />
布斯说:“每个人在一定程度上都没有睡好。”</p>
<p><strong>段落匹配</strong></p>
<ol>
<li>The advocates of eight hours of sleep may <strong>be motivated by a marketing campaign to promote the selling of sleeping pills.</strong>  <strong>I</strong><br />
8小时睡眠的提倡者(advocate)可能是受到一场<strong>推销安眠药的营销活动的激励</strong>。</li>
<li>The causality between sleep and the risk of death is hard to figure out due to the lack of the <strong>solid data</strong>. <strong>K</strong><br />
由于缺乏<strong>可靠的数据</strong>，睡眠和死亡风险之间的因果关系很难弄清楚。</li>
<li>Research has showed that <strong>sleeping less than five hours</strong> a day increases the risk of dying.  <strong>G</strong><br />
研究表明，<strong>每天睡眠不足5小时</strong>会增加死亡风险。</li>
<li>One theory says that people might as well sleep less than they need just as they had better <strong>eat less than they want</strong>.  <strong>C</strong><br />
有一种理论认为，人们不妨睡得比需要的少，就像他们最好吃得<strong>比想吃的少</strong>一样。</li>
<li>A scholar maintains that to <strong>live longer is less important than to have a better life</strong>.  <strong>E</strong><br />
一位学者坚持认为，<strong>活得久不如活得好</strong>重要。</li>
<li>The study whose result shows that the optimal sleeping time is <strong>six to seven hours lasts for six years</strong>.  <strong>A</strong><br />
这项研究的结果表明，最佳睡眠时间是<strong>6到7个小时</strong>，这种情况可以<strong>持续6年</strong>。</li>
<li>It is considered reasonable to <strong>sleep as long as one wants to</strong> in order to be in condition.  <strong>D</strong><br />
为了保持健康，一个人<strong>想睡多久就睡多久</strong>被认为是合理的。</li>
</ol>
<p><strong>F表示事实，O表示观点</strong></p>
<ol start="8">
<li>
<p>It appears there is no mortality risk to having insomnia. <strong>O</strong><br />
似乎失眠(insomnia)没有死亡(mortality)风险。</p>
</li>
<li>
<p>He <strong>recommended</strong> that people should not routinely take pills to get eight hours of sleep.  <strong>O</strong><br />
他<strong>建议</strong>人们不要为了达到8小时的睡眠而经常服用安眠药。</p>
</li>
<li>
<p>Both Buysse and Walsh have served as paid consultants to makers of sleeping pills.  <strong>F</strong><br />
布斯和沃尔什都曾担任安眠药生产商的顾问，报酬优厚。</p>
</li>
<li>
<p>【快速阅读中没有，在配套数字资源中出现】Contrary to popular belief, people who sleep six to seven hours a night live longer, and those who sleep eight hours or more die younger, according to the latest study ever conducted on the subject.  <strong>O</strong><br />
与人们的普遍观念恰恰相反，就睡眠所做的最新研究就发现每晚睡6至7个小时的人要比睡8个小时或更长时间的人寿命长。</p>
<blockquote>
<p>TIP: This is the conclusion of the latest study conducted on the subject of sleeping, and obviously it is based on personal opinion. 这是一项关于睡眠的最新研究得出的结论，显然这是基于个人观点。</p>
</blockquote>
</li>
</ol>
<h3 id="unit-3-text-1"><a class="markdownIt-Anchor" href="#unit-3-text-1"></a> Unit 3 Text 1</h3>
<p><STRONG>What are genetically modified（GM）food 什么是转基因食品</STRONG></p>
<p>人类从对食物到对狗一类的小动物的基因改良已经经历了好几个世纪。但是在过去，选择性培养是唯一的办法。比如：如果你想去创造某一种类的谷物，用某一种真菌去反抗，你从种植的谷类植物小样上去下种子，并观察它们如何与真菌进行反抗、发展。在这个问题上，经过这些年的实验，人类已经创造了一批对真菌有强抵抗力的的谷类植物。</p>
<p>利用选择性的培养技术，人类已经培养了很多东西，从多色玫瑰到巨型南瓜，到一年两熟还对病害有强抵抗力的一批谷物。同样的方式，你可以抓几只鸡，分析它们的蛋，找出谁的蛋含有的更少的胆固醇。之后，你能饲养它们生产一批的低胆固醇鸡。你可以选择任何可发觉的特性，选择性的培养一批在某些方面拥有特性的特殊种类群。</p>
<p>现在基因工程的技术已经允许科学家们在植物或动物的明确的插入某一基因，直接省去了选择性培养的反复的实验。现在的基因技术，你还可以方面的进行种类的杂交。(比如；可以种植出生产胰岛素的植物)。先进的技术十分的标准化，基因也可以方便的进行杂交。</p>
<p>现在有一种技术，被用来改良植物和动物的基因。比如：这儿有一种广泛运用的除草剂叫做Roundup，是由Monsanto生产的。Roundup可以杀死任何它所接触到的植物。M发展改良了一批豌豆和另一些谷类植物叫Roundup Ready（RR），让他们对Roundup有抵抗功能，完全不受影响。通过培养RR的种子，一个农民能控制性的在这一批谷物种子上喷上RR。这些谷物种子完全忽略了除草剂，而杂草都被消灭光了。RR种子减少了生产中的损失并且增加了收成量，因此食物变得更加便宜了。另外一些科学家在植物中植入了天然杀虫剂的基因为了抵抗来自谷类害虫的损害，一种抗真菌的基因也可被良好的植入。时代在发展，任何都有发展的可能性。</p>
<h3 id="unit-3-text-2"><a class="markdownIt-Anchor" href="#unit-3-text-2"></a> Unit 3 Text 2</h3>
<p><STRONG>Feeding the world —— Facts versus fiction （喂养世界 - 现实 vs 理想）</STRONG></p>
<p>Most hungry people live in countries that have food surpluses rather than deficits. According to the UN Food and Agriculture Organization (FAO), we are already producing one and a half times the amount of food needed to provide everyone in the world with an adequate and nutritious diet, yet one in seven people is suffering from hunger.</p>
<p>大多数饥饿人口生活在粮食过剩而非短缺的国家。根据联合国粮食及农业组织(FAO)的数据，我们生产的粮食已经是为世界上每个人提供充足和营养饮食所需的1.5倍，然而七分之一的人仍在挨饿。</p>
<p>Rather than growing food to meet the needs of local communities for a healthy，diverse diet，industrial agriculture produces crops to sell on world markets. While world crop production has tripled since the 1950s,more people go hungry now than 20 years ago. Small family farmers are driven off their land and local people cannot afford to buy what is grown. Too often, the result is a downward spiral of environmental destruction, poverty and hunger.</p>
<p>工业化农业生产的作物在世界市场上销售，而不是种植粮食来满足当地社区对健康、多样化饮食的需要。尽管世界粮食产量自20世纪50年代以来增长了两倍，但与20年前相比，现在挨饿的人更多。小家庭农民被赶出了他们的土地，当地人也买不起种植的作物。其结果往往是环境破坏、贫困和饥饿的恶性循环。</p>
<p>Food security will not be achieved by technical fixes，like genetic engineering (GE). People who need to eat need access to land on which to grow food or money with which to buy food. Technological “solutions” like GE mask the real social, political，economic and environmental problems responsible for hunger.</p>
<p>粮食安全无法通过基因工程(GE)等技术手段来解决。需要吃东西的人需要获得种植食物的土地或购买食物的钱。像通用电气这样的技术“解决方案”掩盖了导致饥饿的真正社会、政治、经济和环境问题。</p>
<p>The case of Argentina, the number two producer of GE crops in the world and the only developing country growing GE food crops on a large commercial scale, shows that GE does not lead to an increase in food security. Millions of tons of GE soya are exported every year from Argentina for cattle feed, while millions of Argentineans go hungry.</p>
<p>阿根廷是世界上第二大转基因作物生产国，也是唯一一个大规模商业化种植转基因粮食作物的发展中国家。阿根廷的情况表明，转基因不会导致粮食安全的增加。阿根廷每年出口数百万吨转基因大豆作为牛饲料，而数百万阿根廷人却在挨饿。</p>
<p>Hunger and malnutrition are a direct result of a lack of access to，or exclusion from, productive resources, such as land, the forests, the seas, water, seeds，technology and credit. Seventy-five percent of the world’s hungry people are politically marginalized ones who live in rural areas. An example of the grossly unequal distribution of land that directly contributes to hunger: in Latin America,80 percent of agricultural land is in the hands of 20 percent ofthe farmers; the other 20 percent of the land is in the hands of the remaining80 percent.</p>
<p>饥饿和营养不良是无法获得或被排斥在土地、森林、海洋、水、种子、技术和信贷等生产性资源之外的直接结果。世界上75%的饥饿人口生活在农村地区，在政治上处于边缘地位。土地分配严重不平等直接导致饥饿的一个例子是:在拉丁美洲，80%的农业土地掌握在20%的农民手中;其余20%的土地在剩下的80%的人手中。</p>
<p>The current agricultural trade regime puts the South in an impossible situation. The Organization for Economic Co-operation and Development (OECD) annual state subsidies of their national agricultural sectors exceed Sub-Saharan Africa’s entire Gross Domestic Product. Subsidized exports, artificially low prices and WTO legalized dumping by the rich countries characterize the current unfair model of agricultural trade faced by poor countries.</p>
<p>目前的农业贸易制度使南方处于一种不可能的境地。经济合作与发展组织(OECD)对其国家农业部门的年度国家补贴超过了撒哈拉以南非洲地区的全部国内生产总值。富国的补贴出口、人为压低价格和WTO允许的倾销是目前穷国面临的不公平农业贸易模式的特征。</p>
<p>Research often neglects the development of agricultural techniques that reduce the inputs needed and that are easy to control. Agricultural research at international and national levels is highly orientated towards industrial agriculture.</p>
<p>研究往往忽视了减少所需投入和易于控制的农业技术的发展。国际和国家一级的农业研究高度面向工业化农业。</p>
<p>GE crops have delivered record agricultural exports but the environmental and social price is both unacceptable and unsustainable. Livelihoods have been destroyed, hunger has increased and the environment is being badly damaged.</p>
<p>转基因作物带来了创纪录的农业出口，但其环境和社会代价既不可接受，也不可持续。生计遭到破坏，饥饿增加，环境遭到严重破坏。</p>
<h3 id="unit-3-text-3"><a class="markdownIt-Anchor" href="#unit-3-text-3"></a> Unit 3 Text 3</h3>
<p><STRONG>GE Agriculture and Genetic Pollution （农业基因工程和基因污染）</STRONG></p>
<p>A 对转基因生物程的介绍,我们的环境是一个复杂的生态系统,这其中有危险的全球性的实验,也伴随着自然与进化。基因科学家改变了它们的本质。转基因工程的产物是一些需要存活的生物，却没有自然的进化与自然的栖息地。人类可以通过自然的生物进行复制或者跨品种产生新的生物，从而在一个新的环境和一个未知的未来中，不可以预测不可控制的发展。我们几乎不知道这些新的生物会在环境如何发展，因为这些生物会进行繁殖与传播，这些转基因生物中潜在的危险等到被发现或许已经太晚了。</p>
<p>B 因为以上原因，转基因生物不能直接被放到大自然中。它们对生态系统潜藏着不可接受的危险，对生物的多样性、野生物种、以及农业生态系统的稳定性都有极大威胁。</p>
<p>C 转基因生物威胁作物多样性。</p>
<p>作物遗传多样性是继续发展抵抗新害虫、疾病和极端气候以及极端环境情况的重要因素。作物多样性是全球作物发展的最基本的安全保障，事实上，这还关系到人类史上主要的作物流行病。</p>
<p>D 近些年1970s在美国南部的玉米作物被一种叫做南部作物枯萎病袭击。由于这些玉米作物在美国遗传的相一致性，这个疾病所带来的损失是巨大的，占据了总收成的15%，损失了约一亿美元。</p>
<p>E 根据植物学家JH认为，作物的遗传问题暗藏着我们所想象不到的大规模的饥荒。</p>
<p>F 转基因公司影响了农民的生计</p>
<p>如果认为影响生物多样性还不够，生物科技巨头使得农民对这些人工种植作物的使用权付出更多。北美和拉丁美洲是世界农业转基因最盛行的地方，农民必须签订明确的合同表明他们是否预留一些种子用作来年来种植甚至用过任何除草剂，除了公司自身的。农民们完完全全被掌控。</p>
<p>G 然而，随着意识的增长，消费者和农民们的问题也让整个转基因作物的问题逐步得到关注，农业产业化也可能被停止。</p>
<h3 id="unit-3-text-4"><a class="markdownIt-Anchor" href="#unit-3-text-4"></a> Unit 3 Text 4</h3>
<p><strong>What are the Risks of Cloning? 克隆的风险是什么 ？</strong></p>
<p>When we hear of cloning successes, we learn about only the few attempts that worked. What we don’t see are the many, many cloning experiments that failed! And even in the successful clones, problems tend to arise later, during the animal’s development to adulthood.</p>
<p>当我们听到克隆成功的消息时，我们只了解到为数不多的成功尝试。我们看不到的是许许多多失败的克隆实验！即使在成功的克隆中，问题往往会在动物发育到成年后出现。</p>
<p>Cloning animals shows us what might happen if we try to clone humans. What have these animals taught us about the risks of cloning?</p>
<p>克隆动物向我们展示了如果我们试图克隆人类会发生什么。关于克隆的风险，这些动物教会了我们什么?</p>
<p><strong>1. High failure rate 1. 高失败率</strong></p>
<p>Cloning animals through somatic cell nuclear transfer is simply inefficient. The success rate ranges from 0.1 percent to 3 percent, which means that for every 1,000 tries, only one to 30 clones are made. Or you can look at it as 970 to 999 failures in 1,000 tries. That’s a lot of effort with only a speck of a return!</p>
<p>通过体细胞核移植克隆动物的效率很低。 成功率从 0.1% 到 3% 不等 ， 这意味着每 1, 000 次尝试只有 1 到 30 次克隆成功。 或者你可以把它看作是 1000 次尝试中的 970 到 999 次失败。这是一个很大的努力，只有一点回报!</p>
<p>Why is this? Here are some reasons:</p>
<p>The enucleated egg and the transferred nucleus may not be compatible.</p>
<p>An egg with a newly transferred nucleus may not begin to divide or develop properly.</p>
<p>Implantation of the embryo into the surrogate (替代的) mother might fail.</p>
<p>The pregnancy itself might fail.</p>
<p>这是为什么 ？以下是一些原因 ：</p>
<p>去核卵和转移的细胞核可能不兼容。</p>
<p>具有新转移的细胞核的卵可能不会开始分裂或正常发育。</p>
<p>将胚胎植入代孕母亲体内可能会失败。</p>
<p>怀孕本身可能会失败。</p>
<p><strong>2. Problems during later development 2. 后期开发中的问题</strong></p>
<p>Cloned animals that do survive tend to be much bigger at birth than their natural counterparts. Scientists call this “Large Offspring Syndrome” (LOS). Clones with LOS have abnormally large organs. This can lead to breathing, blood flow and other problems.</p>
<p>存活下来的克隆动物在出生时往往比它们的天然同类体型大得多。 科学家们称之为 “大子女综合症” （ LOS ） 。 患有 LOS 的克隆体的器官异常大。这会导致呼吸、血液流动和其他问题。</p>
<p>Because LOS doesn’t always occur, scientists cannot reliably predict whether it will happen in any given clone. Also, some clones without LOS have developed kidney or brain malformations and impaired immune systems, which can cause problems later in life.</p>
<p>因为LOS并不总是发生，科学家们不能可靠地预测它是否会发生在任何一个给定的克隆人身上。此外，一些没有LOS的克隆体出现了肾脏或大脑畸形，免疫系统受损，这可能会在以后的生活中造成问题。</p>
<p><strong>3. Abnormal gene expression patterns 3.异常基因表达模式</strong></p>
<p>Are the surviving clones really clones? The clones look like the originals, and their DNA sequences are identical. But will the clone express the right genes at the right time?</p>
<p>幸存的克隆体真的是克隆体吗 ？ 克隆人看起来像原始人 ， 他们的 DNA 序列是相同的。 但是克隆会在正确的时间表达正确的基因吗 ？</p>
<p>In a naturally-created embryo, the DNA is programmed to express a certain set of genes. Later on, as the embryonic cells begin to differentiate, the program changes. For every type of differentiated cell–skin, blood, bone or nerve, for example–this program is different.</p>
<p>在自然创造的胚胎中，DNA被设定为表达一组特定的基因。后来，当胚胎细胞开始分化时，程序也随之改变。对于每一种分化的细胞，例如皮肤、血液、骨骼或神经，这个程序都是不同的。</p>
<p>In cloning, the transferred nucleus doesn’t have the same program as a natural embryo. It is up to the scientist to reprogram the nucleus, like teaching an old dog new tricks. Complete reprogramming is needed for normal or near-normal development. Incomplete programming will cause the embryo to develop abnormally or fail.</p>
<p>在克隆中，移植的细胞核没有与自然胚胎相同的程序。科学家有责任对细胞核进行重新编程，就像教老狗学新把戏一样。正常或接近正常的开发需要完全的重新编程。不完全的编程将导致胚胎发育不正常或失败。</p>
<p><strong>4. Telomeric differences 4. 端粒的差异</strong></p>
<p>As cells divide, their chromosomes (染色体) get shorter. This is because the DNA sequences at both ends of a chromosome, called telomeres, shrink in length every time the DNA is copied. The older the animal is, the shorter its telomeres will be, because the cells have divided many, many times. This is a natural part of aging.</p>
<p>当细胞分裂时，染色体变短。这是因为染色体两端的 DNA 序列，即端粒，在每次复制 DNA 时都会收缩。 动物年龄越大，它的端粒就会越短，因为细胞已经分裂了许多次。这是衰老的一个自然部分。</p>
<p>So, what happens to the clone if its transferred nucleus is already pretty old? Will the shortened telomeres (端粒) affect its development or lifespan?</p>
<p>那么， 如果克隆转移的细胞核已经相当老了，会发生什么呢？缩短的端粒会影响其发育或寿命吗 ？</p>
<p>When scientists looked at the telomere lengths of cloned animals, they found no clear answers. Chromosomes from cloned cattle or mice had longer telomeres than normal. These cells showed other signs of youth and seemed to have an extended lifespan compared with cells from a naturally conceived cow. On the other hand, Dolly the Sheep’s chromosomes had shorter telomere lengths than normal. This means that Dolly’s cells were aging faster than the cells from a normal sheep.</p>
<p>To date, scientists aren’t sure why cloned animals show differences in telomere length.</p>
<p>当科学家们观察克隆动物的端粒长度时，他们没有找到明确的答案。克隆牛或老鼠的染色体端粒比正常的要长。这些细胞还表现出了其他的年轻迹象，与自然受孕的牛的细胞相比，它们的寿命似乎更长。另一方面，多利羊的染色体端粒比正常的要短。这意味着多莉的细胞比正常绵羊的细胞衰老得更快。</p>
<p>到目前为止，科学家们还不确定为什么克隆动物的端粒长度存在差异。</p>
<p><strong>I. Complete the following summary of the text, using ONE word for each blank:</strong></p>
<p>The whole process of cloning is full of risks. To name just a few, an egg with a newly transferred nucleus may first not <strong>divide or develop</strong> properly. Second, even if a surrogate mother has successfully given birth to a cloned animal, it may encounter the problem of <strong>LOS</strong> during its later development. Third, we have to make sure that the surviving clones may express the right <strong>genes</strong> at the right time and this needs constant <strong>reprogramming</strong>. Finally, telomere <strong>length</strong> is still another problem at which scientists fail to come to a conclusion. That’s why cloning experiments have a high <strong>failure</strong> rate.</p>
<p>克隆的整个过程充满了风险。举几个例子，一个带有新转移细胞核的卵子可能首先不能正常分裂或发育。其次，即使代孕母亲成功地生下了克隆动物，在其后期发展过程中可能会遇到LOS问题。第三，我们必须确保存活下来的克隆体能够在正确的时间表达正确的基因，而这需要不断地重新编程。最后，端粒长度仍然是另一个科学家无法得出结论的问题。这就是克隆实验失败率高的原因。</p>
<p><strong>II. C正确，F错误</strong></p>
<p>7 (F) Cloned animals tend to be bigger and stronger than their natural counterparts. 克隆动物往往比自然的同类动物更大更强壮。</p>
<p>8 (F) The clone will express the right genes at the right time so long as it is programmed. 克隆只要被编程，就会在正确的时间表达正确的基因。</p>
<p>9 © The shortened telomeres will not necessarily influence development of the clone. 缩短的端粒不一定会影响克隆的发育。</p>
<h3 id="unit-3-text-5"><a class="markdownIt-Anchor" href="#unit-3-text-5"></a> Unit 3 Text 5</h3>
<p><strong>Rice Genome Sequence Means More Food for the Future 水稻基因组序列意味着未来将有更多粮食</strong></p>
<p>A) Scientists with the International Rice Genome Sequencing Project have published the DNA pattern for rice – <strong>the first crop plant to be completely decoded.</strong> Scientists around the world will use the new information to improve yields of rice and also other related grass crops such as barley, corn, rye, sugarcane and wheat.</p>
<p>国际水稻基因组测序项目的科学家公布了水稻的DNA模式，<strong>这是第一种被完全解码的作物</strong>。世界各地的科学家将利用这些新信息提高水稻和其他相关草作物的产量，如大麦、玉米、黑麦、甘蔗和小麦。</p>
<p>B) More than half the world’s growing population relies upon rice as a staple food, but worldwide environmental degradation has decreased rice production for the past four years. The newly published sequence offers the hope that rice yields can be increased to keep pace with demand. “<strong>This could probably provide the key in improving yield to feed an expanding world population</strong> at a time of increasing restraints on agriculture,” the IRGSP said in a statement.</p>
<p>世界上一半以上的人口以大米为主食，但是世界范围内的环境恶化使大米产量在过去四年里下降。新公布的序列为提高水稻产量以跟上需求提供了希望。IRGSP在一份声明中表示:“在农业受到越来越多限制的情况下，<strong>这可能为提高产量、满足不断扩大的世界人口提供关键</strong>。”</p>
<p>C) Analysis of the rice genome, reported in Thursday’s issue of the journal <em>Nature</em>, made public the location and sequence of over 37,500 protein-encoding genes in 389 million bases of DNA. By comparison, the human genome has 25,000 genes, so this important <strong>food crop has more genes than humans</strong>.</p>
<p>周四出版的《自然》杂志报道了对水稻基因组的分析，公布了3.89亿个DNA碱基中超过37500个蛋白质编码基因的位置和序列。相比之下，人类基因组有25000个基因，所以这种重要的粮食作物比人类拥有更多的基因。</p>
<p>D) “Knowing the sequence of one of the world’s most important crops, will be invaluable to plant genomics researchers. This project will potentially help millions of people around the globe,” said Arden L. Bement, Jr., director of the U.S. National Science Foundation, which funded part of the research.</p>
<p>&quot;了解世界上最重要的作物之一的序列，对植物基因组学研究人员将是非常宝贵的。“美国国家科学基金会主任 Arden L. Bement 说，“这个项目有可能帮助全球数百万人。”</p>
<p>E) Agricultural experts estimate that world rice production must increase by 30 percent in the next 20 years to keep pace with the growing world population.</p>
<p>农业专家估计，世界水稻产量必须在未来20年增长30%，才能跟上世界人口增长的步伐。</p>
<p>F) Originally planned as a <strong>10-year project</strong>, the rice genome sequence was completed in <strong>six</strong> years due to sharing of materials, data, and technology among researchers from publicly funded laboratories in countries who make up the International Rice Genome Sequencing Project.</p>
<p>由于国际水稻基因组测序项目的组成国的公共资助实验室的研究人员共享了材料、数据和技术，水稻基因组测序原本计划是一个10年的项目，<strong>但在6年内完成了。</strong></p>
<p>G) Established in 1998, the Japanese-led IRGSP consortium includes the United States, China, Korea, India, Thailand, France, Brazil, and the United Kingdom. “This is one of the most accurate and complete sequences from a higher organism,” the IRGSP said. “The sequence was obtained through the clone-by-clone sequencing strategy. <strong>The accuracy of the sequence data is maintained at 99.999% corresponding to less than one error per 10,000 bases so that the reliability of identified genes is also high.</strong>” “Previously published draft sequences of rice are shown to lack the coverage and accuracy required to identify important genes,” the consortium said.</p>
<p>由日本领导的IRGSP联盟成立于1998年，包括美国、中国、韩国、印度、泰国、法国、巴西和英国。“这是高等生物中最精确和最完整的序列之一，”IRGSP说，“该序列是通过克隆逐个克隆的测序策略获得的。<strong>序列数据的准确性保持在99.999%，对应的误差小于1 / 10000个碱基，因此所鉴定的基因的可靠性也很高</strong>”。该协会说:“以前公布的水稻序列草案缺乏识别重要基因所需的覆盖度和准确性。”</p>
<p>H) The newly complete sequence builds upon earlier draft sequences published by private companies <strong>Monsanto and Syngenta</strong>, which donated their genome sequences to the IRGSP, saving the public consortium time and money. “This is a monumental achievement. Enough credit cannot be given to the IRGSP members for working together to advance the research of such an important world crop,” said Mary Clutter, assistant director for NSF’s biology directorate.</p>
<p>新完成的序列建立在私营公司<strong>孟山都(Monsanto)和先正达(Syngenta)</strong>公布的早期序列草案的基础上，这两家公司将他们的基因组序列捐赠给了IRGSP，从而节省了公共财团的时间和资金。“这是一个里程碑式的成就”，国家科学基金会生物理事会助理主任玛丽·克拉特说，“不能把足够的荣誉归于IRGSP成员共同努力推进如此重要的世界作物的研究。”</p>
<p>I) The japonica subspecies of rice, which is cultivated in Japan, Korea and the United States, was the type of rice analyzed. The group made public a draft sequence of the japonica genome in late 2002. Since then, IRGSP scientists have increased the quality of the sequence to 95 percent complete at greater than 99 percent accuracy. <strong>The accurate map-based sequence of the rice genome has already led to the identification of genes that affect the plant’s</strong> growth habit to promote yield and photoperiod genes to extend the range of elite cultivars. Scientists have used the finished sequence to identify genes that control fundamental processes, such as flowering.</p>
<p>在日本、韩国和美国种植的粳稻亚种是被分析的水稻类型。该研究小组在2002年晚些时候公开了粳稻基因组的草图。从那时起，IRGSP的科学家们已经将序列的质量提高到95%，准确率超过99%。<strong>通过对水稻基因组的精确图谱测序，人们已经鉴定出了影响水稻生长习性以促进产量的基因，还发现了一些光周期基因，从而扩大了优良品种的范围。科学家们已经使用完成的序列来识别控制基本过程的基因，比如开花。</strong></p>
<p>J) The drought that is parching much of Asia this year will cost the region hundreds of millions of dollars in lost agricultural production and drive millions of people into poverty. A better scientific understanding of how a rice plant tolerates drought could help rice breeders to develop varieties that can withstand the dry years.</p>
<p>今年肆虐亚洲大部分地区的干旱，将使该地区损失数亿美元的农业生产，并使数百万人陷入贫困。对水稻如何耐受干旱有更好的科学理解，可以帮助水稻育种者培育出能够耐受干旱年份的品种。</p>
<p>K) “Rice is a critically important crop, and this finished sequence represents a major milestone,” said Robin Buell, lead investigator for the portion of the project conducted by The Institute for Genomic Research in Rockville, Maryland. “We know the scientific community can use these data to develop new varieties of rice that deliver increased yields and grow in harsher conditions.”</p>
<p>“水稻是一种极其重要的作物，这一完成的序列代表着一个重大的里程碑，”马里兰州罗克维尔基因组研究所(the Institute for Genomic Research)负责该项目部分的首席研究员罗宾·布尔(Robin Buell)说。“我们知道科学界可以利用这些数据开发新的水稻品种，提高产量，并在更恶劣的条件下生长。”</p>
<p>L) Rice has a smaller genome than maize and wheat, making it a better candidate for sequencing yet the rice genome is largely co-linear with other cereal genomes. Similar genes in the other plant species should appear in roughly the same spots as their rice counterparts. “<strong>Rice is the Rosetta Stone for crop genomes</strong>,” Buell says. “We can use the rice genome as a base for genomic studies of cereals.” Rice’s similarity to barley has helped researchers identify genes responsible for resistance to barley powdery mildew and stem rust, two major crop diseases.</p>
<p>水稻的基因组比玉米和小麦的要小，这使它成为测序的更好的选择，但水稻基因组很大程度上与其他谷物基因组是共线性的。在其他植物物种中类似的基因应该出现在与它们对应的水稻物种大致相同的位置。“<strong>水稻是作物基因组的罗塞塔石碑</strong>，”布尔说。“我们可以把水稻基因组作为谷物基因组研究的基础。”水稻与大麦的相似之处帮助研究人员识别了抗大麦白粉病和茎锈病的基因，这两种主要作物疾病。</p>
<p>M) Every year, the world consumes over 880 billion pounds of rice, <strong>but rice plants provide more than food.</strong> The grain is fermented into wine. Rice straw makes cattle feed, paper, rope and bricks. Rice oil goes into soap and cosmetics, and seed hulls provide fuel for simple stoves and packing material for fragile cargo.</p>
<p>每年，世界上消耗超过8800亿磅的大米，<strong>但是水稻提供的不仅仅是食物</strong>。谷物发酵成酒。稻草可以做牛饲料、纸、绳和砖。米油被用于制作肥皂和化妆品，种子壳为简易炉灶提供燃料，为易碎货物提供包装材料。</p>
<p>I. <strong>段落匹配</strong></p>
<p>G 1. The newly published rice genome sequence has a high degree of accuracy and reliability.</p>
<p>新发表的水稻基因组序列具有较高的准确性和可靠性。</p>
<p>A 2. Rice is the first crop plant with its genome sequences completely decoded.</p>
<p>水稻是第一种完全解码了其基因组序列的作物。</p>
<p>F 3.The International Rice Genome Sequencing Project was completed 4 years earlier than scheduled.</p>
<p>国际水稻基因组测序项目比计划提前4年完成。</p>
<p>I 4. The finished rice genome sequence has already been put into application.</p>
<p>完成的水稻基因组序列已投入应用。</p>
<p>H 5. The generous donation by private companies Monsanto and Syngenta saved the IRGSP both time and money of doing the research.</p>
<p>私营公司孟山都(Monsanto)和先正达(Syngenta)的慷慨捐赠，为IRGSP节省了进行研究的时间和资金。</p>
<p>M 6. Rice plants can be used for different purposes besides providing food.</p>
<p>水稻除了提供食物外，还可以用于不同的目的。</p>
<p>B 7. The newly published rice genome sequence may increase the probability of <strong>feeding the growing population</strong>.</p>
<p>新发表的水稻基因组序列可能会增加养活不断增长的人口的可能性。</p>
<p>L 8. The research on the rice genome sequence contributes greatly to the studies on other cereals.</p>
<p>水稻基因组序列的研究对其他谷物的研究具有重要意义。</p>
<p>C 9. According to the research results, rice has more genes than human.</p>
<p>根据研究结果，水稻比人类拥有更多的基因。</p>
<p>II. <strong>按事件发生的顺序排序</strong></p>
<p>2 a. A draft sequence of the japonica genome was released. 发布了粳稻基因组草案序列。</p>
<p>1 b. The Japanese led IRGSP consortium was established. 日本领导的IRGSP联盟成立。</p>
<p>4 c. Analysis of the rice genome was reported in an issue of the journal <em>Nature</em>. 对水稻基因组的分析发表在一期《自然》杂志上。</p>
<p>3 d. IRGSP scientists have increased the quality of the japonica genome sequence. IRGSP科学家提高了粳稻基因组序列的质量。</p>
<h3 id="unit-4-text-1"><a class="markdownIt-Anchor" href="#unit-4-text-1"></a> Unit 4 Text 1</h3>
<blockquote>
<p>thanks <a href="http://www.lanceh.top/">lance.h (lanceh.top)</a></p>
</blockquote>
<p>A)   总理先生及今晚在座的诸位贵宾： 我谨代表你们的所有美国客人向你们表示感谢，感谢你们的无可比拟的盛情款待。中国人民以这种盛情款待而闻名世界。我们不仅要赞扬那些准备了这次盛大晚宴的人，而且还要特别赞扬那些为我们演奏美好音乐的人。我在外国从未听到过演奏得这么好的美国音乐。</p>
<p>B)   总理先生，我要感谢你的非常盛情和雄辩的讲话。此时此刻，通过电讯的奇迹，看到和听到我们讲话的人比在世界历史上任何其他这样的场合都要多。</p>
<p>C)   不过，我们在这里所讲的话，人们不会长久地记住，但我们在这里做的事却能改变世界。 正如你在祝酒时讲的那样，中国人民是伟大的人民，美国人民是伟大的人民。如果我们两国人民互相为敌，那么我们共同居住的这个世界的前途就的确很暗淡。但是，如果我们能够找到进行合作的共同点，那么实现世界和平的机会就将无可估量地大大增加。</p>
<p>D)   我希望我们这个星期的会谈将是坦率的。本着这种坦率的精神，让我们在一开始就认识到这样几点：过去一些时候我们曾是敌人，今天我们有巨大的分歧。使我们走到一起的，是我们有超越这些分歧的共同利益。在我们讨论我们的分歧时，我们双方都要在自己的原则上妥协。但是，虽然我们不能弥合双方之间的鸿沟，我们却能够设法搭一座桥，以便我们能够越过它进行会谈。</p>
<p>E)    因此，让我们在接下来的五天里，一起踏上漫漫征程，虽然步调不一致，但都是朝着同一个目标在不同的道路上前进。这个目标是建立一个公正和平的世界格局。在这个格局中，所有国家都能相互尊重，国家不论大小，都有权不受外界的干涉或统治，自主地决定自己的政府形式。世界在注视着我们，世界在聆听着我们，世界期盼着我们的决定。世界是什么呢？就我个人而言，我想起今天是我大女儿的生日，我想起了她，便想起了全世界的孩子们，亚洲的、非洲的、欧洲的和美洲的，各国大部分孩子都是在中华人民共和国建国以后出生的。</p>
<p>F)   该留给孩子们什么样的遗产呢？他们是注定要死于困扰旧世界的仇恨还是注定为创建新世界这一远景而生存呢？ 我们毫无理由成为敌人，我们都既不窥视另一方的领土，也不寻求主宰另一方，更不想扩展势力统治世界。</p>
<p>G)   毛主席曾写道：“多少事，从来急，天地转，光阴迫，一万年太久，只争朝夕。”</p>
<p>H)   此时此刻，两国人民应该行动起来，努力开创一个全新的、更美好的世界。 本着这种精神，我诚邀在坐的各位与我共同为毛主席，为周总理，为中美两国人民的友谊，以及由此带给全世界人民的友谊与和平干杯。</p>
<h3 id="unit-4-text-2"><a class="markdownIt-Anchor" href="#unit-4-text-2"></a> Unit 4 Text 2</h3>
<blockquote>
<p>thanks <a href="http://www.lanceh.top/">lance.h (lanceh.top)</a></p>
</blockquote>
<p>我觉得这个奖项不是奖给我个人的，而是奖给我的作品——一部在痛苦和汗水中铸就的有关人类精神的大作，不是为了荣誉，至少不是为了利益而创作，而是创造出一些以前不曾存在的有关人类精神的作品。所以说这个奖项知识在我这存放。要作一份跟诺贝尔奖起源的重要意义和目的相称的金钱方面的致辞并不难，但是我更愿意在这样喝彩的同事，利用此刻，为已经投身于同样苦恼和辛劳的文学工作的年轻人导航，他们中肯定有人会在将来的某一天站到我今天所站的地方。</p>
<p>我们今天的悲剧就是一个我们长期遭受甚至现如今已经能忍受的肉体上的恐惧。现在不再有关于精神方面的问题，这里只有一个疑问：我何时会被炸毁？因为这样，今天的年轻作者都忘记了人类内心的冲突，而就这冲突本身就能造就优秀的作品，因为只有它值得写，值得耗费我们的辛劳和汗水。</p>
<p>它需要重新学习这些。他要告诫自己万物之源就是恐惧，还要告诫自己永远忘掉它，也不要留任何的空间给他物，除了心灵深处古老的真理和事实。这个度老而普遍的真理就是——真爱、荣誉、怜悯、自豪、同情和牺牲，缺乏它，任何作品都是短暂而缺少生命力的。除非他这样做，否则他的作品就是诅咒。他写出来不是真爱而是性欲，没有任何人失去价值的战败，没有希望的胜利，最糟糕的是，没有同情和怜悯。他悲痛着没有实体的痛苦，也没留下疤痕，他写的不是心脏而是腺体。</p>
<p>只有他重新认识这些，他才能写出身临其境的世界末日景象。我拒绝接受世界末日论。我们很容易意识到人类是不朽的，因为他能忍受；当世界末日的丧钟敲响了，并消逝在最后一抹残阳下潮水退后显露出来的一块无用的岩石上，这里仍然会有一个声音：他微小而无穷尽的声音，一直持续着，我拒绝接受这一点。我相信人类不仅仅是忍受：他一定会战胜。他是不朽的，不是因为所有的生物中只有他有无穷尽的声音，而是因为他有灵魂，有能怜悯、牺牲和忍耐的精神。</p>
<p>诗人、作者的职责就是要描绘这些东西。这也是他的殊荣来帮助人类没，通过振作他的心，唤醒他的勇气、荣耀、希望、自豪、怜悯、同情和牺牲。这些都是他过去的光荣。诗人的声音不仅仅是人类的记录，它应该还是帮助他忍耐和战胜一切的支撑物和栋梁。</p>
<h3 id="unit-4-text-3"><a class="markdownIt-Anchor" href="#unit-4-text-3"></a> Unit 4 Text 3</h3>
<blockquote>
<p>thanks <a href="http://www.lanceh.top/">lance.h (lanceh.top)</a></p>
</blockquote>
<p>1 I’m sorry, but I don’t want to be an emperor.<br />
对不起，但我不想成为什么皇帝。</p>
<p>That’s not my business.</p>
<p>那不是我的事情。</p>
<p>I don’t want to rule or conquer anyone.</p>
<p>我不想统治或征服任何人。</p>
<p>I should like to help everyone if possible: Jew, gentile, black man, white.</p>
<p>我想帮助每个人: 犹太人，非犹太人，黑人，白人。</p>
<p>2 We all want to help one another. Human beings are like that.</p>
<p>我们要彼此帮助，人类就应该那样。</p>
<p>We want to live by each other’s happiness, not by each other’s misery.</p>
<p>我们要幸福的生活，而不是悲惨的。</p>
<p>We don’t want to hate or despise one another.</p>
<p>我们不希望彼此憎恨。</p>
<p>In this world, there is room for everyone and the good earth is rich and can provide for everyone.</p>
<p>在这个世界上，土地是富足的，它能养活每一个人。</p>
<p>The way of life can be free and beautiful，but we have lost the way.</p>
<p>生活本可以是自由且美好的，但是我们迷失了方向。</p>
<p>3 Greed has poisoned men’s souls, has barricaded the world with hate, has goose-stepped us into misery and bloodshed.</p>
<p>贪婪侵蚀了人们的灵魂 ，用憎恨阻隔了世界，我们一步步走向血腥。</p>
<p>We have developed speed but we have shut ourselves in.</p>
<p>我们飞速发展，但是同时又自我封闭。</p>
<p>Machinery that gives abundance has left us in want.</p>
<p>工业时代让我们物欲横流。</p>
<p>Our knowledge has made us cynical, our cleverness, hard and unkind.</p>
<p>我们的知识让我们玩世不恭，我们的智慧让我们冷酷无情。</p>
<p>4 We think too much and feel too little.</p>
<p>我们考虑得太多而感知得太少。</p>
<p>More than machinery we need humanity.</p>
<p>除了机器我们更需要人性。</p>
<p>More than cleverness we need kindness and gentleness.</p>
<p>除了智慧我们更需要仁慈和礼貌。</p>
<p>Without these qualities, life will be violent and all will be lost…</p>
<p>没有这些品格，生活将充满暴力，一切将不复存在…</p>
<p>The aeroplane and radio have brought us closer together.</p>
<p>飞机和收音机让我们彼此靠得更近。</p>
<p>These inventions cry out for the goodness in man, cry out for universal brotherhood, for the unity of us all.</p>
<p>这些发明呼唤人类的良知，呼唤全世界的手足情谊，让我们团结在一起。</p>
<p>5 Even now my voice is reaching millions, millions of despairing men, women and children, victims of a system that makes men torture ，and imprison innocent people.</p>
<p>现在我的声音传到数以百万的，数以百万的绝望的男人，女人和孩子们的耳朵里，被那些在暴政制度下痛苦折磨的受难者，和无端入狱的人们的听到。</p>
<p>6 To those who can hear me I say, do not despair. The misery upon us is but the passing of greed,the bitterness of men who fear the way of human progress.</p>
<p>我要对那些能够听到我讲话的人们说，不要绝望！我们正经受的悲惨遭遇不过是那些畏惧人类进步的，贪婪的人所承受的痛苦。</p>
<p>The hate of men will pass, and dictators die, and the power they took will return to the people.</p>
<p>人们间憎恨将会过去，独裁者也会消亡，被他们夺走的权力将会重新回到人民的手中。</p>
<p>So long as men die liberty will never perish.</p>
<p>只要人类没有灭亡自由之火就永不会熄灭。</p>
<p>7 Soldiers, don’t give yourselves to brutes, men who despise you, enslave you,regiment your lives, tell you what to think and feel, who drill you, treat you like cattle and use you as cannon fodder.</p>
<p>士兵们，不要替那些畜生们卖命，他们鄙视你们，奴役你们，操纵你们的生命，告诉你该想什么，感觉什么，他们把你们当牛一样训练为的只是拿你们去当炮灰。</p>
<p>8 Don’t give yourselves to these men, machine men with machine minds mand machine hearts.</p>
<p>不要把自己的命运交给给这些人，这些像机器一样思想机械毫无感情的人。</p>
<p>You are not machines, you are not cattle, you are men! You have the love of humanity in you.</p>
<p>你们不是机器，你们不是牛，你们是人！你们每个人的心中有着人性的爱。</p>
<p>9 Don’t hate. Only the unloved and the unnatural hate. Soldiers, don’t fight for slavery, fight for liberty!</p>
<p>不要憎恨，只有那些没有人爱和邪恶的人才会憎恨。士兵们，不要为奴役而战斗，要为了自由而战斗！</p>
<p>10 St Luke says, &quot;The Kingdom of God is within man. &quot; Not in one man nor a group of men, but in all men. In you!</p>
<p>圣徒路加说过，“上帝的国就就在人间” 。不在一个人也不是在一群人中，而是在所有的人中，就在你们之中!</p>
<p>You have the power to create machines, the power to create happiness.You have the power to make this life free and beautiful, to make this life a wonderful adventure.</p>
<p>你们有能力创造机器，有能力去创造快乐，你们有能力使生活自由而美好，把生活当作一场美妙的冒险。</p>
<p>In the name of democracy, let us use that power.</p>
<p>以民主的名义，让我们使用这种能力吧</p>
<p>11 Let us all unite, let us fight for a new world,a world that will give men a chance to work, that will give youth a future and old age security.</p>
<p>让我们联合起来，为创造一个崭新的世界而奋斗，在这个世界人们将不会失业 ，它会给青年人更好的未来，老人也老有所养。</p>
<p>Promising these things, brutes have risen. But they lie! They do not fulfil that promise. They never will! Dictators free themselves but they enslave the people.</p>
<p>那些畜生们对我们承诺过的,全都是谎言！他们没有实现那些诺言　永远都不会!独裁者使自己享受了自由却奴役其他人,</p>
<p>12 Now let us fight to fulfil that promise! Let us fight to free the world, to do away with national barriers to do away with greed, with hate and intolerance.</p>
<p>现在，让我们为实现那个诺言而斗争吧！让我们为了自由的世界而斗争,为了废除国界而斗争 ,为了驱除贪婪，憎恨和狭隘而斗争.</p>
<p>13 Let us fight for a world of reason, a world where science and progress will lead to the happiness of all. Soldiers, in the name of democracy, let us unite!</p>
<p>让我们为了自由的世界而斗争，为了废除国界而斗争。为了驱除贪婪，憎恨和狭隘而斗争。让我们为一个公正世界而斗争，一个科学和进步将会为全体人类创造幸福的世界。士兵们，以民主的名义让我们联合起来！</p>
<h3 id="unit-4-text-4"><a class="markdownIt-Anchor" href="#unit-4-text-4"></a> Unit 4 Text 4</h3>
<blockquote>
<p>thanks <a href="http://www.lanceh.top/">lance.h (lanceh.top)</a></p>
</blockquote>
<p><STRONG>热血、辛劳、眼泪和汗水(1940.5.13)  </STRONG></p>
<p>A） 星期五晚上，我接受了英王陛下的委托，组织新政府。这次组阁，应包括所有的政党，既有支持上届政府的政党，也有上届政府的反对党，显而易见，这是议会和国家的希望与意愿。</p>
<p>B） 我已完成了此项任务中最重要的部分。战时内阁业已成立，由5位阁员组成，其中包括反对党的自由主义者，代表了举国一致的团结。三党领袖已经同意加入战时内阁，或者担任国家高级行政职务。三军指挥机构已加以充实。由于事态发展的极端紧迫感和严重性，仅仅用一天时间完成此项任务，是完全必要的。其他许多重要职位已在昨天任命。我将在今天晚上向英王陛下呈递补充名单，并希望于明日一天完成对政府主要大臣的任命。其他一些大臣的任命，虽然通常需要更多一点的时间，但是，我相信会议再次开会时，我的这项任务将告完成，而且本届政府在各方面都将是完整无缺的。</p>
<p>C） 我认为，向下院建议在今天开会是符合公众利益的。议长先生同意这个建议，并根据下院决议所授予他的权力，采取了必要的步骤。今天议程结束时，建议下院休会到5月21日星期二。当然，还要附加规定，如果需要的话，可以提前复会。下周会议所要考虑的议题，将尽早通知全体议员。现在，我请求下院，根据以我的名义提出的决议案，批准已采取的各项步骤，将它记录在案，并宣布对新政府的信任。</p>
<p>D） 组成一届具有这种规模和复杂性的政府，本身就是一项严肃的任务。但是大家一定要记住，我们正处在历史上一次最伟大的战争的初期阶段，我们正在挪威和荷兰的许多地方进行战斗，我们必须在地中海地区做好准备，空战仍在继续，众多的战备工作必须在国内完成。在这危急存亡之际，如果我今天没有向下院做长篇演说，我希望能够得到你们的宽恕。我还希望，因为这次政府改组而受到影响的任何朋友和同事，或者以前的同事，会对礼节上的不周之处予以充分谅解，这种礼节上的欠缺，到目前为止是在所难免的。正如我曾对参加本届政府的成员所说的那样，我要向下院说：“我没什么可以奉献，有的只是热血、辛劳、眼泪和汗水。”</p>
<p>E） 摆在我们面前的，是一场极为痛苦的严峻的考验。在我们面前，有许多许多漫长的斗争和苦难的岁月。你们问：我们的政策是什么？我要说，我们的政策就是用我们全部能力，用上帝所给予我们的全部力量，在海上、陆地和空中进行战争，同一个在人类黑暗悲惨的罪恶史上所从未有过的穷凶极恶的暴政进行战争。这就是我们的政策。你们问：我们的目标是什么？我可以用一个词来回答：胜利——不惜一切代价，去赢得胜利；无论多么可怕，也要赢得胜利，无论道路多么遥远和艰难，也要赢得胜利。因为没有胜利，就不能生存。大家必须认识到这一点：没有胜利，就没有英帝国的存在，就没有英帝国所代表的一切，就没有促使人类朝着自己目标奋勇前进这一世代相传的强烈欲望和动力。但是当我挑起这个担子的时候，我是心情愉快、满怀希望的。我深信，人们不会听任我们的事业遭受失败。此时此刻，我觉得我有权利要求大家的支持，我要说：“来吧，让我们同心协力，一道前进。”</p>
<h3 id="unit-4-text-5"><a class="markdownIt-Anchor" href="#unit-4-text-5"></a> Unit 4 Text 5</h3>
<blockquote>
<p>thanks <a href="http://www.lanceh.top/">lance.h (lanceh.top)</a></p>
</blockquote>
<p>Ronald Reagan: The Space Shuttle “Challenger” Tragedy Address 罗纳德·里根：关于“挑战者号”航天飞机悲剧的演讲</p>
<p>Ladies and Gentlemen, I’d planned to speak to you tonight to report on the state of the Union, but</p>
<p>the events of earlier today have led me to change those plans. Today is a day for mourning and</p>
<p>remembering. Nancy and I are pained to the core by the tragedy of the shuttle Challenger. We know we share this pain with all of the people of our country. This is truly a national loss.</p>
<p>女士们先生们：本来，我打算今天晚上向你们宣读国情咨文，但今天早些时候发生的事件让我改变了计划。今天是哀悼和怀念的日子。南希和我为“挑战者号”航天飞机的悲剧感到至为痛心。我们知道全体国人人同此心。这真正是全国人的损失。</p>
<p>Nineteen years ago, almost to the day, we lost three astronauts in a terrible accident on the ground. But, we’ve never lost an astronaut in flight. We’ve never had a tragedy like this. And perhaps we’ve forgotten the courage it took for the crew of the shuttle. But they, the Challenger Seven, were aware of the dangers, but overcame them and did their jobs brilliantly. We mourn seven heroes: Michael Smith, Dick Scobee, Judith Resnik, Ronald McNair, Ellison Onizuka, Gregory Jarvis, and Christa McAuliffe. We mourn their loss as a nation together.</p>
<p>十九年前，几乎就在今天，在一次可怕的地面事故中，我们丧失了三名宇航员。然而我们从未在飞行中丧失过宇航员，从未经历过这样的灾难。也许我们已经忘记，航天飞机机组人员需要多么大的勇气；但是挑战者七壮士深知其中的危险，他们坚忍不拔，出色地履行了自己的职责。我们悼念七位英雄：迈克尔·史密斯、迪克·斯科比、朱迪恩·伦斯尼克、罗纳德·卖克奈尔、埃利森·奥尼祖卡、格雷戈里·贾维斯、克丽斯塔·麦考利夫。我们举国哀悼失去的英雄。</p>
<p>For the families of the seven, we cannot bear, as you do, the full impact of this tragedy. But we feel the loss, and we’re thinking about you so very much. Your loved ones were daring and brave, and they had that special grace, that special spirit that says, “Give me a challenge, and I’ll meet it with joy.” They had a hunger to explore the universe and discover its truths. They wished to serve, and they did. They served all of us.</p>
<p>对于这七个人的家人，我们不能百分之百地像你们那样的感受这场灾难的打击。但是我们感受到了损失，我们认为你们一定也是这样。你们的亲人勇敢无畏，他们的特殊姿态和特殊精神告诉我们：“把挑战给我，我要满怀喜悦的去迎接。“他们渴望探索宇宙，渴望揭开宇宙的奥秘。他们希望尽职，他们做到了。他们为我们所有的人尽了职。</p>
<p>We‘ve grown used to wonders in this century. Its hard to dazzle us. But for twenty-five years the United States space program has been doing just that. We’ve grown used to the idea of space, and, perhaps we forget that we’ve only just begun. We’re still pioneers. They, the members of the Challenger crew, were pioneers.</p>
<p>这个世纪，我们对奇迹已习以为常。很难有什么会使我们赞叹不已。但是美国航天计划二十五年来做的正是如此。我们对太空计划已经习以为常，也许已经忘了我们不过刚刚起步。我们仍然是开拓者。他们——挑战者号全体机组人员是开拓者。</p>
<p>And I want to say something to the schoolchildren of America who were watching the live coverage of the shuttle’s take-off. I know it’s hard to understand, but sometimes painful things like this happen. It’s all part of the process of exploration and discovery. It’s all part of taking a chance and expanding man’s horizons. The future doesn’t belong to the fainthearted; it belongs to the brave.</p>
<p>The Challenger crew was pulling us into the future, and we’ll continue to follow them.</p>
<p>我要对观看航天飞机发射直播的美国学童说几句话。我知道后者难以理解，但有时像这样令人痛苦的事确实会发生。这些都是探索和发现过程的一部分。这些都是承担风险、拓展人类世界范围的一部分。未来不属于弱者，未来属于强者。挑战者号全体人员把我们推向未来，我们将继续追随他们。</p>
<p>I’ve always had great faith in and respect for our space program. And what happened today does nothing to diminish it. We don’t hide our space program. We don’t keep secrets and cover things up. We do it all up front and in public. That’s the way freedom is, and we wouldn’t change it for a minute.</p>
<p>我一直对我们的航天计划充满信心，并怀抱敬意。今天发生的悲剧决不会削弱它。我们没有隐藏自己的航天计划。我们没有保密和隐瞒。我们堂堂正正地公开实施它。这正是自由的方式，我们一分钟也不会改变它。</p>
<p>We‘ll continue our quest in space. There will be more shuttle flights and more shuttle crews and, yes, more volunteers, more civilians, more teachers in space. Nothing ends here; our hopes and our journeys continue.</p>
<p>我们将继续探索太空。我们将有更多次航天飞行，有更多宇航员，更多志愿者，更多平民，更多教师进入太空。一切都不会到此为止。我们的希望和我们的旅程不会停步。</p>
<p>I want to add that I wish I could talk to every man and woman who works for NASA, or who worked on this mission and tell them: “Your dedication and professionalism have moved and impressed us for decades. And we know of your anguish. We share it.”</p>
<p>我还想说，但愿我能和为国家航空航天局，或者为完成此次使命而工作的每一个人谈话，告诉他们：“几十年来，你们的奉献和敬业精神令我们感动，让我们铭记在心。我们了解你们的痛苦。我们感同身受。”</p>
<p>There’s a coincidence today. On this day 390 years ago, the great explorer Sir Francis Drake died aboard ship off the coast of Panama. In his lifetime the great frontiers were the oceans, and a historian later said, “He lived by the sea, died on it, and was buried in it.” Well, today, we can say of the Challenger crew: Their dedication was, like Drake’s, complete.</p>
<p>今天是一个巧合。三百九十年前的今天，伟大的探险家佛朗西斯·德雷克勋爵在巴拿马附近海面的一条船上死去。在他生活的时代，最大的疆界就是海洋。后来一位历史学家说：“他生在海边，死在海上，葬在海里。“今天我们可以这样对挑战者号乘员说：像德雷克一样，他们的奉献是毫无保留的。</p>
<p>The crew of the space shuttle Challenger honored us by the manner in which they lived their lives. We will never forget them, nor the last time we saw them, this morning, as they prepared for their journey and waved goodbye and “slipped the surly bonds of earth” to “touch the face of God.”</p>
<p>挑战者号航天飞机乘员的生命历程给我们带来荣耀，我们永远不会忘记他们，也不会忘记今天早上最后一次见到他们，那时他们正准备上路，挥手告别，“挣脱大地粗暴的束缚，去触摸上帝的脸”。</p>
<h3 id="unit-5-text-1"><a class="markdownIt-Anchor" href="#unit-5-text-1"></a> Unit 5 Text 1</h3>
<p>原文链接：<a href="http://1.116.190.31/2021/06/24/%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB%E5%9B%9B%E7%AC%AC%E4%BA%94%E5%8D%95%E5%85%83%E7%BF%BB%E8%AF%91/">快速阅读四第五单元翻译 | 吃史餐厅</a></p>
<p>We are terrible at interviewing. We walk into the interview room without preparing. We spend time worrying about “trick questions” and about what shirt we should wear, instead of the things that really matter. Worst of all, we believe an interview is intended for us to simply answer the questions that the interviewer gives us.<br />
我们不擅长面试。我们没有准备就走进了面试室。我们把时间花在担心“骗人的问题”和我们应该穿什么衬衫上，而不是真正重要的事情上。最糟糕的是，我们相信面试是为了简单地回答面试官给我们的问题。</p>
<p>I say this as someone who’s sat on both sides of the table: as a candidate, interviewing against some of the world’s toughest companies (like Google and a multi-billion-dollar hedge fund), and as a hiring manager.<br />
我这样说是因为我是一个坐在谈判桌两边的人：作为候选人，面对一些世界上最难对付的公司（比如谷歌和一家价值数十亿美元的对冲基金）进行面试，作为招聘经理。</p>
<p>Yet once you can master the interview process, you can secure job offers against other candidates who have many years more experience than you. In today’s economy, knowing how to interview is a killer skill.<br />
然而，一旦你掌握了面试流程，你就可以在其他比你有多年工作经验的应聘者面前获得工作机会。在今天的经济中，知道如何面试是一项致命的技能。</p>
<p>That starts with knowing what to avoid doing in a job interview, or what I call “5 Interview Killers.”<br />
首先要知道在面试中应该避免做什么，或者我称之为“5个面试杀手”</p>
<ol>
<li>“I just sort of… and then… and like… and uh… yeah.”</li>
<li>“我只是有点。。。然后。。。就像。。。呃。。。是的。”<br />
If you ramble, you lose.<br />
如果你漫无目的，你就输了。</li>
</ol>
<p>Think back to when you last met someone and asked them a simple question (“So, what did you do at Acme Corp?”), only to hear 6 minutes of irrelevant details. How did you feel?<br />
回想一下你上一次遇见某人的时候，问了他们一个简单的问题（“那么，你在Acme公司做了什么？”），结果只听到了6分钟不相关的细节。你感觉怎么样？</p>
<p>Now imagine this happening in a job interview. Interviewers aren’t just evaluating your technical skills. They’re using the “Airport Test,” asking themselves, ‘Could I see myself being stuck in an airport with this person?’<br />
现在想象一下在面试中会发生这样的事情。面试官不仅仅是在评估你的技术技能。他们使用“机场测试”，问自己，‘我能看到自己和这个人被困在机场吗？’</p>
<p>Like it or not, we’re evaluated on our personality as well as our skills. And if you can’t give a tight, concise answer in an interview, the interviewer will wonder if you’ll be able to do it in your job.<br />
不管你喜不喜欢，我们的个性和技能都会受到评价。如果你在面试中不能给出一个紧凑、简洁的答案，面试官会怀疑你是否能在工作中做到这一点。</p>
<ol>
<li>“Yeah, I helped out with that but it wasn’t just me.”</li>
<li>“是的，我帮了忙，但不仅仅是我。”</li>
</ol>
<p>Humility is a great trait, but going out of your way to be self-deprecating is an interview turn-off.<br />
谦虚是一种很好的品质，但刻意自嘲是一种面试障碍。</p>
<p>You should always be candid about your role, but your interviewer doesn’t care about your team dynamics or organizational chart. He wants to know what you did. He wants to know how you think. He wants to know about YOU.<br />
你应该对自己的角色坦诚相待，但面试官并不关心你的团队动态或组织结构图。他想知道你做了什么。他想知道你是怎么想的。他想了解你。</p>
<p>If you keep downplaying your accomplishments, how is a hiring manager supposed to value you enough to hire you?<br />
如果你一直贬低自己的成就，那么招聘经理应该如何重视你，让你雇佣你呢？</p>
<p>It’s okay to be proud of the work you’ve done. It’s okay to be confident. Try it: Practice saying, “I’m glad you asked about that project. I’m really proud of the results we got, including a 13% revenue increase in 6 months.” See how that makes you feel.<br />
为你所做的工作感到骄傲是可以的。自信是可以的。试试看：练习说：“我很高兴你问起那个项目。我真的为我们的业绩感到骄傲，包括6个月内13%的收入增长。</p>
<p>Does it feel uncomfortable the first time? Of course. We’re not used to talking about our accomplishments without downplaying them. But the fifth time you practice your confident answers, it will start to feel natural.<br />
第一次感觉不舒服吗？当然。我们不习惯谈论我们的成就而不轻描淡写。但是当你第五次练习自信的答案时，你会开始觉得很自然。</p>
<ol>
<li>“I left my last job because I didn’t really get along with my boss.”</li>
<li>“我辞掉了上一份工作，因为我和老板相处不好。”</li>
</ol>
<p>We’ve all had bosses from hell, but an interview is not the place to trade war stories.<br />
我们都有来自地狱的老板，但面试不是交换战争故事的地方。</p>
<p>Take the high road: “I really enjoyed working at Acme Corp. One of the things I appreciated was being able to grow my skills in email marketing, but now I’m ready to take my skills to a bigger stage. That’s why I’m excited to work with you…”<br />
走正道：“我真的很喜欢在Acme公司工作。我欣赏的一件事是能够提高我在电子邮件营销方面的技能，但现在我准备把我的技能提升到一个更大的阶段。所以我很高兴能和你一起工作……”</p>
<ol>
<li>“I work too hard.”</li>
<li>“我工作太辛苦了。”</li>
</ol>
<p>What’s your biggest weakness?<br />
你最大的弱点是什么？</p>
<p>Interviewers love to ask this question because it separates the top performers from the average workers. The most common – and worst – responses are trite: “I work too hard” or “I have trouble saying no to responsibility.”<br />
面试官喜欢问这个问题，因为它将优秀员工与普通员工区分开来。最常见也是最糟糕的回答是陈词滥调：“我工作太努力了”或者“我很难拒绝责任。”</p>
<p>Hiring managers aren’t stupid. They can see right through these canned responses.<br />
招聘经理并不愚蠢。他们能看穿这些陈腐的反应。</p>
<p>So what is the right answer to a question about your biggest weakness?<br />
那么，对于一个关于你最大弱点的问题，正确答案是什么呢？</p>
<p>Look for the “question behind the question.” What interviewers really want to know is that you’re self-perceptive enough to acknowledge your weaknesses – which we all have – and that you’ve taken recent action to improve them.<br />
寻找“问题背后的问题”。面试官真正想知道的是，你有足够的自我认知能力，能够承认自己的弱点——我们都有弱点——而且你最近采取了行动来改善这些弱点。</p>
<p>So instead of a canned answer, explain what a real weakness you have and how you’ve worked to fix it. Include specifics. Point to conferences you’ve attended or projects you’ve taken on.<br />
因此，与其给出一个固定的答案，不如解释一下你真正的弱点是什么，以及你是如何解决它的。包括细节。指出你参加过的会议或承担过的项目。</p>
<p>That’s how you answer the weakness question and nail the interview.<br />
这就是你如何回答弱点的问题和确定面试的方法。</p>
<ol>
<li>“I made 40K at my last job, so I’m really looking for something more like 50K. But you know…I’ll be willing to take 45K too.”</li>
<li>“我上一份工作挣了4万，所以我真的在找更像5万的东西。但你知道……我也愿意拿四万五千。”</li>
</ol>
<p>Your interviewer will always want to know how much you made at your last job. But it’s not your responsibility to tell them.<br />
你的面试官总是想知道你上一份工作挣了多少钱。但你没有责任告诉他们。</p>
<p>In fact, you put yourself at a severe disadvantage if they know your salary. For example, if you tell them you make $50,000, and the hiring manager was prepared to offer you $60,000, you’ve just lost thousands of dollars from one sentence.<br />
事实上，如果他们知道你的薪水，你会让自己处于非常不利的地位。例如，如果你告诉他们你赚了5万美元，而招聘经理准备给你6万美元，你一句话就损失了几千美元。</p>
<p>Even in this economy, few companies will reject you for simply not answering the salary question. That’s because it costs thousands of dollars to recruit the average candidate. If they really want you, they’ll make you an offer, and you can negotiate from there.<br />
即使在这种经济形势下，也很少有公司会因为你不回答薪水问题而拒绝你。那是因为招募一个普通的候选人要花费数千美元。如果他们真的需要你，他们会给你一个条件，你可以从那里谈判。</p>
<p>When they ask for your salary, here’s your line to use: “I’m sure we can discuss salary when the time is right, but for now I just want to see if there’s a mutual fit for you and me.”<br />
当他们要你的薪水时，你可以这样说：“我相信我们可以在合适的时候讨论薪水问题，但现在我只想看看你和我是否有共同的理想。”</p>
<p>Negotiating can be tough, but it can be worth thousands of dollars to you (here’s how to negotiate your salary the right way).<br />
谈判可能很艰难，但对你来说可能值几千美元（以下是如何以正确的方式谈判你的薪水）。</p>
<p>There you have it – 5 Interview Killers to avoid in an interview. Avoid these blunders and watch your interviewing success skyrocket.<br />
就这样——面试中要避免5个面试杀手。避免这些失误，看着你的面试成功一飞冲天。</p>
<h3 id="unit-5-text-2"><a class="markdownIt-Anchor" href="#unit-5-text-2"></a> Unit 5 Text 2</h3>
<p>原文链接：<a href="http://1.116.190.31/2021/06/24/%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB%E5%9B%9B%E7%AC%AC%E4%BA%94%E5%8D%95%E5%85%83%E7%BF%BB%E8%AF%91/">快速阅读四第五单元翻译 | 吃史餐厅</a></p>
<p>So you’ve finally made it to the “real world” and landed your first job. Congratulations! Before you dive into the working world, there are a few common pitfalls you should try to avoid. Click through to learn about the eight biggest career mistakes young professionals tend to make.<br />
所以你终于进入了“现实世界”，找到了你的第一份工作。祝贺 你！在你进入职场之前，你应该避免一些常见的陷阱。点击此处了解年轻专业人士在职业生涯中容易犯的八大错误。</p>
<p>Being Afraid to Speak Up<br />
不敢说话</p>
<p>Whether it’s asking for a raise, time off, or just voicing an opinion, it’s important to stand up for yourself in the office. The more confidence you exude, the more others will have in you, and as long as you do it in a respectful and professional way, your colleagues will be more impressed than put-off by your assertiveness. Make sure to know your worth and not let your age or inexperience dictate how others treat you.<br />
无论是要求加薪、休假，还是只是发表意见，在办公室里为自己站出来都很重要。你表现出的自信越多，别人对你的信任也就越多，只要你以一种尊重和专业的方式去做，你的同事就会对你的自信印象深刻，而不是反感。一定要知道自己的价值，不要让你的年龄或经验不足左右别人如何对待你。</p>
<p>No matter how casual your office might be, do not get fooled into thinking you can have as much fun as you want at holiday or other office parties, dinners and events. It’s fine to loosen up and get to know your coworkers outside the office – in fact, it’s actually great for relationship building – but make sure you have your wits about you. There’s nothing worse than waking up the morning after an office event regretting what you did or said.<br />
不管你的办公室有多随便，不要以为你可以在假期或其他办公室聚会、晚宴和活动中尽情享受乐趣。放松一下，在办公室外认识你的同事是可以的——事实上，这对建立人际关系很有好处——但要确保你有自己的智慧。没有什么比早上在一次办公室活动后醒来后悔你的所作所为更糟糕的了。</p>
<p>Goofing Off<br />
游手好闲</p>
<p>You may think no one is looking or particularly cares about what you’re doing all day, but if you’re like most young professionals, you sit in a cube with your computer screen visible to all who pass by. So it’s important to limit the amount of time you spend on Facebook, personal email and other non-work-related sites. Even though your boss may seem relaxed, he’s not going to appreciate an employee who seems to care more about her friend’s status updates than her actual work.<br />
你可能认为没有人在看或特别关心你整天在做什么，但如果你和大多数年轻的专业人士一样，你坐在一个立方体里，所有路过的人都能看到你的电脑屏幕。因此，限制你花在Facebook、个人电子邮件和其他与工作无关的网站上的时间是很重要的。即使你的老板看起来很放松，他也不会欣赏一个似乎更关心朋友的状态更新而不是实际工作的员工。</p>
<p>Dressing Inappropriately<br />
穿衣不当</p>
<p>Sometimes, it can be difficult to be taken seriously as a young professional. One thing that can either help or hurt you is how you present yourself. If you dress too provocatively, young or casual, you could be sending the wrong message to your coworkers. Just because you have it, doesn’t mean the office is the place to wear it. If you want to be taken seriously, dress seriously.<br />
有时，作为一个年轻的专业人士，很难被认真对待。有一件事既可以帮助你，也可以伤害你，那就是你如何展现自己。如果你穿得太挑逗、太年轻或太随便，你可能会向同事传达错误的信息。仅仅因为你有它，并不意味着办公室就是穿它的地方。如果你想被人认真对待，那就穿正经的衣服。</p>
<p>Not Networking<br />
不联网<br />
Yes, working hard and being seen as a dedicated employee is vital to your professional success, but professional relationships are just as important when it comes to getting your next job or promotion. Many young people are afraid to network and appear aggressive, but it is an established part of the working world. A good way to start is by asking your superiors whom you look up to for career guidance.<br />
是的，努力工作并被视为一名敬业的员工对你的职业成功至关重要，但在获得下一份工作或晋升时，职业关系同样重要。许多年轻人害怕与人交往，显得咄咄逼人，但这是职场的一个既定组成部分。一个好的开始方式是问你的上司你期待谁的职业指导。</p>
<p>Gossiping in the Office<br />
办公室八卦</p>
<p>While networking is the right way to build relationships, gossiping is not. Commiserating with coworkers over shared office gripes can be a great way to bond, but it’s a dangerous habit to get into and can cause friction with other colleagues. If others come to you with gossip or complaints, refrain from joining in and stay neutral. In the long run, it will serve you better to not make enemies at work.<br />
虽然网络是建立关系的正确方式，但八卦不是。对同事共同的办公室抱怨表示同情是一种很好的沟通方式，但这是一种危险的习惯，可能会引起与其他同事的摩擦。如果其他人带着闲话或抱怨来找你，不要加入，保持中立。从长远来看，不要在工作中树敌对你有好处。</p>
<p>Being Late for Work<br />
上班迟到<br />
Appearance is everything. You could be the hardest worker in the office or do extra work from home, but if you are consistently late to work, you give off the impression that you’re a slacker. People notice who stays late and who comes in early and will form an opinion about you, whether it’s accurate or not. Your professional reputation is a vital part of getting ahead in your industry and being late to work sounds trivial, but it can gradually undermine all your hard work.<br />
外表决定一切。你可能是办公室里工作最辛苦的人，或者在家里做额外的工作，但是如果你总是迟到，你就会给人一种懒汉的印象。人们注意到谁迟到，谁早来，就会对你形成一种看法，不管这种看法是否准确。你的职业声誉是在你的行业取得成功的一个重要组成部分，迟到听起来微不足道，但它会逐渐削弱你所有的努力工作。</p>
<p>Acting Entitled<br />
署名</p>
<p>Acting too confident is a common issue with young professionals. It is sometimes hard for recent college graduates to transition from top-of-the-food-chain seniors to professional “freshmen.” Now that you’re out of the collegiate bubble, you must remember to be humble and know your place in the company. Just because you might have graduated cum laude, doesn’t mean you’re too good to make photocopies, and that attitude will hurt your chances of being promoted.<br />
表现得过于自信是年轻专业人士的共同问题。对于刚毕业的大学毕业生来说，从食物链最高层的大四学生过渡到专业的“新生”有时是很困难的。现在你已经走出了大学泡沫，你必须记住要谦虚，要知道自己在公司中的地位。仅仅因为你可能以优等成绩毕业，并不意味着你太擅长复印，这种态度会损害你升职的机会。</p>
<h3 id="unit-5-text-3"><a class="markdownIt-Anchor" href="#unit-5-text-3"></a> Unit 5 Text 3</h3>
<p>原文链接：<a href="http://1.116.190.31/2021/06/24/%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB%E5%9B%9B%E7%AC%AC%E4%BA%94%E5%8D%95%E5%85%83%E7%BF%BB%E8%AF%91/">快速阅读四第五单元翻译 | 吃史餐厅</a></p>
<p>Do you want to love what you do for a living? Follow your passion. This piece of advice provides the foundation for modern thinking on career satisfaction. And this is a problem.<br />
你想热爱你的工作吗？追随你的激情。这一建议为现代职业满意度的思考提供了基础。这是个问题。</p>
<p>I’ve spent the past several years researching and writing about the different strategies we use to pursue happiness in our work. It became clear early in this process that the suggestion to “follow your passion” was flawed.<br />
在过去的几年里，我一直在研究和写作我们在工作中追求幸福的不同策略。在这个过程的早期，很明显“追随你的激情”的建议是有缺陷的。</p>
<p>The first strike against this advice is the lack of scientific evidence. Motivation and satisfaction in the workplace is a major research topic, as happy employees are better employees.<br />
反对这一建议的第一个理由是缺乏科学证据。工作中的动机和满意度是一个主要的研究课题，因为快乐的员工是更好的员工。</p>
<p>It’s difficult, however, to find studies that argue the importance of matching a work environment to a pre-existing passion. Most studies instead point to the importance of more general traits, like autonomy or a sense of competence (see, for example, the voluminous research literature on Self-Determination Theory for more on such findings).<br />
然而，很难找到研究证明将工作环境与已有激情相匹配的重要性。相反，大多数研究都指向更一般的特征的重要性，如自主性或能力感（例如，更多关于这类发现的信息，请参阅大量关于自我决定理论的研究文献）。</p>
<p>These traits are agnostic to the specific type of work performed, contradicting the idea that you must find the exact right job to be happy.<br />
这些特质与所从事的特定工作类型无关，这与你必须找到一份完全正确的工作才能快乐的想法相矛盾。</p>
<p>See also: Is happiness the secret of success?<br />
又见：幸福是成功的秘诀吗？</p>
<p>The second strike against this advice comes from the anecdotal evidence. If you study the career paths of people who end up loving their work, you’ll find that clearly identified pre-existing passions are rare.<br />
反对这一建议的第二个理由来自轶事证据。如果你研究那些最终热爱自己工作的人的职业道路，你会发现，明确确定的先前存在的激情是罕见的。</p>
<p>Some people do figure out early on what they want to do with their life, but most follow much more complicated paths on which passion emerges slowly over time.<br />
有些人确实很早就知道自己想做什么，但大多数人走的路要复杂得多，随着时间的推移，激情慢慢涌现。</p>
<p>Just because “follow your passion” is bad advice, however, doesn’t mean that you should abandon the goal of feeling passionate about your work. This reality instead emphasizes that the strategies that work are more complicated. Below are three ideas that came up often in my study of how people actually end up loving what they do.<br />
然而，仅仅因为“追随你的激情”是不好的建议，并不意味着你应该放弃对工作充满激情的目标。这种现实反而强调，有效的战略更加复杂。以下是在我的研究中经常出现的三个观点，即人们最终是如何热爱自己的工作的。</p>
<p>See also: Is workplace boredom ‘the new stress?’<br />
另见：职场无聊是“新的压力”吗?</p>
<p>Passion is earned<br />
激情是赢得的</p>
<p>Different people are looking for different things in their work, but in general, if you study people with compelling careers, they enjoy some combination of the following traits: autonomy, respect, competence, creativity, and/or a sense of impact. In other words, if you want to feel passionate about your livelihood, don’t seek the perfect job, instead seek to get more of these traits in the job you already have.<br />
不同的人在他们的工作中寻找不同的东西，但一般来说，如果你研究那些有着令人信服的职业生涯的人，他们会享受以下特质的某种组合：自主性、尊重、能力、创造力和/或影响感。换句话说，如果你想对自己的生活充满激情，就不要去寻找完美的工作，而是要在你已经拥有的工作中获得更多这些特质。</p>
<p>The problem, of course, is that these traits are rare and valuable. Just because you really want a job that allows you to autonomously tackle respected creative projects doesn’t mean that someone will hand it to you.<br />
当然，问题是，这些特征是罕见的和有价值的。仅仅因为你真的想要一份能让你自主处理受人尊敬的创造性项目的工作，并不意味着有人会把它交给你。</p>
<p>These rare and valuable traits require that you have rare and valuable skills to offer in return, and building these skills requires time and deliberate effort. If you’re unfulfilled in your current position, therefore, start by asking how you can become more valuable.<br />
这些稀有而有价值的特质要求你拥有稀有而有价值的技能作为回报，而建立这些技能需要时间和深思熟虑的努力。因此，如果你在目前的职位上没有成就感，那就先问问自己如何才能变得更有价值。</p>
<p>Passion is elusive<br />
激情难以捉摸</p>
<p>Many people develop the rare and valuable skills that can lead to passion, but still end up unhappy in their work. The problem is that the traits that might lead you to love your work are more likely to be useful to you than your organization.<br />
许多人培养出了能激发激情的稀有而宝贵的技能，但最终还是在工作中不开心。问题是，那些可能让你热爱工作的特质对你来说比你所在的组织更有用。</p>
<p>As you become increasingly valuable, for example, your boss might push you toward traditional promotions that come with more pay and more responsibility – as this is what is most useful to your company – whereas you might find more passion by leveraging your value to gain autonomy in your schedule or project selection. Getting good, in other words, is not enough by itself. You have to use your ability wisely.<br />
例如，当你变得越来越有价值时，你的老板可能会把你推向传统的晋升，这种晋升会带来更多的薪水和更多的责任——因为这对你的公司来说是最有用的——而你可能会通过利用你的价值在你的日程安排或项目选择中获得自主权而找到更多的激情。换言之，仅仅做好自己是不够的。你必须明智地运用你的能力。</p>
<p>This pattern is common in the stories of people who end up loving their work: after they develop rare and valuable skills they then use these skills as leverage to take control of their career path, often veering far off the standard trajectory. This act of leverage requires courage, but can return great rewards.<br />
这种模式在那些最终热爱自己工作的人的故事中很常见：在他们发展出稀有而有价值的技能之后，他们就利用这些技能来控制自己的职业道路，往往偏离了标准的轨道。这种杠杆行为需要勇气，但可以回报巨大的回报。</p>
<p>See also: Work skills for the ‘conceptual age’<br />
另见：概念时代的工作技能</p>
<p>Passion is dangerous<br />
激情是危险的</p>
<p>Some argue that “follow your passion” is harmless advice. If it can help even a small number of people realize that they don’t have to settle, what’s the problem?<br />
一些人认为“追随你的激情”是无害的建议。如果它能帮助一小部分人意识到他们不必解决问题，那问题是什么？</p>
<p>I disagree. I’ve watched too many of my peers fall into anxiety and chronic job-hopping due to this flawed advice. The issue is expectations. If you believe that we all have a pre-existing passion, and that matching this to a job will lead to instant workplace bliss, then reality will always pale in comparison.<br />
我不同意。我看到过太多的同龄人因为这个错误的建议而陷入焦虑和长期跳槽。问题是期望。如果你相信我们都有一种先天不足的激情，并且将这种激情与一份工作相匹配会带来瞬间的职场幸福，那么现实总是相形见绌。</p>
<p>Work is hard. Not every day is fun. Building the skills that ultimately lead to a compelling career can take years of effort. If you’re seeking a dream job, you’ll end up disappointed, again and again.<br />
工作很辛苦。不是每一天都有趣。建立技能，最终导致一个引人注目的职业生涯可能需要多年的努力。如果你正在寻找一份理想的工作，你会一次又一次地失望</p>
<p>Don’t set out to discover passion. Instead, set out to develop it. This path might be longer and more complicated than what most upbeat career guides might preach, but it’s a path much more likely to lead you somewhere worth going.<br />
不要去发掘激情。相反，我们应该着手开发它。这条路可能比大多数乐观的职业指导者所宣扬的要长，也要复杂，但这条路更有可能指引你去一个值得去的地方。</p>
<h3 id="unit-5-text-4"><a class="markdownIt-Anchor" href="#unit-5-text-4"></a> Unit 5 Text 4</h3>
<p>原文链接：<a href="http://1.116.190.31/2021/06/24/%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB%E5%9B%9B%E7%AC%AC%E4%BA%94%E5%8D%95%E5%85%83%E7%BF%BB%E8%AF%91/">快速阅读四第五单元翻译 | 吃史餐厅</a></p>
<p><strong>The Surprising Secret to Selling Yourself</strong></p>
<p>There is no shortage of advice out there on how to make a good impression – an impression good enough to land you a new job, score a promotion, or bring in that lucrative sales lead. Practice your pitch. Speak confidently, but not too quickly. Make eye contact. And for the love of Pete, don’t be modest–highlight your accomplishments. After all, a person’s track record of success (or a company’s, for that matter) is the single most important factor in determining whether or not they get hired. Or is it?<br />
在如何给人留下好印象方面不乏建议，好印象足以让你找到一份新工作，获得晋升，或者带来丰厚的销售机会。练习你的音调。说话要自信，但不要太快。眼神交流。看在皮特的份上，不要谦虚——突出你的成就。毕竟，一个人的成功记录（或者公司的成功记录）是决定他们是否被录用的最重要的因素。还是真的？</p>
<p>As it happens, it isn’t. Because when we are deciding who to hire, promote, or do business with, it turns out that we don’t like the Big Thing nearly as much as we like the Next Big Thing. We have a bias – one that operates below our conscious awareness – leading us to prefer the potential for greatness over someone who has already achieved it.<br />
但事实并非如此。因为当我们决定雇用谁、提拔谁或与谁做生意时，结果发现，我们对大事的喜爱程度几乎不如对下一件大事的喜爱程度。我们有一种偏见——一种在我们的意识下运作的偏见——导致我们更倾向于拥有伟大的潜力，而不是一个已经实现了它的人。</p>
<p>A set of ingenious studies conducted by Stanford’s Zakary Tormala and Jayson Jia, and Harvard Business School’s Michael Norton paint a very clear picture of our unconscious preference for potential over actual success.<br />
斯坦福大学的Zakary Tormala和Jayson Jia以及哈佛商学院的Michael Norton进行了一系列独创性的研究，描绘了一幅非常清晰的画面，展示了我们潜意识中对潜力的偏好，而不是对实际成功的偏好。</p>
<p>In one study, they asked participants to play the role of an NBA team manager who had the option of offering a contract to a particular player. To evaluate the player, they were given five years of excellent statistics (points scored, rebounds, assists, etc.) These statistics were described either as ones that the player had actually earned in five years of professional play, or as projections of how he was capable of playing (i.e., his potential) in his first five years.<br />
在一项研究中，他们要求参与者扮演一个NBA球队经理的角色，他可以选择向某个特定球员提供合同。为了评估球员，他们被给予了五年的优秀统计数据（得分、篮板、助攻等）。这些统计数据要么被描述为球员在五年职业生涯中实际获得的数据，要么被描述为他在前五年的能力（即他的潜力）的预测。</p>
<p>Then the “managers” were asked, “What would you pay him in his sixth year?” Those who evaluated the player with potential for greatness said they would pay him nearly a million dollars more in annual salary ($5.25 vs. $4.26 million) than those who evaluated the player with a record of actual greatness. Potential evaluators also believed their player would score more, and would be more likely to make the All-Star team.<br />
然后，“教练”们被问到，“在他第六年你会给他多少钱？”那些评价这位有潜力的球员的人说，他们给他的年薪会比那些评价这位有实际伟大记录的球员高出近100万美元（525万美元对426万美元）。潜在的评估者也相信他们的球员得分会更高，更有可能进入全明星队。</p>
<p>Tormala, Jia, and Norton found the same pattern when they looked at evaluations of job candidates. In this case, they compared perceptions of someone with two years of relevant experience who scored highly on a test of leadership achievement, versus someone with no relevant experience who scored highly on a test of leadership potential. (Both candidates had equally impressive backgrounds in every other way). Evaluators believed the candidate with leadership potential would be more successful at the new company than the candidate with a proven record of leadership ability. (Incidentally, if you ask the evaluators to tell you whose resume is more impressive, they agree that it’s the one with experience. They still prefer the other guy anyway.)<br />
托玛拉、贾和诺顿在研究求职者的评估时发现了同样的模式。在这种情况下，他们比较了有两年相关经验的人在领导力成就测试中得分较高，而没有相关经验的人在领导力潜力测试中得分较高(两位候选人在其他方面都有同样令人印象深刻的背景）。评估人员认为，有领导潜力的候选人在新公司会比有领导能力的候选人更成功(顺便说一句，如果你让评估者告诉你谁的简历更令人印象深刻，他们会同意这是一份有经验的简历。他们还是更喜欢另一个人。）</p>
<p>In other studies, the researchers showed how we prefer artwork and artists with potential to win awards over those that actually have, and prefer restaurants and chefs with the potential to be the next big thing in dining over the ones who have already made their name. In a particularly clever study, they compared two versions of Facebook ads for a real stand-up comedian. In the first version, critics said “he is the next big thing” and “everybody’s talking about him.” In the second version, critics said he “could be the next big thing,” and that “in a year, everybody could be talking about him.” The ad that focused on his potential got significantly more clicks and likes.<br />
在其他研究中，研究人员表明，我们更喜欢有潜力获奖的艺术品和艺术家，而不是那些真正获奖的人，更喜欢有潜力成为餐饮业下一个大人物的餐馆和厨师，而不是那些已经成名的餐馆和厨师。在一项特别聪明的研究中，他们比较了两个版本的Facebook广告，寻找一个真正的喜剧演员。在第一个版本中，评论家们说“他是下一个大人物”和“每个人都在谈论他”。在第二个版本中，评论家们说他“可能是下一个大人物”，“一年后，每个人都在谈论他。”这则聚焦于他潜力的广告获得了更多的点击和喜欢。</p>
<p>And this is not, incidentally, a pro-youth bias in disguise. It’s true that the person with potential, rather than a proven record, is sometimes also the younger candidate–but the researchers were careful to control for age in their studies and found that it wasn’t a factor.<br />
顺便说一句，这不是变相的亲青年偏见。诚然，有潜力的人，而不是被证实的记录，有时也是年轻的候选人-但研究人员在他们的研究中小心地控制了年龄，发现这不是一个因素。<br />
So, since preferring potential over a proven record is both risky and inherently irrational, why do we do it? According to these findings, the potential for success, as opposed to actual success, is more interesting because it is less certain. When human brains come across uncertainty, they tend to pay attention to information more because they want to figure it out, which leads to longer and more in-depth processing. High-potential candidates make us think harder than proven ones do. So long as the information available about the high-potential candidate is favorable, all this extra processing can lead (unconsciously) to an overall more positive view of the candidate (or company). (That part about the information available being favorable is important. In another study, when the candidate was described as having great potential, but there was little evidence to back that up, people liked him far less than the proven achiever.)<br />
那么，既然偏好潜力而非已证实的记录既有风险又有内在的非理性，我们为什么要这么做呢？根据这些发现，与实际成功相比，成功的潜力更有趣，因为它不太确定。当人类大脑遇到不确定性时，往往会更多地关注信息，因为他们想弄清楚它，这会导致更长更深入的处理。高潜力的候选人让我们比被证明的候选人更难思考。只要有关高潜力候选人的信息是有利的，所有这些额外的处理可以（无意识地）导致对候选人（或公司）的总体更积极的看法(关于可获得的有利信息这一部分很重要。在另一项研究中，当候选人被描述为具有巨大潜力，但几乎没有证据支持这一点时，人们对他的喜爱远远低于公认的成就者。）</p>
<p>All this suggests that you need a very different approach to selling yourself than the one you intuitively take, because your intuitions are probably wrong. People are much more impressed, whether they realize it or not, by your potential than by your track record. It would be wise to start focusing your pitch on your future, as an individual or as a company, rather than on your past – even if that past is very impressive indeed. It’s what you could be that makes people sit up and take notice – learn to use the power of potential to your advantage.<br />
所有这一切都表明，你需要一个非常不同的方法来推销自己，而不是你的直觉，因为你的直觉可能是错误的。不管人们意识到与否，人们对你的潜力的印象要比你的履历深刻得多。明智的做法是，开始把你的演讲重点放在你的未来，无论是作为一个个人还是作为一个公司，而不是你的过去——即使你的过去确实令人印象深刻。你能成为什么样的人才能让人们注意到你——学会利用你的潜能。</p>
<h3 id="unit-5-text-5"><a class="markdownIt-Anchor" href="#unit-5-text-5"></a> Unit 5 Text 5</h3>
<p>原文链接：<a href="http://1.116.190.31/2021/06/24/%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB%E5%9B%9B%E7%AC%AC%E4%BA%94%E5%8D%95%E5%85%83%E7%BF%BB%E8%AF%91/">快速阅读四第五单元翻译 | 吃史餐厅</a></p>
<p><strong>Blogs Review: The Youth Unemployment Crisis</strong></p>
<p>A) What’s at stake: The global youth unemployment rate, which was already high before the start of the Great Recession, has reached skyrocketing levels in the past two years. While youth unemployment rates have increased in almost all countries, there has been wide divergence in the size of this increase – often reflecting the country-specific aspects of the transition from school to work. For most, if not all, a serious discussion about the potential “scarring effects” induced by such a situation appears, however, warranted if we want to avoid having one generation permanently bear the burden of this crisis.<br />
A） 关键是：全球青年失业率在大萧条开始前就已经很高了，但在过去两年里已经达到了飞涨的水平。尽管几乎所有国家的青年失业率都有所上升，但这种上升的幅度却存在很大差异，这往往反映了从学校向工作过渡的具体国家方面。然而，对于大多数人（如果不是所有人的话），如果我们想避免让一代人永久地承担这场危机的重担，就有必要认真讨论这种情况可能造成的“疤痕效应”。</p>
<p>The youth unemployment bomb<br />
B) Peter Coy writes in a special Business Week report that the youth unemployment bomb is global. In Tunisia, the young people who helped bring down a dictator are called the hittistes – French - Arabic slang for those who lean against the wall. Their counterparts in Egypt are the shabab atileen, unemployed youths. In Britain, they are NEETs – “not in education, employment, or training.” In Japan, they are freeters: an amalgam of the English word freelance and the German word Arbeiter, or worker. Spaniards call them mileuristas, meaning they earn no more than 1,000 euros a month. In the U.S., they’re “boomerang” kids who move back home after college because they can’t find work.<br />
青年失业炸弹<br />
B） 彼得·科伊在《商业周刊》的一篇特别报道中写道，青年失业问题是全球性的。在突尼斯，帮助推翻独裁者的年轻人被称为希特勒——法语-阿拉伯语俚语，意为靠墙的人。他们在埃及的对手是青年党，失业青年。在英国，他们是“啃老族”——“不在教育、就业或培训领域。”在日本，他们是“自由主义者”：英语单词freelate和德语单词Arbeiter或worker的混合体。西班牙人叫他们mileuristas，意思是他们每月的收入不超过1000欧元。在美国，他们是“自食其果”的孩子，大学毕业后因为找不到工作而搬回家。</p>
<p>C) The International Labor Organization writes in its Global Employment Trends report that in 2011, 74.8 million youth aged 15-24 were unemployed, an increase of more than 4 million since 2007. The global youth unemployment rate, at 12.7 per cent, remains a full percentage point higher than the pre-crisis level. Globally, young people are nearly three times as likely as adults to be unemployed. In addition, an estimated 6.4 million young people have given up hope of finding a job and have dropped out of the labor market altogether.<br />
C） 国际劳工组织（International Labor Organization）在其《全球就业趋势》（Global Employment Trends）报告中写道，2011年，15-24岁的青年失业人数为7480万，比2007年增加了400多万。全球青年失业率为12.7%，仍比危机前高出整整一个百分点。在全球范围内，年轻人失业的可能性几乎是成年人的三倍。此外，估计有640万年轻人放弃了找工作的希望，完全退出了劳动力市场。</p>
<p>D) Zero Hedge writes that the Euro-zone youth unemployment rate is back over 22% for the first time since September 1994. David Bell and David Blanchflower point in a recent IZA paper that while youth unemployment rates have increased in almost all countries, there has been wide divergence in the size of this increase. Particularly large increases have occurred in countries that have suffered house price declines crises such as Spain, Latvia, Lithuania and Ireland. In contrast, youth unemployment has remained relatively low in Austria, Denmark, Germany and the Netherlands.<br />
D） Zero Hedge写道，欧元区青年失业率自1994年9月以来首次回升至22%以上。David Bell和David Blanchflower在最近的IZA论文中指出，尽管几乎所有国家的青年失业率都有所上升，但这一增长的规模存在很大分歧。尤其是在遭受房价下跌危机的国家，如西班牙、拉脱维亚、立陶宛和爱尔兰，房价涨幅特别大。相比之下，奥地利、丹麦、德国和荷兰的青年失业率相对较低。</p>
<p>From bad to worse<br />
E) Hanan Morsy writes in a recent issue of F&amp;D (HT Marco Annunziata) that since the global crisis began in 2008, young people have suffered a much sharper rise in joblessness than older workers. A recent OECD paper illustrates that this pattern is not unusual, as youth unemployment tends to be more responsive to the cycle than adult unemployment.<br />
每况愈下<br />
E） Hanan Morsy在最近一期F&amp;D杂志（HT Marco Annunziata）上写道，自2008年全球危机爆发以来，年轻人的失业率比老年人高出许多。经合组织（OECD）最近的一篇论文表明，这种模式并不罕见，因为青年失业率往往比成年人失业率对周期的反应更为敏感。</p>
<p>F) Marco Annunziata writes in VoxEU that the rise in youth unemployment looks largely like a reversion to the mean. The speed at which young people have been thrown out of the labor market is frightening. But equally frightening is how long Europe has lived with high youth unemployment. Implausible as it sounds, Italian voters have put up with an average youth unemployment rate of 30% for the last 40 years; Spanish voters with a rate of 32%. During the impressive years of Spanish growth, the youth unemployment rate averaged 28%; it was below 20% for just three years, with a “best performance” of 18% in 2006.<br />
F） Marco Annunziata在《VoxEU》中写道，年轻人失业率的上升在很大程度上看起来像是向平均水平的回归。年轻人被赶出劳动力市场的速度令人恐惧。但同样可怕的是，欧洲年轻人失业率居高不下的情况持续了多久。尽管听起来难以置信，但意大利选民在过去40年里忍受了平均30%的青年失业率；西班牙选民的支持率为32%。在西班牙令人印象深刻的经济增长时期，青年失业率平均为28%；仅仅三年时间，这一比例就低于20%，2006年的“最佳表现”为18%。</p>
<p>The scarring effects on a generation<br />
G) Business Week writes that when jobs do come back, employers might choose to reach past today’s unemployed and pick from the next crop of fresh-faced grads. Starting one’s career during a recession can have long-term negative consequences. Lisa B. Kahn, an economist at the Yale School of Management, estimates that for white, male college students in the U.S., a 1 percentage point increase in the unemployment rate at the time of graduation causes an initial wage loss of 6 percent to 7 percent. In a study that uses longitudinal data from Social Security records covering up to 30 years of earnings, Till von Wachter and al. (2009) present the first national estimates of the long-term cost of job displacements during the 1982 recession. They find large immediate losses in annual earnings of 30%. After 15 to 20 years, these losses are still 20% and thus represent a significant setback in workers’ lifetime resources.<br />
伤疤对一代人的影响<br />
G） 《商业周刊》写道，当工作真的回来时，雇主可能会选择接触过去的失业者，从下一批新面孔的毕业生中挑选。在经济衰退期间开始职业生涯会产生长期的负面影响。丽莎B。耶鲁大学管理学院经济学家卡恩估计，对于美国的白人男性大学生来说，毕业时失业率上升1个百分点，会导致最初的工资损失6%至7%。在一项研究中，使用了来自社会保障记录的纵向数据，涵盖了长达30年的收入，直到von Wachter和al.（2009年）提出了1982年经济衰退期间，第一次全国性的失业长期成本估计。他们发现，30%的年收益会带来巨大的直接损失。在15到20年之后，这些损失仍然是20%，因此代表着工人终生资源的重大挫折。</p>
<p>H) Steven Hill writes that studies of scars left by youth unemployment in France do not show the persistence generally found in the UK and many other countries. The author refers to a study by Mathilde Gaini, Aude Leduc and Augustin Vicard that uses the French labor force surveys for the cohorts entering the labor market between 1982 and 2009. The authors find that “unlucky” young people completing their studies during a recession have lower employment rates, are more often part-time and temporary workers, but catch-up with “lucky” one within 3 years.<br />
H） 史蒂文·希尔写道，对法国青年失业留下的伤疤的研究并没有显示出英国和其他许多国家普遍存在的持续性。作者引用了Mathilde Gaini、Aude Leduc和Augustin Vicard的一项研究，该研究使用了法国1982年至2009年间对进入劳动力市场的人群进行的劳动力调查。作者发现，在经济衰退期间完成学业的“不幸”年轻人的就业率较低，更多的是兼职和临时工，但3年内赶上“幸运儿”。</p>
<p>I) Alan Beattie writes that half of young Spaniards are not on the dole. The unemployment rate doesn’t measure the percentage of people of a given age–in this case 15-24–who want a job and can’t get one. It measures those people as a percentage of the labor force–people either in employment or searching for a job–and ignores all those in education or training. In Spain that’s quite a big difference: recession or no, a lot of Spaniards go to college and often take a long time to get round to graduating. A better measure of the failure to create jobs is the percentage of young people aged 15-24 that are not in employment, education or training (NEETs). According to that measure Spain is towards the top, but only a few percentage points above the EU average and actually below the OECD average. Greece shows a similar pattern.<br />
I） 艾伦·比蒂写道，一半的西班牙年轻人没有领取救济金。失业率并不能衡量某一特定年龄段（本例中为15-24岁）想要工作却找不到工作的人的百分比。它将这些人作为劳动力的一个百分比来衡量——就业或找工作的人——而忽略了所有接受教育或培训的人。在西班牙，这是一个很大的区别：不管经济衰退与否，很多西班牙人上大学，往往要花很长时间才能毕业。衡量未能创造就业机会的一个更好的标准是15-24岁的年轻人中没有就业、没有接受教育或培训的比例。根据这一衡量标准，西班牙已接近榜首，但只比欧盟平均水平高出几个百分点，实际上低于经合组织的平均水平。希腊也表现出类似的模式。</p>
<p>German exceptionalism and emigration as a safety valve<br />
J) Marco Annunziata writes that Germany’s youth also have a higher unemployment rate than older generations, but their rate is just over 8%. Germany’s better coordination between the school system and industry, including via its apprenticeship programmes, pays off.<br />
德国例外论与移民安全阀<br />
J） Marco Annunziata写道，德国年轻人的失业率也高于老一辈，但他们的失业率仅略高于8%。德国在学校系统和工业之间更好的协调，包括通过其学徒计划，是值得的。</p>
<p>K) Gerrit Wiesmann notes in the FT that youth unemployment in Germany has hovered two to three points above total unemployment, while in France or Spain it has regularly run at two or three times the jobless rate. The decades-old commitment of bosses and teenagers to the German vocational training system is widely regarded as the secret behind the country’s relatively low youth unemployment rate. The German apprenticeship programme–Duales Ausbildungs system, or dual training system (the name refers to its mix of book learning and hands-on experience)–which dates back to an overhaul of vocational training in 1969 but has roots in old guild system has led the US, India and other countries to study it as a possible model for their own policies. But it has proved difficult to copy.<br />
K） Gerrit Wiesmann在英国《金融时报》上指出，德国的青年失业率比总失业率高出2到3个百分点，而在法国或西班牙，青年失业率通常是失业率的2到3倍。老板和青少年对德国职业培训体系几十年的承诺被广泛认为是德国相对较低的青年失业率背后的秘密。德国学徒制计划（Duales ausbuldungs system，或dual training system，其名称是指其书本学习和实践经验的结合）可以追溯到1969年对职业培训的全面改革，但其根源是美国领导的旧行会制度，印度和其他国家将其作为研究本国政策的可能模式。但事实证明很难复制。</p>
<p>L) Jamie Smyth writes that emigration is back with a vengeance in Ireland. Last year 76,400 people emigrated, bringing the number of people who have left the country since the Irish recession began to 250,000. Peter Wise writes that with an estimated 120,000-150,000 people leaving a country of 10m last year, emigration has now surged back to the peak levels of the 1960s and 1970s in Portugal, when waves of impoverished workers departed for northern Europe and the Americas. The difference this time is that, unlike the largely uneducated workforce that left then, many of today’s migrants are young graduates with university degrees.<br />
L） 杰米·斯迈思写道，移民潮在爱尔兰卷土重来。去年有76400人移民，使爱尔兰经济衰退开始以来离开该国的人数达到250000人。彼得·怀斯写道，去年估计有120000-150000人离开一个1000万人口的国家，现在葡萄牙的移民人数已经激增到1960年代和1970年代的峰值水平，当一批批贫困工人离开欧洲北部和美洲时。这次的区别在于，与当时大部分没有受过教育的劳动力不同的是，如今的许多移民都是拥有大学学位的年轻毕业生。</p>
<h3 id="自测阅读-test-1-4-text-1"><a class="markdownIt-Anchor" href="#自测阅读-test-1-4-text-1"></a> 自测阅读 Test 1-4 Text 1</h3>
<p>原文链接：<a href="http://1.116.190.31/2021/06/24/%E5%A4%A7%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%9B%9B%E8%87%AA%E6%B5%8B%E9%98%85%E8%AF%BB%E7%BF%BB%E8%AF%91/">大学英语四自测阅读翻译 | 吃史餐厅</a></p>
<p>The interview is an important event in the job-hunting process because the 20 or 30 minutes you spend with the interviewer may decide whether or not you get the particular job you want. Therefore it is important to remember that your purpose during the interview may differ from that of the potential employer. You want to make yourself stand out as a whole person who has personal strengths and should be considered the right person for the job. It is encouraging to know that the interviewer’s task is not to embarrass you but to hire the right person for the job.<br />
面试在求职过程中是一个重要的事件，因为你和面试官在一起的20或30分钟可能会决定你是否能得到你想要的工作。因此，记住你在面试时的目的可能和潜在雇主的不同是很重要的。你想让自己作为一个拥有个人优势的人脱颖而出，并且被认为是这份工作的合适人选。令人鼓舞的是，面试官的任务不是让你难堪，而是要雇用适合这份工作的人。</p>
<p>Remember job-hunting is very competitive. Anything you can do to improve your interview techniques will be to your advantage. The following suggestions may help you land the most important job.<br />
记住，求职竞争非常激烈。任何可以提高面试技巧的事情都会对你有利。以下建议可能会帮助你找到最重要的工作。</p>
<p>Your goal in this interview is to make sure your good points get across. The interviewer won’t know them unless you point them out so try to do this in a factual and sincere manner.<br />
在这次面试中 ， 你的目标是确保你的观点被接受。面试官不会了解这些观点 ， 除非你指出来 ， 所以试着以真实和真诚的方式去表达。</p>
<p>Don’t say anything bad about your former employers. If you have been fired from a job and the interview asks about it be honest.<br />
不要说你以前雇主的坏话。如果你被解雇了 ， 面试官会问你是否诚实。</p>
<p>Show the interviewer that you are interested in the company by asking questions. Ask about responsibilities working conditions promotion opportunities and benefits of the job you are interviewing for.<br />
通过提出问题向面试官表明你对公司感兴趣。询问责任、工作条件、晋升机会和应聘工作的好处。</p>
<p>If at some point you decide the interview is not going well do not let your discouragement show. You have nothing to lose by continuing a show of confidence and you many have much to gain. It may be real or it may be a test to see how you react to adverse conditions.<br />
如果在某个时候你觉得面试不太顺利，不要表现出你的沮丧。继续展现自信不会有什么损失，你们会收获很多。它可能是真实的，也可能是一个测试，看看你如何应对不利条件。</p>
<p>Some interviewers may bring up salary early in the interview. At this time you may indicate that you are more interested in a job where you can prove yourself than a specific salary. This politely passes the question back to the interviewer. If possible you should negotiate for salary after you have been offered a job and have completed the paperwork.<br />
有些面试官可能会在面试中提前提到薪水问题。在这种情况下，你可能会表示你更感兴趣的是一份能证明你自己的工作，而不是一份具体的薪水。这样可以礼貌地把问题传回面试官。<u>如果可能的话 ， 在你得到一份工作并完成了文书工作之后 ， 你应该就工资问题进行谈判。</u>(即拿到offer、签了合同，立马谈工资问题)</p>
<h3 id="自测阅读-test-1-4-text-2"><a class="markdownIt-Anchor" href="#自测阅读-test-1-4-text-2"></a> 自测阅读 Test 1-4 Text 2</h3>
<p>原文链接：<a href="http://1.116.190.31/2021/06/24/%E5%A4%A7%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%9B%9B%E8%87%AA%E6%B5%8B%E9%98%85%E8%AF%BB%E7%BF%BB%E8%AF%91/">大学英语四自测阅读翻译 | 吃史餐厅</a></p>
<p>Like many other small boys, I was fascinated by cars, not least because my oldest brother was a bit of a car guy and subscribed to cool magazines like Car and Driver and Motor Trend. Every so often, one of those magazines would run an article on the “Car of the Future”. They featured unconventional styling and things like small nuclear reactors as power sources. Yet, frankly, my car doesn’t do anything that my brother’s Studebaker didn’t do. It goes, it stops, it burns gasoline, it plays music. I still have to steer it, and it still runs into things if I don’t steer it carefully.<br />
像许多其他的小男孩一样 ， 我对汽车着迷 ， 不仅仅是因为我的大哥是个车迷 ， 他订阅了一些很酷的杂志 ， 比如《汽车与司机》和《汽车趋势》。 这些杂志中的一份经常会刊登一篇关于 “未来之车” 的文章。 它们以非常规的造型和小型核反应堆作为动力来源。 坦白说 ， 我的车不会做我哥哥的斯图贝克没做过的事。 它会走，会停，需要燃烧汽油，可以播放音乐。我仍然要操纵它，如果我不小心驾驶，它还是会撞上东西。</p>
<p>But guess what? All of these things are subject to change in the not-so-distant future. It will still go and stop, but it may not burn gasoline, I may not have to steer it, and it may be a lot better at not running into things.<br />
但你猜怎么着？在不远的将来，所有这些都可能发生改变。它仍然会走，会停，但它可能不需要燃烧汽油，我可能不需要驾驶它，而且它在不撞到东西方面可能要好得多。</p>
<p>Airbags aren’t the be-all and end-all in safety. In fact, considering the recent news about people occasionally being killed by their airbags in low-speed collisions (碰撞),they obviously still need some development. But they aren’t going away, and in fact, you can expect to see cars appearing with additional, side-impact airbags, something some European car manufacturers already offer.<br />
安全气囊并不是万能的。事实上，考虑到最近关于人们偶尔会在低速碰撞中被安全气囊撞死的新闻，这些技术显然还需要进一步发展。但它们并没有消失，事实上，你可以期待看到有附加的侧面碰撞安全气囊出现的汽车，一些欧洲汽车制造商已经提供了。</p>
<p>Better than systems to minimize (使减少到最低限度) injury in the event of an accident,however, are systems that minimize the likelihood of an accident happening in the first place. Future cars may be able to eliminate many of the major causes of accidents, including drunk-driving,tailgating (与前车距离过近) and sleepiness. Cars could be equipped with sensors that can detect alcohol in a driver’s system and prevent the car from being started, for example. Many accidents are caused by people following the car in front too closely. As early as next year, you’ll be able to buy cars with radar-equipped control systems. If the radar determines you’re closing too quickly with the car in front, it will ease up on the throttle (油门). For city streets, expect other radar devices that will give advance warning that the car in front of you has slowed abruptly (突然地) and you should step on the brakes-or that may even brake for you.<br />
然而 ， 最小化事故发生可能性的系统要比在事故发生时最小化伤害的系统好。 未来的汽车可能能够消除许多主要的事故原因 ， 包括酒后驾车、尾随和嗜睡。 例如 ， 汽车可以配备传感器 ， 可以检测驾驶员系统中的酒精含量 ， 防止汽车起动。 许多事故是由人们紧跟在前面的汽车后面造成的。 最早在明年 ， 你就能买到装有雷达控制系统的汽车。 如果雷达发现你的车开得太快 ， 油门就会松开。在城市街道上，其他雷达设备会提前警告你前面的车突然减速，你应该踩刹车，或者甚至会为你刹车。</p>
<p>Will cars eventually be able to drive themselves? There’s no reason to think it won’t be technically possible, and Mercedes is working on a system that can brake, accelerate and steer a vehicle down a highway on its own. Nobody really expects people to give up all control to their cars, but such systems could be used as failsafe systems to keep cars on the road and bring them safely to a stop even if the driver suddenly became disabled.<br />
汽车最终能自动驾驶吗?没有理由认为这在技术上是不可能实现的，奔驰正在研发一种能够自动刹车、加速和驾驶的系统。没有人真正希望人们放弃对汽车的所有控制，但这样的系统可以作为故障安全系统，使汽车保持在道路上，并使他们安全停车，即使司机突然变得残疾。</p>
<h3 id="自测阅读-test-5-8-text-1"><a class="markdownIt-Anchor" href="#自测阅读-test-5-8-text-1"></a> 自测阅读 Test 5-8 Text 1</h3>
<p>原文链接：<a href="http://1.116.190.31/2021/06/24/%E5%A4%A7%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%9B%9B%E8%87%AA%E6%B5%8B%E9%98%85%E8%AF%BB%E7%BF%BB%E8%AF%91/">大学英语四自测阅读翻译 | 吃史餐厅</a></p>
<p>I study political violence for a living., yet I, too, am shaken and unsure how to react. As I sit here today in my office, only a few miles from the still-burning Pentagon, images of the slaughter in my native New York dominate my thoughts. It makes it hard to concentrate on work, and it makes the everyday things seem so trivial. Only now, twenty-four hours after the tragedy began to unfold, have I begun to realize how this has affected me on so many levels.<br />
我以研究政治暴力为生。然而，我也很震惊，不知道该如何反应。今天，当我坐在我的办公室里，距离仍在燃烧的五角大楼只有几英里的时候，我的脑海里充斥着发生在我的家乡纽约的屠杀画面。它让人很难集中精力工作，让日常的事情看起来如此琐碎。直到现在，在悲剧开始发生24小时后，我才开始意识到这件事对我的影响有多么深远。</p>
<p>As an American, I feel threatened and confused, where only yesterday I felt proud and invincible. As a citizen of the global community, I have been shocked into the reality of the reach of global terrorism. As a human being, I am appalled at the cruelty and inhumanity of these acts of terrorism. As someone who hopes to understand unspeakable acts, I am at a loss to understand this one, perhaps because it hits so close to home.<br />
作为一个美国人，我感到威胁和困惑，而就在昨天，我还感到自豪和不可战胜。作为国际社会的一名公民，我对全球恐怖主义蔓延的现实感到震惊。作为一个人，我对这些恐怖主义行为的残忍和不人道感到震惊。作为一个希望理解这些难以形容的行为的人，我无法理解这一次，也许是因为它离家太近了。</p>
<p>I know only these things: Someone, for some reason, has decided to strike at the United States. Despite the many people killed, the intended target of this attack was American power. The goal was to strike a paralyzing fear into the hearts and minds of all citizens of the U.S., and perhaps its allies as well. Thus, we—all of us— are the real targets of this attack. This explains why many of us, even those of us who were not near the attacks, or who knew no one affected by them, felt this tragedy so deeply.<br />
我只知道这些事：有人，出于某种原因，决定袭击美国。尽管有许多人丧生，这次袭击的预定目标是美国的力量。这样做的目的是让所有美国公民，甚至是美国的盟友，在他们的内心和思想中都产生一种麻痹性的恐惧。因此，我们——我们所有人——都是这次袭击的真正目标。这就解释了为什么我们中的许多人，甚至我们中那些没有接近袭击，或不知道谁受到影响的人，深深感受到这场悲剧。</p>
<p>Yet we must not succumb to fear, for if we do the terrorists have won. Surely our lives will be different now. We may be more aware, more inconvenienced, more insecure. But we must learn to deal with this tragedy and to move on, to live our lives as fully and as entirely as before. I came to my office today, even though classes here have been cancelled, to live my life as normally as possible, for to do so in the face of yesterday ’s terrorist attacks is itself an act of defiance.<br />
然而，我们绝不能屈服于恐惧，因为如果我们屈服，恐怖分子就赢了。我们现在的生活肯定会有所不同。我们可能会更清醒，更不方便，更不安全。但我们必须学会处理这一悲剧，继续前进，像以前一样充实、完整地生活。我今天来到我的办公室，尽管这里的课程已经取消了，但我要尽可能过正常的生活，因为面对昨天的恐怖袭击，我这样做本身就是一种蔑视。</p>
<h3 id="自测阅读-test-5-8-text-2"><a class="markdownIt-Anchor" href="#自测阅读-test-5-8-text-2"></a> 自测阅读 Test 5-8 Text 2</h3>
<p>原文链接：<a href="http://1.116.190.31/2021/06/24/%E5%A4%A7%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%9B%9B%E8%87%AA%E6%B5%8B%E9%98%85%E8%AF%BB%E7%BF%BB%E8%AF%91/">大学英语四自测阅读翻译 | 吃史餐厅</a></p>
<p>Gray clouds move as low as smoke over the treetops at Lolo Pass. The ground is white. The day is June 10. It has been snowing for the past four days in the Bitterroot Mountains. Wayne Fairchild is getting worried about our trek over the Lolo Trail—95 miles from Lolo Montana to Weippe in Idaho, across some of the roughest country in the West. Lewis and Clark were nearly defeated 200 years ago by snowstorms on the Lolo. Today Fairchild is nervously checking the weather reports. He has agreed to take me across the toughest, middle section of the trail—“but with this weather? ’’ When Lewis climbed atop Lemhi Pass, 140 miles south of Missoula, on Aug. 12, 1805, he was astonished by what was in front of him: “immense ranges of high mountains still to the West of us with their tops partially covered with snow” Nobody in what was then the US knew the Rocky Mountains existed, with peaks twice as high as anything in the Appalachians back East. Lewis and Clark weren’t merely off the map; they were traveling outside the American imagination.<br />
白云像烟雾一样在洛洛帕斯的树梢上移动。 地面是白色的。 今天是 6 月 10 日，过去四天比特罗山一直在下雪。韦恩·费尔奇尔德（Wayne Fairchild）开始担心我们徒步穿越洛洛小径（Lolo Trail）——从洛洛蒙大拿州（Lolo Montana）到爱达荷州（Idaho）的韦佩（Weippe）95英里，穿越西部一些最崎岖的国家。 200 年前 ， 刘易斯和克拉克差点被洛罗河上的暴风雪打败。今天费尔柴尔德紧张地查看天气预报。 他同意带我穿过这条小路中最艰难的一段——“但是在这种天气下呢？”，1805年8月12日，当刘易斯爬上米苏拉以南140英里的莱米山口（Lemhi Pass）山顶时，他对眼前的景象感到惊讶：“西边仍有大片的高山 ， 山顶部分覆盖着雪。”当时的美国没有人知道落基山脉的存在 ， 那里的山峰是东部阿巴拉契亚山脉的两倍。 刘易斯和克拉克不仅不在地图上 ， 他们的旅行超出了美国人的想象。</p>
<p>Today their pathway through those mountains holds more attraction than any other ground over which they traveled, for its raw wilderness is a testimony to the character of two cultures: the explorers who braved its hardships and the Native-Americans who prize and conserve the path as a sacred gift. It remains today in virtually the same condition as when Lewis and Clark walked it.<br />
今天，他们穿越这些山脉的道路比他们所走过的任何其他地方都更具吸引力，因为它原始的荒野证明了两种文化的特征：一种是敢于冒险的探险家，另一种是珍视和保护这条道路作为神圣礼物的美洲土著人。今天，它实际上仍然保持着刘易斯和克拉克行走时的状态。</p>
<p>The Lolo is passable only from July to mid-September. Our luck is holding with the weather, although the snow seeps getting deeper. As we climb to Indian Post office, the highest point on the trail at 7,033 ft., the drifts are 15 ft, and up. We have covered 12 miles in soft snow, and we barely have enough energy to make dinner. After a meal of chicken and couscous, I sit on a rock on top of the ridge. There is no light visible in any direction, not even another campfire. For four days we do not see another human being. We are isolated in a way that mixes fear with joy. In our imagination we have finally caught up with Lewis and Clark.<br />
洛洛只能从7月到9月中旬通行。尽管雪越来越深， 但我们的运气与天气息息相关。当我们爬到印地安邮局时，足迹的最高点是 7033 英尺 ， 漂移的高度是 15 英尺，而且还在上升。我们在松软的雪地里走了12英里，几乎没有足够的精力做饭。吃完鸡肉和粗麦粉，我坐在山脊上的一块石头上。任何方向都看不见光，甚至连另一个营火也看不见。整整四天我们都没有看到其他人。我们在某种程度上被孤立，恐惧与喜悦交织在一起。 在我们的想象中我们终于赶上了刘易斯和克拉克。</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理期末不挂科指南</title>
    <url>/2021/06/28/compiler/</url>
    <content><![CDATA[<h2 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h2>
<p><strong>编译器与解释器区别和联系：</strong></p>
<ol>
<li>解释器不像编译器通过翻译来生成目标程序，而是直接执行源程序所指定的运算。</li>
<li>编译器会保存生成的目标程序，执行速度较快；解释器不会保存生成的目标程序，执行速度较慢。</li>
<li>编译器生成目标程序，且与平台相关；解释器不生成目标程序，与平台无关。</li>
</ol>
<p><strong>编译器的结构：分析部分+综合部分</strong></p>
<p>编译程序的输入数据是<strong>源程序,</strong> 输出结果是<strong>目标程序</strong></p>
<p>编译程序的工作过程一般可以划分为词法分析,语法分析,语义分析,中间代码生成,代码优化,目标代码生成等几个基本阶段,同时还会伴有符号表管理和出错管理。</p>
<p>词法分析：输入<strong>源程序的字符</strong>，输出<strong>词法单元流</strong></p>
<p>语法分析：输入<strong>词法记号流</strong>，输出<strong>语法短语树</strong></p>
<p>语义分析：检查程序的语义正确性，以保证程序各部分能有意义地结合在一起，为后面代码生成阶段收集类型信息。</p>
<p><strong>中间代码表示形式：后缀表示，抽象语法树，三地址码</strong></p>
<p><strong>推导</strong>：符号串中的非终结符用其产生式右部的串来代替</p>
<p><strong>最左（右）推导</strong>：每次直接推导均替换句型中最左（右）边的非终结符</p>
<p>**二义性：**某个句子不止一棵分析树，或者说这个句子存在不止一种最左（最右）推导</p>
<p><strong>规约</strong>：若一个子串和某个产生式的右部匹配，则用该产生式的左部符号代替这个子串。</p>
<p>句型的<strong>句柄</strong>是和某产生式右部匹配的子串。</p>
<blockquote>
<p>句柄的<strong>右边仅含终结符</strong></p>
</blockquote>
<p><strong>移进-归约语法分析</strong>的四种动作：</p>
<ul>
<li><strong>移进</strong>：把下一个输入符号移进栈</li>
<li><strong>归约</strong>：分析器知道句柄的右端已在栈顶，然后确定句柄的左端在栈中的位置，再决定用什么样的非终结符代替句柄</li>
<li><strong>接受</strong>：分析器宣告分析成功</li>
<li><strong>报错</strong>：分析器发现语法错误，调用错误恢复例程</li>
</ul>
<p><strong>移进-归约语法分析</strong>的冲突：</p>
<ul>
<li>移进-归约冲突</li>
<li>归约-归约冲突</li>
</ul>
<p><strong>可行前缀</strong>：右句型的前缀，该前缀不超过最右句柄的右端</p>
<p><strong>LR文法</strong>    vs    <strong>LL文法</strong></p>
<ul>
<li>LR(K)文法:向前看k个输入符号能够知道一个产生式的右部所能推导出的所有符号串，进而识别出这个产生式右部的出现。</li>
<li>LL(K)文法：看到了产生式右部推出的前k个符号后能够识别出用于归约的产生式。</li>
<li>LR文法比LL文法描述的语言更多，但手工构造分析表的工作量太大</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">区别</th>
<th style="text-align:center">LR(1)方 法</th>
<th style="text-align:center">LL(1)方 法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">建立分析树的方式</td>
<td style="text-align:center">自下而上</td>
<td style="text-align:center">自上而下</td>
</tr>
<tr>
<td style="text-align:center">归约还是推导</td>
<td style="text-align:center">规范归约</td>
<td style="text-align:center">最左推导</td>
</tr>
<tr>
<td style="text-align:center">决定使用产生式的时机</td>
<td style="text-align:center">看见产生式右部推出的<strong>整个终结符串</strong>后，才确定用哪个产生式进行归约</td>
<td style="text-align:center">看见产生式右部推出的<strong>第一个终结</strong>符后，便要确定用哪个产生式推导</td>
</tr>
<tr>
<td style="text-align:center">对文法的显式限制</td>
<td style="text-align:center">对文法没有限制</td>
<td style="text-align:center">无左递归、无公共左因子</td>
</tr>
<tr>
<td style="text-align:center">分析表比较</td>
<td style="text-align:center">状态×文法符号<br />分析表大</td>
<td style="text-align:center">非终结符×终结符<br />分析表小</td>
</tr>
<tr>
<td style="text-align:center">分析栈比较</td>
<td style="text-align:center">状态栈，通常状态比文法符号包含更多信息</td>
<td style="text-align:center">文法符号栈</td>
</tr>
<tr>
<td style="text-align:center">确定句柄</td>
<td style="text-align:center">根据栈顶状态和下一个符号便可以确定句柄和归约所用产生式</td>
<td style="text-align:center">无句柄概念</td>
</tr>
<tr>
<td style="text-align:center">语法错误</td>
<td style="text-align:center">决不会将出错点后的符号移入分析栈</td>
<td style="text-align:center">和LR一样，决不会读过出错点而不报错</td>
</tr>
</tbody>
</table>
<p>其余详见PDF版 <a href="https://get.holgerbest.top/data/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.pdf">编译原理-词法分析与语法分析</a></p>
<blockquote>
<p>TODO：第五、六章</p>
</blockquote>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>大英 4 段落翻译</title>
    <url>/2021/06/27/college-english-4-translation/</url>
    <content><![CDATA[<h3 id="unit-1"><a class="markdownIt-Anchor" href="#unit-1"></a> UNIT 1</h3>
<p>攻势已经持续了三天, 但是我们并没有取得多少进展。师长命令我们营绕到敌人后方发起突然袭击。然而,要绕到敌人后方, 我们必须越过一片沼泽地。我们很多人担心会陷入泥潭之中。我们营长决定冒一下险。我们在夜幕掩盖下出发, 不顾困难, 奋勇向前。所幸由于寒冷天气沼泽地都结上了冰。我们于天亮前到达目的地并从敌人后方发起进攻。这一下扭转了战局。敌人没有戒备, 不久便投降了。</p>
<p>The <strong>offensive</strong> had lasted three days, but we had not <strong>gained much ground</strong>. The division commander <strong>instructed</strong> our battalion to <strong>get around to</strong> the <strong>rear</strong> of the enemy at night and <strong>launch a surprise attack</strong>. To do so, however, we have to cross a <strong>marshland</strong>, and many of us were afraid we might <strong>get bogged down</strong> <strong>in the mud</strong>. Our battalion commander decided to <strong>take a gamble</strong>. Luckily enough, thanks to the <strong>severely</strong> cold weather which made the marshland <strong>freeze over</strong>, we arrived our destination <strong>before dawn</strong> and began <strong>attacking</strong> the enemy <strong>from the rear</strong>. This <strong>turned the tide of the battle</strong>. The enemy, <strong>caught off guard</strong>, soon <strong>surrendered</strong>.</p>
<h3 id="unit-2"><a class="markdownIt-Anchor" href="#unit-2"></a> UNIT 2</h3>
<p>汽车自从发明以来使交通运输发生了革命性变化, 永远的改变了人们的生活、旅行和办事的方式。但另一方面, 也带来了危害, 尤其是公路死亡事故。然而现今由于计算机技术和电子传感器的使用, 有可能消除发生的大多数交通事故。例如, 装在你汽车上的电子传感器能检测到空气中酒精雾气并拒绝启动引擎。同样, 传感器还能通过接受在轨道上运行的卫星发出的信号监测路况并大大减少你陷入交通拥堵的可能性。</p>
<p><strong>Automobiles have, since their invention, revolutionized transportation, changing forever the way people travel, and do business.</strong> On the other hand, they have <strong>brought hazards</strong>, especially highway <strong>fatalities</strong>. However, today <strong>the application of computer technology and electronic sensors</strong> in designing and manufacturing cars makes it possible to <strong>eliminate</strong> most of traffic accidents. For example, electronic sensors <strong>mounted</strong> in your car can <strong>detect alcohol vapor</strong> in the air and refuse to start up the engine. They can also <strong>monitor road conditions</strong> by <strong>receiving radio signals</strong> sent out from <strong>orbiting satellites</strong> and greatly <strong>reduce your chances</strong> of <strong>getting stuck in</strong> traffic jams.</p>
<h3 id="unit-3"><a class="markdownIt-Anchor" href="#unit-3"></a> UNIT 3</h3>
<p>1.1）常言道，好的开端是成功的一半。<br />
1.1) Well begun is half done, as the saying <strong>goes</strong>.</p>
<p>1.2）在求职时，求职者事先做好充分的准备是非常重要的。<br />
1.2）It is <strong>extremely</strong> important for <strong>a job applicant</strong> to do his homework while <strong>seeking</strong> employment.</p>
<p>1.3）我认为，事先做不做准备显然会影响求职者的成功机会。<br />
1.3) From my standpoint, whether or not one <strong>has done</strong> his homework   clearly <strong>makes</strong> a difference   in his chance of <strong>success</strong>.</p>
<p>2.1）我的一位朋友在一家大型计算机软件公司供职，年薪十万美元左右。<br />
2.1) <strong>I have a friend</strong>   who is earning somewhere in the neighborhood of 100,000 dollars   a year   in a large computer software company.</p>
<p>2.2）他根据自己的经历告诉我说，<strong>那些</strong>面试未来雇员的<strong>具有录用决定权的人</strong>喜欢有充分准备的人。<br />
2.2) He told me   from his own experience   that   <strong>the decision makers</strong>   who interview prospective employees    <strong>like</strong> people who are well prepared.</p>
<p>2.3）<strong>那些</strong>没有在了解未来雇主方面尽全力的<strong>人</strong>很难有成功的希望。<br />
2.3) <strong>Those</strong> <strong>who</strong> make no endeavor to learn as much about his prospective employer as possible   <strong>don’t have</strong> much of a chance of success.</p>
<h3 id="unit-4"><a class="markdownIt-Anchor" href="#unit-4"></a> UNIT 4</h3>
<p>1   全球化对中国年轻人具有重大影响。<br />
2   例如，年轻的农民正在大规模流向城市寻找工作。<br />
3   而对那些想出国深造或进外企工作的年轻人说，英语变得越来越重要。<br />
4   另外一方面，许多海外学子近年来回归祖国，因为他们看好中国经济的长期增长前景。<br />
5   因特网加强了中国年轻人与其他地方年轻人的联系。<br />
6   他们跟踪最新潮流，模仿外国时尚。<br />
7   他们中的一些人似乎不在乎中国的传统美德，更不要说发扬光大，这使得有人忧虑中国传统文化会不会有一天终将消失。</p>
<p>1   Globalization has great <strong>implications</strong> for young Chinese.<br />
2   For example, young farmers <strong>are moving</strong> <strong>on a large scale</strong> to urban areas to look for jobs.<br />
3   And for those young people who <strong>aspire</strong> to study abroad or work in <strong>foreign-invested enterprises</strong>, English has become <strong>increasingly</strong> important.<br />
4   At the same time, a <strong>considerable</strong> number of overseas Chinese students have returned home in recent years, for they hold an <strong>optimistic</strong> <strong>outlook</strong> for the long-term <strong>growth</strong> of the Chinese <strong>economy</strong>.<br />
5   <strong>The</strong> Internet has <strong>strengthened</strong> the links between Chinese young people and <strong>those elsewhere</strong>.<br />
6   They follow the <strong>latest</strong> trend and copy foreign fashions.<br />
7   Some of them don’t seem to care <strong>for</strong> traditional Chinese <strong>virtues</strong>, <strong>let alone</strong> <strong>carry them forward</strong>, which has <strong>given rise to</strong> worries <strong>that</strong> the traditional Chinese culture <strong>might</strong> one day <strong>vanish</strong>.</p>
<h3 id="unit-5"><a class="markdownIt-Anchor" href="#unit-5"></a> UNIT 5</h3>
<p>1   就我来说，我发现外表往往是靠不住的。<br />
2   譬如，要是你仅凭外表去判断诸如爱德华·海德·伯顿这样的人，你就错了。<br />
3   外表上，伯顿像是个表里一致的人。<br />
4   他个子很小，满头白发，有着一双温和、蔚蓝的眼睛，文雅且坦率。<br />
5   然而，他原来却是十分的残忍。<br />
6   他侮辱和愚弄穷困潦倒的伦尼，让他去做那样的蠢事。<br />
7   更让人吃惊的是，他对伦尼的死全然冷漠无情。<br />
8   毫无疑问，他是个铁石心肠的家伙。</p>
<p>1   <strong>For my own part</strong>, I find that appearance<strong>s</strong> are <strong>all too</strong> often <strong>deceptive</strong>.<br />
2   For instance, you might be wrong if you judged only by appearances people like Edward Hyde Burton.<br />
3   <strong>In</strong> appearance, he seemed a man <strong>all of a piece</strong>.<br />
4   He was a tiny little fellow with white hair and <strong>mild</strong> blue eyes, gentle and <strong>candid</strong>.<br />
5   <strong>Nevertheless</strong>, he turned out to be very cruel.<br />
6   He insulted and fooled Lenny who was <strong>down and out</strong> and made him <strong>commit himself to</strong> an <strong>insane</strong> <strong>venture</strong>.<br />
7   What was still more surprising was that he was completely <strong>indifferent to</strong> Lenny’s death.<br />
8   Without doubt, Burton was a man <strong>with</strong> a heart of stone.</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成知识点 - 指令系统</title>
    <url>/2021/07/02/computer-ch5/</url>
    <content><![CDATA[<h2 id="指令格式"><a class="markdownIt-Anchor" href="#指令格式"></a> 指令格式</h2>
<p>一条指令包括两种信息：</p>
<ul>
<li><strong>操作码</strong>（operation code）：用来表示指令所要完成的操作(如加、减、乘、除、数据传送等)，其长度取决于指令系统中指令的条数。</li>
<li><strong>地址码</strong>：用来描述指令的操作对象。或者直接给出操作数、或者指出操作数的存储地址或寄存器地址(即寄存器名)。</li>
</ul>
<p><img src="https://repo.live.holgerbest.top/img/image-20210622115114384.png" alt="image-20210622115114384" /></p>
<blockquote>
<p>按照操作操作数来源来分，可分为RS指令（操作数来自寄存器和存储器）、RR指令（操作数来自寄存器和寄存器）</p>
</blockquote>
<h2 id="指令操作码的扩展技术"><a class="markdownIt-Anchor" href="#指令操作码的扩展技术"></a> 指令操作码的扩展技术</h2>
<p><strong>指令操作码的长度</strong>决定了指令系统中完成不同操作的指令条数。</p>
<p>如果某机器的操作码长度为K位，则它最多只能有2^K条不同的指令。</p>
<p>指令操作码通常有<strong>两种编码格式</strong>（操作码的长度是否固定）：固定格式、可变格式。</p>
<p><strong>15/15/15扩展法</strong>：机器字长位16位，用15/15/15扩展法可以设计一个具有15条三地址指令、15条双地址指令、15条单地址指令和16条零地址指令的指令系统。</p>
<p>15条三地址指令的基本操作码为0000-1110，剩下一个1111用于把操作码扩展到A1；15条二地址指令基本操作码为1111 0000-1111 1110，剩下一个1111 1111用于把操作码扩展到A2；15条一地址指令基本操作码为1111 1111 0000-1111 1111 1110，剩下一个1111 1111 1111用于把操作码扩展到A1；16条零地址指令的操作码范围为1111 1111 1111 0000-1111 1111 1111 1111。<img src="https://repo.live.holgerbest.top/img/image-20210622115533823.png" alt="image-20210622115533823" /></p>
<p><strong>霍夫曼编码的操作码</strong>：根据程序中指令出现频率高低而赋以不同长度的操作码。</p>
<h2 id="指令长度与数据字长的关系"><a class="markdownIt-Anchor" href="#指令长度与数据字长的关系"></a> 指令长度与数据字长的关系</h2>
<p><strong>字长</strong>：计算机能直接处理的二进制数据的位数</p>
<p><strong>地址码长度</strong>决定了指令<strong>直接寻址能力</strong>，若为n位，则给出的n位直接地址寻址2^n字节。</p>
<p><strong>扩大寻址能力的方法</strong>：<strong>增加机器字长</strong>来增加地址码的长度，地址扩展技术（基地址加位移量的方法来增加地址码）</p>
<h2 id="寻址方式"><a class="markdownIt-Anchor" href="#寻址方式"></a> 寻址方式</h2>
<p><strong>寻址方式</strong>(或编址方式)：确定<strong>本条指令的数据地址</strong>及<strong>下一条要执行的指令地址</strong>的方法。</p>
<p>1、<strong>直接寻址</strong>：指令的<strong>地址码</strong>部分给出操作数在<strong>存储器中的地址</strong>。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210701232511908.png" alt="image-20210701232511908" /></p>
<p>2、<strong>寄存器寻址</strong>：指令地址码部分给出某一<strong>通用寄存器</strong>（GR）地址，而且所需的<strong>操作数在该寄存器</strong>中。</p>
<p>3、<strong>基址寻址</strong>：操作数的地址由<strong>基址寄存器</strong>的内容和指令的<strong>地址码</strong>A（disp，位移量）<strong>相加</strong>得到。用途：定位和扩大存储空间。</p>
<blockquote>
<p>基址寄存器（BR）：专用的基址寄存器，或由指令指定一个通用寄存器为基址寄存器。其值由系统程序通过特权指令设定，一般用户指令不能修改，可确保系统安全。</p>
</blockquote>
<p><img src="https://repo.live.holgerbest.top/img/image-20210701232924664.png" alt="image-20210701232924664" /></p>
<p>4、<strong>变址寻址</strong>：地址部分给出的地址A和<strong>变址寄存器</strong>X的内容<strong>相加</strong>的和作为操作数地址。用途：变址操作，循环执行程序的方法对数组进行运算。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210701233339140.png" alt="image-20210701233339140" /></p>
<p>5、<strong>间接寻址</strong>（间址）：地址码所<strong>取出的内容</strong>是<strong>操作数或指令的地址</strong>。两种方式：<strong>寄存器间接寻址</strong>（一次间址一次访存），<strong>存储器间接寻址</strong>（一次间址两次访存）。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210701233803186.png" alt="image-20210701233803186" /></p>
<p>以转移指令Jump为例，来说明在直接寻址和间接寻址方式下如何确定下一条要执行的指令的地址。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210701233943118.png" alt="image-20210701233943118" /></p>
<p>6、<strong>相对寻址</strong>：把<strong>程序计数器PC</strong>的内容(即当前执行指令的地址)与指令的<strong>地址码部分</strong>给出的<strong>位移量</strong>(disp)之<strong>和</strong>作为<strong>操作数的地址或转移地址</strong>。</p>
<blockquote>
<p>主要用于转移指令，执行本条指令后，将转移到(PC)+disp，(PC)为程序计数器的内容。</p>
</blockquote>
<p>特点：转移地址不固定，随着PC值变化，并总与PC相差固定值disp；位移量disp可正可负，通常用补码表示。</p>
<p>7、<strong>立即数寻址</strong>：操作数由指令的<strong>地址码部分直接给出</strong>。</p>
<p>特点：取指时，操作码和一个操作数同时被取出，<strong>不必再次访问存储器</strong>，提高了指令的执行速度。这种方式只能适用于<strong>操作数固定</strong>的情况，通常用于给某一寄存器或存储器单元<strong>赋初值</strong>或<strong>提供常数</strong>等。</p>
<p>8、<strong>堆栈寻址</strong>：堆栈操作指令，详见<a href="#%E6%8C%87%E4%BB%A4%E7%B1%BB%E5%9E%8B">指令类型</a>-&gt;堆栈操作指令</p>
<h2 id="指令类型"><a class="markdownIt-Anchor" href="#指令类型"></a> 指令类型</h2>
<h3 id="1-算术逻辑运算指令"><a class="markdownIt-Anchor" href="#1-算术逻辑运算指令"></a> 1 算术逻辑运算指令</h3>
<p><strong>算术运算</strong>：定点数运算，相当于高级语言中对整数(integer)的处理。</p>
<p>根据算术运算的结果置<strong>状态位</strong>（满足条件置1，否则置0）：<br />
Z(结果为0)、N(结果为负)、V(结果溢出)、C(产生进位或借位)</p>
<blockquote>
<p>结果状态位和控制状态位共用组成<strong>程序状态字</strong>PSW。</p>
</blockquote>
<p><strong>逻辑运算</strong>：与、或、非(求反)、异或(按位加)等。</p>
<h3 id="2-移位操作指令"><a class="markdownIt-Anchor" href="#2-移位操作指令"></a> 2 移位操作指令</h3>
<p>算术移位、逻辑移位、循环移位：</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210701235111784.png" alt="image-20210701235111784" /></p>
<p>移位指令来实现<strong>乘除法运算</strong>可取得较高的速度：</p>
<ul>
<li><strong>算术左移或右移</strong>n位：对<strong>带符号数据</strong>乘以（&lt;&lt;）2<sup>n或整除（&gt;&gt;）以2</sup>n的运算。</li>
<li><strong>逻辑左移或右移</strong>n位：对<strong>无符号数据</strong>乘以（&lt;&lt;）2<sup>n或整除（&gt;&gt;）以2</sup>n的运算。</li>
</ul>
<h3 id="3-浮点运算指令"><a class="markdownIt-Anchor" href="#3-浮点运算指令"></a> 3 浮点运算指令</h3>
<p>高级语言中的实数(real)经常是先转换成<strong>浮点数</strong>的形式而后再进行处理。</p>
<p>没有设置浮点运算指令——<strong>子程序实现</strong>（速度低）。</p>
<h3 id="4-十进制运算指令"><a class="markdownIt-Anchor" href="#4-十进制运算指令"></a> 4 十进制运算指令</h3>
<p>人机交互时，输入输出的数据都是以<strong>十进制</strong>形式表示的。</p>
<p>不具有十进制运算指令的计算机：十进制-&gt;二进制——运算；二进制-&gt;十进制——输出。</p>
<p><strong>输入输出数据频繁</strong>的计算机系统中设置<strong>十进制运算指令</strong>能提高数据处理的速度。</p>
<h3 id="5-字符串处理指令"><a class="markdownIt-Anchor" href="#5-字符串处理指令"></a> 5 字符串处理指令</h3>
<p>一种非数值处理指令。传送、比较、查询、转换。</p>
<h3 id="6-数据传送指令"><a class="markdownIt-Anchor" href="#6-数据传送指令"></a> 6 数据传送指令</h3>
<p>实现寄存器与寄存器，寄存器与存储器单元，存储器单元与存储器单元之间的数据传送（读、写）。</p>
<p><strong>源地址中的数据保持不变</strong>，实际上是数据<strong>复制</strong>。</p>
<h3 id="7-转移类指令"><a class="markdownIt-Anchor" href="#7-转移类指令"></a> 7 转移类指令</h3>
<ul>
<li>无条件转移</li>
<li>条件转移</li>
<li>过程调用与返回</li>
<li>陷阱(trap)</li>
</ul>
<h3 id="8-堆栈及堆栈操作指令"><a class="markdownIt-Anchor" href="#8-堆栈及堆栈操作指令"></a> 8 堆栈及堆栈操作指令</h3>
<p><strong>堆栈</strong>(stack)是由若干个<strong>连续存储单元</strong>组成的<strong>先进后出</strong>(FILO)存储区。</p>
<blockquote>
<p><strong>栈底</strong>固定不变，栈顶随入栈和出栈不断变化，任何堆栈操作只能在<strong>栈顶</strong>进行。</p>
</blockquote>
<p><strong>堆栈指针</strong>(SP)：为了表示栈顶的位置，有一个<strong>寄存器或存储器单元</strong>用于指出<strong>栈顶的地址</strong>。</p>
<p><strong>作用</strong>：</p>
<ul>
<li>提供<strong>操作数</strong>和<strong>保存运算结果</strong>的主要存储区</li>
<li>暂存<strong>中断和子程序调用</strong>时<strong>现场数据及返回地址</strong></li>
<li>子程序调用时<strong>参数的传递</strong></li>
</ul>
<p>堆栈<strong>从高地址向低地址</strong>扩展，即栈顶地址<strong>小于等于</strong>栈底地址。</p>
<ul>
<li><strong>压栈指令</strong>： <code>PUSH OPR</code>  (SP)-2 -&gt; SP, OPR -&gt; SP</li>
<li><strong>弹出指令</strong>： <code>POP OPR</code>  ((SP)) -&gt; OPR, (SP)+2 -&gt; SP</li>
</ul>
<h3 id="9-输入输出io指令"><a class="markdownIt-Anchor" href="#9-输入输出io指令"></a> 9 输入输出(I/O)指令</h3>
<p><code>OP REG A</code></p>
<ul>
<li>OP：<strong>操作码</strong>，表示I/O指令</li>
<li>REG：<strong>寄存器名</strong>，用于指定<strong>与外部设备交换数据的寄存器</strong></li>
<li>A：<strong>外部设备中的寄存器地址或设备码</strong>，其长度一般为8～16位，可以表示256～64K个设备寄存器(输入数据寄存器/输出数据寄存器/控制寄存器)。</li>
</ul>
<p><strong>输入指令</strong>完成从A地址所指定的<strong>外部设备寄存器</strong>中读入一个数据到<strong>REG寄存器</strong>中；<strong>输出指令</strong>把<strong>REG寄存器</strong>中的数据送到<strong>A地址</strong>所指定的<strong>外部设备寄存器</strong>中。I/O指令还可用来<strong>发送和接收控制命令</strong>和<strong>回答信号</strong>，用以控制外部设备的工作。</p>
<blockquote>
<p>外部设备与存储器统一编址的计算机，任何访问存储器的指令均可访问外部设备，不再专设I/O指令。</p>
</blockquote>
<h3 id="10-特权指令"><a class="markdownIt-Anchor" href="#10-特权指令"></a> 10 特权指令</h3>
<p><strong>特权指令</strong>：某些指令使用不当会破坏系统或其他用户信息，<strong>只能用于操作系统或其他系统软件</strong>，而<strong>不提供给用户</strong>使用。（管态与用户态）</p>
<blockquote>
<p>统一管理所有的外部设备，输入输出指令也作为特权指令，不允许用户直接使用。需输入输出时，可通过系统调用，由操作系统来完成。</p>
</blockquote>
<h3 id="其他指令"><a class="markdownIt-Anchor" href="#其他指令"></a> 其他指令</h3>
<ol>
<li><strong>向量指令</strong>：对向量或矩阵数据运算的指令</li>
<li><strong>多处理机指令</strong>：用于多处理机的指令</li>
<li><strong>控制指令</strong>包括：等待指令、停机指令、空操作指令、开中断、关中断、置条件码指令等。
<ol>
<li><strong>停机指令</strong>：当用户程序执行完毕时，可安排一条停机指令，此时机器不再继续执行程序、</li>
<li><strong>空操作指令</strong>：除了将程序计数器增量外，不进行其他操作。</li>
</ol>
</li>
</ol>
<h2 id="cisc-risc"><a class="markdownIt-Anchor" href="#cisc-risc"></a> CISC &amp; RISC</h2>
<p>精简指令系统计算机(RISC) ：ARM、MIPS、IBM</p>
<ul>
<li>通过<strong>简化指令</strong>使计算机的<strong>结构更加简单合理</strong>，从而提高运算速度。</li>
<li>优先选取使用<strong>频率最高</strong>的一些简单指令，以及一些很有用但不复杂的指令，<strong>避免复杂指令</strong>。</li>
<li><strong>指令长度固定</strong>，<strong>指令格式种类少</strong>，<strong>寻址方式种类少</strong>。指令之间各字段的划分比较一致，各字段的功能也比较规整。</li>
<li>只有<strong>取数/存数指令(load/store)访问存储器</strong>，其余指令的操作都在寄存器之间进行。</li>
<li>CPU中通用<strong>寄存器数量相当多</strong>。算术逻辑运算指令的操作数都在通用寄存器中存取。</li>
<li>大部分指令<strong>在一个或小于一个机器周期内完成</strong>。</li>
<li>以<strong>硬布线控制逻辑</strong>为主，不用或少用微码控制。</li>
<li>特别重视<strong>编译优化</strong>工作，以减少程序执行时间。</li>
</ul>
<p>复杂指令系统计算机(CISC) ： Intel 80x86</p>
<ul>
<li>增加硬件实现的复杂性</li>
<li>增加了研制时间和成本以及设计失误的可能性</li>
<li>很难实现流水线操作</li>
<li>降低了机器的速度。</li>
</ul>
<h2 id="计算机执行程序所需要的时间"><a class="markdownIt-Anchor" href="#计算机执行程序所需要的时间"></a> 计算机执行程序所需要的时间</h2>
<p>计算机执行程序所需要的时间P可用 <strong><code>P=I×CPI×T</code></strong> 表示。</p>
<ul>
<li>I：高级语言程序编译后在机器上运行的指令数 （CISC优势）</li>
<li>CPI：执行每条指令所需的平均周期数 （RISC优势）</li>
<li>T：每个机器周期的时间 （RISC优势）</li>
</ul>
<h2 id="sparc"><a class="markdownIt-Anchor" href="#sparc"></a> SPARC</h2>
<p>SPARC指令字长32位，有3种指令格式，6种指令类型。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702002504705.png" alt="image-20210702002504705" /></p>
<ul>
<li>OP、OP2、OP3为操作码，Opf为浮点操作码。</li>
<li>rs1、rs2为通用寄存器地址，一般用作源操作数寄存器地址。</li>
<li>rd为目的寄存器地址。通常用来保存运算结果或从存储器中取来的数据。</li>
<li>Simm13是13位扩展符号的立即数。</li>
<li>i用来选择第二个操作数。</li>
</ul>
<p><strong>指令类型</strong>：</p>
<ul>
<li><strong>算术运算/逻辑运算/移位运算指令</strong>：31条<br />
<code>(rs1)OP(rs2)-&gt;rd (i=0)</code><br />
<code>(rs1)OP Simm13-&gt;rd (i=1)</code></li>
<li><strong>LOAD/STORE指令</strong>：22条<br />
LOAD把存储器中的数据送rd中；STORE把rd中的内容送存储器中。i=0时，<code>E = (rs1)+(rs2)</code> ；i=1时，<code>E = (rs1)+Simm13</code></li>
<li><strong>控制指令</strong>(控制转移类指令：指令改变PC值)：5条
<ul>
<li>条件转移(Branch) ：根据指令中的Cond字段(条件码)决定程序是否转移，相对寻址</li>
<li>转移并连接(JMPL)： 寄存器间址，并将PC保存在以rd为地址的寄存器中，以备程序返回时用。</li>
<li>调用(CALL)： 相对寻址</li>
<li>陷阱(trap) ：寄存器间址</li>
<li>从trap程序返回(RETT) ：寄存器间址</li>
</ul>
</li>
<li><strong>读/写专用寄存器指令</strong>：8条
<ul>
<li>SPARC有四个专用寄存器(PSR，Y，WIM，TBR)，其中PSR称为程序状态寄存器。</li>
<li>几乎所有机器都设置PSR寄存器(有的计算机称为程序状态字PSW)。</li>
<li>PSR的内容反映并控制计算机的运行状态，比较重要，所以读/写PSR(RDPSR，WRPSR)指令一般为特权指令</li>
</ul>
</li>
<li><strong>浮点运算指令</strong></li>
<li><strong>协处理器指令</strong></li>
</ul>
<blockquote>
<p>有一些指令没有设置，但很容易用一条其他指令来替代，这是因为SPARC约定R0的内容恒为零，而且立即数可以作为一个操作数处理。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702002924689.png" alt="image-20210702002924689" /></p>
</blockquote>
<h2 id="计算机的语言"><a class="markdownIt-Anchor" href="#计算机的语言"></a> 计算机的语言</h2>
<p>机器语言（二进制代码，烦琐、单调、难于看懂）→汇编语言（助记符，功能有限、编程繁重费时、依赖处理器）→高级语言</p>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>组成</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成知识点 - 中央处理器</title>
    <url>/2021/07/02/computer-ch6/</url>
    <content><![CDATA[<h2 id="控制器的功能"><a class="markdownIt-Anchor" href="#控制器的功能"></a> 控制器的功能</h2>
<p>控制器的功能：按每条指令的要求产生所需的<strong>控制信号</strong></p>
<p>1、<strong>取指令</strong>：当程序已在存储器中时，首先根据程序入口取出第一条指令，为此要发出指令地址及控制信号。然后不断取出指令。<br />
2、<strong>分析指令</strong>（解释指令、指令译码）：对当前取得的指令进行分析，指出它要求作什么操作，并产生相应的操作控制命令。<br />
3、<strong>执行指令</strong>：根据分析指令时产生的“操作命令”和“操作数地址”形成相应的操作控制信号序列，通过CPU及输入输出设备的执行，实现每条指令的功能。<br />
4、控制<strong>程序和数据的输入与结果输出</strong>：根据程序的安排或人的干预，在适当的时候向输入输出设备发出一些相应的命令来完成I/O功能，这实际上也是通过执行程序来完成的。<br />
5、对<strong>异常情况和某些请求的处理</strong>： (1) “中断请求”信号；(2)DMA请求信号。</p>
<p>控制器<strong>产生控制信号</strong>的两种方式：<strong>微程序</strong>控制、<strong>硬布线</strong>控制。</p>
<h2 id="控制器的组成"><a class="markdownIt-Anchor" href="#控制器的组成"></a> 控制器的组成</h2>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702093136456.png" alt="image-20210702093136456" /></p>
<p>1、<strong>程序计数器</strong>(PC)（指令地址寄存器）：存放当前<u>正在执行</u>的<strong>指令地址</strong>或<u>即将要执行的下一条</u><strong>指令地址</strong>。有指令预取功能的计算机中，增加一些PC存放要预取的指令地址。</p>
<p><strong>形成指令地址</strong>的途径：<strong>顺序执行</strong> PC+1（若按字节编址，指令长度为4，则PC+4）；<strong>改变顺序执行程序</strong>（<strong>转移类指令</strong>形成转移地址）</p>
<p>2、<strong>指令寄存器</strong>(IR)：存放<strong>当前正在执行的指令</strong>，以便在指令执行过程中，控制完成一条指令的全部功能</p>
<p>3、<strong>指令译码器</strong>（操作码译码器）：对指令寄存器中的<strong>操作码</strong>进行分析解释，产生相应的<strong>控制信号</strong>。需要形成有一定时序关系的操作控制信号序列。</p>
<p>4、<strong>脉冲源及启停线路</strong>：脉冲源产生<strong>脉冲信号</strong>作为<strong>时钟脉冲</strong>（机器周期和工作脉冲的基准信号），在机器刚加电时，还产生一个<strong>总清信号</strong>(reset)；启停线路保证<strong>可靠地送出或封锁时钟脉冲</strong>，控制时序信号的发生或停止，从而启动机器工作或使之停机。</p>
<p>5、<strong>时序控制信号形成部件</strong>：当机器启动后，在CLK时钟作用下，根据当前正在执行的指令的需要，产生相应的<strong>时序控制信号</strong>，并根据被控功能部件的反馈信号调整时序控制信号。</p>
<p>6、<strong>程序状态寄存器</strong>（PSR）：保存<strong>程序状态字</strong>（PSW）的寄存器。各个机器的PSW内容不完全相同。</p>
<h2 id="指令执行过程"><a class="markdownIt-Anchor" href="#指令执行过程"></a> 指令执行过程</h2>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702102559599.png" alt="image-20210702102559599" /></p>
<ul>
<li>8个通用寄存器GR</li>
<li>1个ALU</li>
<li>4个标志触发器
<ul>
<li>N(负数)</li>
<li>Z(零)</li>
<li>V(溢出)</li>
<li>C(进位)</li>
</ul>
</li>
<li>符号
<ul>
<li><code>•</code>：两线相接</li>
<li><code>o</code>：受控制的与门</li>
<li><code>*</code>：控制命令</li>
</ul>
</li>
<li>指令格式：<img src="https://repo.live.holgerbest.top/img/image-20210702102726929.png" alt="image-20210702102726929" />
<ul>
<li>其中，rs，rd，rs1为GR地址，Imm或Disp为立即数或偏位量。</li>
</ul>
</li>
</ul>
<h3 id="加法指令的执行过程"><a class="markdownIt-Anchor" href="#加法指令的执行过程"></a> 加法指令的执行过程</h3>
<blockquote>
<p><strong>指令功能</strong>：GR中rs1地址中的数据与disp相加得到一个<strong>操作数的地址</strong>，访存并送数据寄存器DR；<br />
GR中rs地址的<strong>数据</strong>与DR中数据相加，结果送到GR中。</p>
</blockquote>
<p><strong>4个机器周期</strong>：取值——计算地址——取数——运算送结果。<br />
其中 取值 和 取数 需要访存（通过总线），计算地址 和 运算送结果在CPU内部，总线空闲。</p>
<p>① 【所有指令都一样】从存储器<strong>取指令</strong>，<strong>送入指令寄存器</strong>，并进行<strong>指令译码</strong></p>
<ul>
<li>指令送地址总线：PC -&gt; AB</li>
<li>访存读命令：W/#R=0, M/#IO=1</li>
<li>取出的指令送指令寄存器：DB -&gt; IR</li>
<li>程序计数器+1：PC+1</li>
</ul>
<p>② <strong>计算数据地址</strong>，将计算得到的有效地址<strong>送地址寄存器</strong>AR</p>
<ul>
<li>rs1内容和位移量送ALU：rs1 -&gt; GR, (rs1) -&gt; ALU, disp -&gt; ALU</li>
<li>加法命令送ALU：“+”</li>
<li>计算结果（有效地址）送地址寄存器：ALU -&gt; AR</li>
</ul>
<p>③ <strong>存储器取数</strong></p>
<ul>
<li>地址寄存器送数据地址到地址总线：AR -&gt; AB</li>
<li>访存读命令：W/#R=0, M/#IO=1</li>
<li>存储器读出数据后送入数据总线，打入数据寄存器：DB -&gt; DR</li>
</ul>
<p>④ <strong>进行加法运算</strong>，结果<strong>送通用寄存器</strong>，并根据运算结果<strong>置状态位</strong>N，Z，V，C</p>
<ul>
<li>rs内容和数据寄存器数据送ALU：rs -&gt; GR, (rs) -&gt; ALU, DR -&gt; ALU</li>
<li>加法命令送ALU：“+”</li>
<li>结果送寄存器并置状态位：rd -&gt; GR, ALU -&gt; rd, 置N, Z, V, C</li>
</ul>
<h3 id="条件转移指令的执行过程"><a class="markdownIt-Anchor" href="#条件转移指令的执行过程"></a> 条件转移指令的执行过程</h3>
<blockquote>
<p><strong>指令功能</strong>：根据<strong>状态位</strong>N，Z，V，C的状态，决定是否转换。如转移条件成立，则<strong>转移到本条指令所指定的地址</strong>，否则顺序执行下一条指令。</p>
</blockquote>
<p><strong>2个机器周期</strong>：取值——计算转移地址送PC</p>
<p>① 【所有指令都一样】从存储器<strong>取指令</strong>，<strong>送入指令寄存器</strong>，并进行<strong>指令译码</strong></p>
<ul>
<li>指令送地址总线：PC -&gt; AB</li>
<li>访存读命令：W/#R=0, M/#IO=1</li>
<li>取出的指令送指令寄存器：DB -&gt; IR</li>
<li>程序计数器+1：PC+1</li>
</ul>
<p>② 如转移条件成立，<strong>计算转移地址</strong>，并<strong>送PC</strong></p>
<ul>
<li>（采用<strong>相对寻址</strong>方式）PC和位移量送ALU：PC -&gt; ALU, disp -&gt; ALU</li>
<li>加法命令送ALU：“+”</li>
<li>计算结果（转移地址）送地址寄存器：ALU -&gt; PC</li>
</ul>
<h2 id="微程序控制"><a class="markdownIt-Anchor" href="#微程序控制"></a> 微程序控制</h2>
<p><strong>微操作</strong>：一条指令的功能是通过<strong>按一定次序执行一系列基本操作</strong>完成的，这些基本操作称为<strong>微操作</strong>。</p>
<p><strong>微指令</strong>：由<strong>同时发出的</strong>控制信号所执行的<strong>一组微操作</strong>。</p>
<blockquote>
<p>一条<strong>指令</strong>分成若干条<strong>微指令</strong>，按次序执行这些微指令，就可以实现指令的功能。</p>
</blockquote>
<p><strong>微程序</strong>：计算机每条指令的功能均由<strong>微指令序列</strong>解释完成，这些<strong>微指令序列的集合</strong>就叫做<strong>微程序</strong>。</p>
<p><strong>控制存储器</strong>：存放<strong>控制命令</strong>(信号)与下一条执行的微指令地址(简称为<strong>下址</strong>)。用<strong>只读存储器</strong>(ROM)实现（原因：指令系统固定，微程序也固定）。</p>
<blockquote>
<p>执行一条<strong>指令</strong>实际上就是执行一段存放在<strong>控制存储器</strong>中的<strong>微程序</strong>。</p>
</blockquote>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702114954003.png" alt="image-20210702114954003" /></p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702115000405.png" alt="image-20210702115000405" /></p>
<p><strong>微指令编码</strong>：将每个控制信号<strong>用1位表示</strong>：当该位为1时，表示有控制信号；为0时，表示无控制信号。对 M/#IO(22) 和 W/#R(23)，则当该位为1时，分别表示访问存储器和写；当该位为0时，分别表示IO访问和读。</p>
<p>微指令由<strong>控制字段</strong>和<strong>下址字段</strong>组成：<img src="https://repo.live.holgerbest.top/img/image-20210702120807336.png" alt="image-20210702120807336" /></p>
<p>微程序控制<strong>流程图</strong>：</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702120934870.png" alt="image-20210702120934870" /></p>
<h3 id="加法指令控制信号举例"><a class="markdownIt-Anchor" href="#加法指令控制信号举例"></a> 加法指令控制信号举例</h3>
<p>(1) <strong>取指</strong>微指令 （(PC) -&gt; IR）<br />
① <strong>指令地址送地址总线</strong>：PC -&gt; AB(1)<br />
② 发<strong>访存</strong>控制命令：<strong>ADS(21)</strong>，M/#IO=1(22)， W/#R=0(23)；从存储器<strong>取指令送数据总线</strong>。<br />
③ <strong>指令送指令寄存器</strong>：DB -&gt; IR(5)<br />
④ <strong>程序计数器+1</strong>：PC+1(3)</p>
<p>(2) <strong>计算地址</strong>微指令（(rs1) + disp -&gt; AR）<br />
① 取两个<strong>源操作数</strong>(计算地址用)：rs1 -&gt; GR(8)，(rs1) -&gt; ALU(10)，disp -&gt; ALU(4)。<br />
② <strong>加法</strong>运算：“+”(13)。<br />
③ 有效地址<strong>送地址寄存器</strong>：ALU -&gt; AR(19)。</p>
<p>(3) <strong>取数</strong>微指令 （(AR) -&gt; DR）<br />
① <strong>数据地址送地址总线</strong>：AR -&gt; AB(20)。<br />
② 发<strong>访存</strong>控制命令：<strong>ADS(21)</strong>， M/#IO=1(22)， W/#R=0(23)。由存储器将数据送数据总线DB。<br />
③ <strong>数据送数据寄存器</strong>：DB -&gt; DR(6)</p>
<p>(4) <strong>加法</strong>运算和<strong>送结果</strong>微指令 （(rs) + DR -&gt; GR）<br />
① 两<strong>源操作数</strong>送ALU：rs -&gt; GR(9)，(rs) -&gt; ALU(11)；DR -&gt; ALU(12)。<br />
② <strong>加法</strong>运算：“+”(13)<br />
③ <strong>送结果</strong>：ALU -&gt; GR(17)；置N, Z, V, C。</p>
<p><strong>微指令编码</strong>：</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702155627186.png" alt="image-20210702155627186" /></p>
<h2 id="微程序设计"><a class="markdownIt-Anchor" href="#微程序设计"></a> 微程序设计</h2>
<blockquote>
<p>这一部分主要关注概念。</p>
</blockquote>
<p>缩短微指令字长，减少微程序长度，提高执行速度。</p>
<h3 id="微指令控制字段的编译法"><a class="markdownIt-Anchor" href="#微指令控制字段的编译法"></a> 微指令控制字段的编译法</h3>
<p>1、<strong>直接控制法</strong>：<strong>每一位代表一个微命令</strong>，发出某个微命令将控制字段中相应位置成“1”。缺点是微指令字长过长。</p>
<p>2、<strong>字段直接编译法</strong>：选出<strong>互斥的微指令</strong>编成一组，作为<strong>微指令字的一个字段</strong>，用二进制代码表示。微指令字字段长度为n位时，有2^n-1个互斥的微命令（000表示不发微命令）。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702121840293.png" alt="image-20210702121840293" /></p>
<blockquote>
<p><strong>微周期</strong>：一条微指令所需的执行时间。</p>
<p>互斥的微指令：若干<strong>微命令</strong>在每个选用的<strong>微周期</strong>内<strong>只有一个微命令起作用</strong>。</p>
</blockquote>
<p>3、<strong>字段间接编译法</strong>：字段直接编译法 + 一个字段某些微命令，要<strong>兼由另一字段中的某些微命令来解释</strong>。进一步<strong>减少了指令长度</strong>，但<strong>削弱并行控制能力</strong>。</p>
<p>4、<strong>常数源字段E</strong>：仅有几位，微指令中用来给某些部件发送常数，故有时称为<strong>发射字段</strong>。</p>
<h3 id="微程序流的控制"><a class="markdownIt-Anchor" href="#微程序流的控制"></a> 微程序流的控制</h3>
<ul>
<li><strong>现行微指令</strong>：当前正在执行的微指令</li>
<li><strong>现行微地址</strong>：现行微指令所在的控制存储器单元的地址</li>
<li><strong>后继微指令</strong>：下一条要执行的微指令</li>
<li><strong>后继微地址</strong>：后继微指令所在的控存单元地址</li>
</ul>
<h4 id="1-增量与下址字段结合产生后继微地址"><a class="markdownIt-Anchor" href="#1-增量与下址字段结合产生后继微地址"></a> 1、增量与下址字段结合产生后继微地址</h4>
<blockquote>
<p>机器加电后执行的第一条微指令地址（微程序入口）来自专门的<strong>硬件电路</strong></p>
</blockquote>
<ul>
<li>顺序执行微指令：后继微地址由现行微地址加上一个增量(通常为1)形成</li>
<li>非顺序执行：产生一个转移微地址</li>
</ul>
<p>微指令的<strong>下址字段</strong>分成两部分：<strong>转移控制字段</strong>BCF和<strong>转移地址字段</strong>BAF。微程序转移时BAF送μPC；否则μPC+1</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702122626356.png" alt="image-20210702122626356" /></p>
<p>BAF长度两种情况：① 与μPC的位数相等，转移灵活，但增加了微指令的长度；② 比μPC短（转移点在μPC附近）原μPC与BAF组合成转移微地址，转移地址受到限制，但可缩短微指令长度。</p>
<h4 id="2-多路转移方式"><a class="markdownIt-Anchor" href="#2-多路转移方式"></a> 2、多路转移方式</h4>
<p><strong>多路转移</strong>：一条微指令存在<strong>多个转移分支</strong>的情况。</p>
<ul>
<li>在若干个微地址中选择<strong>一个作为后继微地址</strong>（例：根据操作码产生不同的后继微地址），实现电路：PROM(可编程序只读存储器)。</li>
<li>根据某些<strong>硬件状态</strong>（运算结果所置的标志位(N，Z，V，C)、计数器状态、数据通路状态）来决定后继微地址：两路转移，四路转移。</li>
</ul>
<h4 id="3-微中断"><a class="markdownIt-Anchor" href="#3-微中断"></a> 3、微中断</h4>
<p>出现微中断请求信号，完成现行指令的微程序后<strong>响应</strong>该微中断请求，这时中止当前正在执行的程序，而转去执行<strong>微中断处理程序</strong>。<strong>微中断请求信号</strong>是由<strong>程序中断请求信号</strong>引起的。</p>
<p>当CPU响应微中断请求时，由<strong>硬件</strong>产生<strong>微中断程序的入口地址</strong>。</p>
<h3 id="微指令格式"><a class="markdownIt-Anchor" href="#微指令格式"></a> 微指令格式</h3>
<ol>
<li><strong>水平型微指令</strong>：在一条微指令中定义并执行<strong>多个并行操作微命令</strong>。<u>直接控制法、字段编译法(直接、间接编译法)</u>经常应用在同一条水平型微指令中。</li>
<li><strong>垂直型微指令</strong>：在微指令中设置有<strong>微操作码</strong>字段，采用微操作码编译法，<strong>由微操作码规定微指令的功能</strong>。</li>
</ol>
<p>水平型微指令与垂直型微指令的比较：水平型微指令<strong>并行</strong>操作能力强，<strong>效率</strong>高，<strong>灵活</strong>性强，<strong>微指令字长但微程序短</strong>，用户<strong>难以掌握</strong>；垂直型微指令相反。</p>
<h3 id="微程序控制存储器"><a class="markdownIt-Anchor" href="#微程序控制存储器"></a> 微程序控制存储器</h3>
<p>微程序控制存储器一般由<strong>只读存储器</strong>ROM构成；用RAM作为控制存储器的优点是可以修改微程序。</p>
<p>控制存储器的操作：取微指令——执行微指令各个操作。<strong>两种方式</strong>：串行方式、并行方式。</p>
<h3 id="微程序设计语言"><a class="markdownIt-Anchor" href="#微程序设计语言"></a> 微程序设计语言</h3>
<ul>
<li><strong>微程序设计语言</strong>：编制微程序的语言</li>
<li><strong>源微程序</strong>：用微程序设计语言编制的程序</li>
<li><strong>微编译程序</strong>：将源微程序翻译成二进制码的程序</li>
</ul>
<h2 id="硬布线控制"><a class="markdownIt-Anchor" href="#硬布线控制"></a> 硬布线控制</h2>
<p><strong>硬布线控制方式</strong>（组合逻辑控制方式）：控制信号是通过<strong>逻辑电路直接连线</strong>产生。</p>
<p><strong>操作码译码器</strong>：输入操作码，每根输出线表示一条指令，有且仅有一根线为高电位，其余均为低电位(或反之)。</p>
<p><strong>设计过程</strong>：</p>
<ol>
<li>指令操作码的代码分配</li>
<li>确定机器周期、节拍与主频</li>
<li>确定机器周期和操作<br />
操作控制命令名＝指令名×机器周期×节拍×条件</li>
<li>综合所有指令的每一个操作命令（写出逻辑表达式并化简）</li>
</ol>
<p>硬布线逻辑的<strong>实现途径</strong>：两级门电路的实现（PLA，PAL和GAL电路）、VLSI直接实现（集成在CPU芯片中）</p>
<p><strong>微程序控制与硬布线控制的比较</strong></p>
<ul>
<li><strong>实现</strong>
<ul>
<li>微程序采用<strong>控制存储器</strong>，控制信号存放在<strong>控存</strong>中，实现<strong>线路规整</strong></li>
<li>硬布线由<strong>逻辑门</strong>组合实现，显得<strong>零乱且复杂</strong>，<strong>修改指令很麻烦</strong>。</li>
</ul>
</li>
<li><strong>性能</strong>
<ul>
<li><strong>微程序</strong>控制的速度比硬布线控制的速度<strong>低</strong></li>
<li>RISC一般选用<strong>硬布线逻辑</strong></li>
</ul>
</li>
</ul>
<h2 id="控制器的控制方式"><a class="markdownIt-Anchor" href="#控制器的控制方式"></a> 控制器的控制方式</h2>
<ol>
<li><strong>同步控制方式</strong>：一条已定的指令在执行时<strong>所需的机器周期数和节拍数</strong>都是<strong>固定不变</strong>的。简单、高效、成本低，但不够灵活。</li>
<li><strong>异步控制方式</strong>：每条指令、每个微操作<strong>需要多少时间就占用多少时间</strong>。等待完成操作后发回“回答”信号或“结束”信号，再开始新的微操作。优点灵活，缺点成本高。</li>
<li><strong>联合控制方式</strong>：同步控制和异步控制相结合的方式。各个微操作实行<strong>大部分统一</strong>（大部分操作安排在一个固定机器周期中，并在同步时序信号控制下进行）、<strong>小部分区别对待</strong>（时间难以确定的操作，则以执行部件送回的“回答”信号作为本次操作的结束）的方式。</li>
<li><strong>人工控制</strong>：调试、开发。如：reset按键、连续执行或单条指令执行的转换开关。</li>
</ol>
<h2 id="流水线"><a class="markdownIt-Anchor" href="#流水线"></a> 流水线</h2>
<blockquote>
<p>顺序执行：优点是控制简单，但是机器各部分的利用率不高。</p>
</blockquote>
<p><strong>指令执行流水线</strong>的<strong>工作原理</strong>：把两条指令或若干条指令在<strong>时间上重叠起来进行</strong>，将大幅度提高程序的执行速度。</p>
<p>两级流水线(a)与四级流水线(b)：</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702160014147.png" alt="image-20210702160014147" /></p>
<p>运算操作流水线：例如，执行浮点加法运算，可以分成“<strong>对阶</strong>”，“<strong>尾数加</strong>”及“<strong>结果规格化</strong>”三段，每一段设置有专门的逻辑电路完成指定操作，并将其输出保存在<strong>锁存器</strong>中，以保证在一个周期内流水线的输入信号不变</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702160223412.png" alt="image-20210702160223412" /></p>
<h3 id="流水线的相关问题"><a class="markdownIt-Anchor" href="#流水线的相关问题"></a> 流水线的<strong>相关</strong>问题</h3>
<blockquote>
<p>流水线不能连续工作的原因：</p>
<ol>
<li>编译形成的程序不能发挥流水线的作用 或 存储器供应不上为连续流动所需的指令和数据</li>
<li><strong>相关</strong>问题</li>
</ol>
</blockquote>
<p><strong>数据相关</strong>：第i条指令的<strong>操作数地址</strong>即为第i-1条指令<strong>保存结果的地址</strong>，那么第i条<strong>取操作数</strong>的动作需要<strong>等待</strong>t时间才能进行，否则取得的数据是错误的。分为：<strong>存储器数据相关</strong>或<strong>寄存器数据相关</strong>。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702160852937.png" alt="数据相关" /></p>
<p><strong>改善</strong>：一般设置<strong>相关专用通路</strong>，即当发生数据相关时，第i条指令的操作数直接从<strong>数据处理部件</strong>得到，而不是存入后再读取。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702160905681.png" alt="相关专用通路" /></p>
<p><strong>流水线阻塞</strong>（“气泡”）：计算机内有较多指令存在，其繁简程度不一，执行时间及流水线级数不同，相关的情况各异，有时避免不了产生<strong>不能连续工作</strong>的情况。</p>
<p>一般来说，流水线级数越多，情况越复杂，而<strong>两级流水线则不存在数据相关现象</strong>。</p>
<h3 id="程序转移对流水线的影响"><a class="markdownIt-Anchor" href="#程序转移对流水线的影响"></a> 程序转移对流水线的影响</h3>
<p>遇到条件转移指令：确定转移与否的<strong>条件码</strong>往往由<strong>条件转移指令本身</strong>或由它<strong>前一条指令</strong>形成，只有<strong>流出流水线</strong>才能建立转移条件并<strong>决定下条指令地址</strong>。因此，流水线不能继续处理后面的指令而处于<strong>等待状态</strong>，因而<strong>影响流水线效率</strong>。</p>
<p><strong>猜测法</strong>：机器先选定转移分支中的一个，按它继续取指并处理，<strong>猜对了继续执行</strong>，<strong>猜错了返回分支点</strong>（保证在分支点后的工作不能破坏原有现场）。</p>
<p>中断请求，I/O设备故障，转入中断处理时“<strong>断流</strong>”问题：</p>
<ul>
<li><strong>不精确断点法</strong>：还未进入流水线的后续指令不允许进入，已在流水线中<strong>执行完毕后转入</strong>中断处理程序。</li>
<li><strong>精确断点法</strong>（大多采用）：不待已进入流水线的指令执行完毕，<strong>尽早转入</strong>中断处理。</li>
</ul>
<h3 id="指令预取和乱序执行"><a class="markdownIt-Anchor" href="#指令预取和乱序执行"></a> 指令预取和乱序执行</h3>
<ul>
<li><strong>指令预取</strong>：（取指时间和CPU操作相比长得多）提前从存储器取出<strong>指令</strong>，暂存在CPU的硬件中。</li>
<li><strong>指令预分析</strong>：<strong>操作数</strong>在<strong>存储器</strong>中，提前取出放在CPU<strong>数据寄存器</strong>中。</li>
<li><strong>乱序执行</strong>：适当调整一些指令的执行顺序，以利于<strong>程序优化执行</strong>。</li>
</ul>
<h2 id="计算机的供电"><a class="markdownIt-Anchor" href="#计算机的供电"></a> 计算机的供电</h2>
<ul>
<li>计算机的<strong>直流电源</strong>是由<strong>交流电源</strong>经过<strong>整流</strong>、<strong>稳压</strong>而得到的。</li>
<li><strong>不间断电源</strong>(UPS)：给计算机提供<strong>连续的</strong>、<strong>稳定的</strong>交流正弧波电源。分为<strong>后备式</strong>和<strong>在线式</strong>两类。</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>组成</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成知识点 - 存储系统</title>
    <url>/2021/07/02/computer-ch7/</url>
    <content><![CDATA[<h2 id="存储器分类"><a class="markdownIt-Anchor" href="#存储器分类"></a> 存储器分类</h2>
<ul>
<li>存储器：<strong>主存储器</strong>（主存或内存，半导体存储器） <strong>辅助存储器</strong>（外存或辅存，磁盘、磁带、光盘）</li>
<li>串行存储器分成<strong>顺序存取存储器</strong>和<strong>直接存取存储器</strong></li>
</ul>
<h2 id="存储系统的层次结构"><a class="markdownIt-Anchor" href="#存储系统的层次结构"></a> 存储系统的层次结构</h2>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702172352039.png" alt="image-20210702172352039" /></p>
<h3 id="主存-辅存层次"><a class="markdownIt-Anchor" href="#主存-辅存层次"></a> 主存-辅存层次</h3>
<ul>
<li><strong>操作系统</strong>和<strong>硬件</strong>结合，把主存和辅存统一成了一个整体，形成了一个存储层次。</li>
<li>速度接近于<strong>主存</strong>的速度，容量与每位价格接近于<strong>辅存</strong>的容量。</li>
</ul>
<h3 id="cache-主存层次"><a class="markdownIt-Anchor" href="#cache-主存层次"></a> cache-主存层次</h3>
<ul>
<li>在CPU和主存中间设置<strong>高速缓冲存储器</strong>（cache），构成cache-主存层次。</li>
<li>解决了<strong>速度与成本</strong>之间的矛盾：速度接近于<strong>cache</strong>，容量与每位价格则接近于<strong>主存</strong>。</li>
<li>完全由<strong>硬件</strong>来实现</li>
</ul>
<h3 id="虚拟存储系统"><a class="markdownIt-Anchor" href="#虚拟存储系统"></a> 虚拟存储系统</h3>
<ul>
<li>可用机器指令<strong>地址码</strong>对整个程序<strong>统一编址</strong></li>
<li>由<strong>软、硬件结合</strong>实现</li>
</ul>
<h3 id="cache-主存-辅存三级存储层次"><a class="markdownIt-Anchor" href="#cache-主存-辅存三级存储层次"></a> cache-主存-辅存三级存储层次</h3>
<img src="https://repo.live.holgerbest.top/img/image-20210702180936311.png" style="zoom:50%;" />
<p>cache容量最小，辅存容量最大，各层次中存放的内容在下一层次中找到。</p>
<h2 id="高速缓冲存储器cache-重点"><a class="markdownIt-Anchor" href="#高速缓冲存储器cache-重点"></a> 高速缓冲存储器(cache) 【重点】</h2>
<h3 id="工作原理"><a class="markdownIt-Anchor" href="#工作原理"></a> 工作原理</h3>
<ul>
<li>在一个较短的时间间隔内，<strong>地址</strong>往往集中在<strong>存储器</strong>逻辑地址空间的<strong>很小范围</strong>内</li>
<li><strong>程序访问的局部性</strong>：对<strong>局部范围</strong>的存储器地址<strong>频繁访问</strong>，而对此范围以外的地址则访问甚少的现象</li>
</ul>
<p>cache一般由<strong>SRAM</strong>组成，介于<strong>CPU和主存</strong>之间，它的工作速度数倍于主存，全部功能由<strong>硬件</strong>实现，并且对程序员是<strong>透明的</strong>。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702182720499.png" alt="image-20210702182720499" /></p>
<h3 id="基本结构"><a class="markdownIt-Anchor" href="#基本结构"></a> 基本结构</h3>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702182733341.png" alt="image-20210702182733341" /></p>
<ul>
<li>假设主存储器的大小为2<sup>n</sup>个字节，共分成2<sup>m</sup> 个块，每个块的大小为2<sup>b</sup> 个字节，则： 2<sup>n</sup> = 2<sup>m</sup>×2<sup>b</sup>= 2<sup>(m+b)</sup>，即： n=m+b</li>
<li>假设Cache中有2<sup>c</sup>个块，每个块的大小为2<sup>b</sup>个字节，则Cache的大小为2<sup>(c+b)</sup>个字节。每个块的标记信息t=m-c位。</li>
</ul>
<h3 id="cache的效率"><a class="markdownIt-Anchor" href="#cache的效率"></a> cache的效率</h3>
<p><strong>重要因素</strong>：cache的<strong>容量</strong>，<strong>块的大小</strong></p>
<ul>
<li><strong>命中率</strong>：CPU所要访问的信息在cache中的比率</li>
<li><strong>失效率</strong>：所要访问的信息不在cache中的比率</li>
</ul>
<p>具有cache的存储器的<strong>平均存取时间</strong>=<code>h·tc + (1 - h)·(tc + tm)</code><br />
cache的存取时间为<code>tc</code>，命中率为<code>h</code>，主存的存取时间为<code>tm</code></p>
<hr />
<p><em>例题</em>  设某流水线计算机有一个指令和数据合一的cache，已知cache的读/写时间为10ns，主存的读/写时间为100ns，取指的命中率为98%，数据的命中率为95%，在执行程序时，约有1/5指令需要存/取一个操作数，为简化起见，假设指令流水线在任何时候都不阻塞。问设置cache后，与无cache比较，计算机的运算速度可提高多少倍?</p>
<p>解答：有cache的情况：<br />
平均访存时间=平均取指时间+平均取数时间<br />
= (98%*10ns+(1-98%)*(10ns+100ns)) + (95%*10ns+(1-95%)*(10ns+100ns))/5<br />
=12ns+3ns =15ns</p>
<p>无cache的情况：<br />
平均访存时间=平均取指时间+平均取数时间 = 100*1+100*1/5 = 120ns</p>
<p>速度提高倍数 = 120ns/15ns = 8倍</p>
<hr />
<h3 id="写策略"><a class="markdownIt-Anchor" href="#写策略"></a> 写策略</h3>
<ul>
<li><strong>标志交换</strong>(flag-swap)或<strong>写回法</strong>：暂时<strong>只向cache存储器写入</strong>，并用<strong>标志加以注明</strong>，直到经过修改的字块被<strong>从cache中替换出来时</strong>才一次写入主存。【速度快】</li>
<li><strong>通过式写</strong>(write-through)或<strong>写通法</strong>：每次写入cache存储器时也<strong>同时写入主存</strong>，使cache和主存<strong>保持一致</strong>。【开销大、速度慢】</li>
</ul>
<h3 id="地址映像"><a class="markdownIt-Anchor" href="#地址映像"></a> 地址映像</h3>
<p><strong>地址变换</strong>：执行程序时，应将<strong>主存地址</strong>变换成<strong>cache地址</strong>。</p>
<p>1、<strong>直接映像</strong>：把主存的每一块映射到一个<strong>固定的Cache槽</strong>中。   j = i mod 2<sup>c</sup>，j为Cache槽号，i为主存的块号，2<sup>c</sup>为Cache的槽数</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702215713177.png" alt="image-20210702215713177" /></p>
<ul>
<li><strong>优点</strong>：实现简单、花费少；<strong>缺点</strong>：Cache利用率不高。</li>
</ul>
<p>2、<strong>全相联映像</strong>：允许每个主存块装入到Cache的<strong>任何一槽</strong>中。</p>
<ul>
<li>优点：灵活，克服了主存；缺点：寻找某一主存块的成本过高。</li>
</ul>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702215848787.png" alt="image-20210702215848787" /></p>
<p>3、 <strong>组相联映像</strong>：把Cache分成2<sup>c</sup>组，每组有2<sup>r</sup>个槽，<strong>组间</strong>为<strong>直接映像</strong>；<strong>组内</strong>为<strong>全相联映像</strong>。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702220511142.png" alt="image-20210702220511142" /></p>
<blockquote>
<p>折衷方案。r=0时是直接映像；r=c时是全相联映像。</p>
</blockquote>
<h3 id="替换算法"><a class="markdownIt-Anchor" href="#替换算法"></a> 替换算法</h3>
<p>使用<strong>时机</strong>：新的主存字块需要调入cache存储器而可用位置又已被占满。</p>
<ol>
<li><strong>FIFO算法</strong>：一组中最先调入cache的字块最先替换出去。<strong>不需要随时记录</strong>各个字块的使用情况，所以<strong>实现容易</strong>，<strong>开销小</strong>。</li>
<li><strong>LRU算法</strong>（最近最少使用）：把一组中<strong>近期最少使用</strong>的字块替换出去。<strong>需随时记录</strong>cache中各个字块的使用情况，以便确定那个字块是近期最少使用的字块。</li>
</ol>
<p><strong>LRU的平均命中率比FIFO要高</strong>，当分组容量加大时，能提高LRU的命中率。</p>
<h3 id="多层次cache"><a class="markdownIt-Anchor" href="#多层次cache"></a> 多层次cache</h3>
<p><strong>哈佛结构</strong>：<strong>将指令cache和数据cache分开</strong>，成为两个相互独立的cache。解决存取数据的操作与取指令的操作发生冲突，从而延迟了指令的读取的问题。</p>
<p><strong>多层次cache</strong>：片内cache、片外cache；一级、二级、三级。</p>
<h2 id="虚拟存储器-重点"><a class="markdownIt-Anchor" href="#虚拟存储器-重点"></a> 虚拟存储器 【重点】</h2>
<p><strong>主存—辅存层次与cache—主存层次的比较</strong>：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th>主存—辅存层次</th>
<th>cache—主存层次</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>区别</strong></td>
<td>访问“时间比”较小<br />基本信息单元(字块)也比较小</td>
<td>访问“时间比”大得多<br />基本信息单元(字块)也很大</td>
</tr>
<tr>
<td style="text-align:center"><strong>联系</strong></td>
<td>原理相同：<strong>程序访问的局部性原理</strong></td>
<td>地址变换及映像方法和替换策略，从原理上是相同的</td>
</tr>
</tbody>
</table>
<p>主存—辅存层次的<strong>信息传送单位</strong>可采用几种不同的<strong>方案</strong>： <u>段</u>、<u>页</u>或<u>段页</u></p>
<h3 id="段式管理"><a class="markdownIt-Anchor" href="#段式管理"></a> 段式管理</h3>
<p><strong>段</strong>：利用程序的<strong>模块化</strong>性质，按照程序的<strong>逻辑结构</strong>划分成的<strong>多个相对独立部分</strong>。</p>
<p><strong>段表</strong>：指明各段<strong>在主存中的位置</strong>。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702221954582.png" alt="image-20210702221954582" /></p>
<p><strong>段式管理</strong>：主存按<strong>段</strong>分配的<strong>存储管理方式</strong>。</p>
<ul>
<li><strong>优点</strong>：段的分界<strong>与程序的自然分界相对应</strong>，段的<strong>逻辑独立性</strong>使它易于<strong>编译</strong>、<strong>管理</strong>、<strong>修改</strong>和<strong>保护</strong>，也便于<strong>多道程序</strong>共享。</li>
<li><strong>缺点</strong>：容易在段间留下许多<strong>空余的零碎存储空间</strong>不好利用，造成<strong>浪费</strong></li>
</ul>
<h3 id="页式管理"><a class="markdownIt-Anchor" href="#页式管理"></a> 页式管理</h3>
<p><strong>页面</strong>：<strong>主存的物理空间</strong>被划分<strong>为等长的固定区域</strong>。</p>
<p><strong>页式管理</strong>系统的<u>信息传送单位</u>是定长的<strong>页</strong>。</p>
<ul>
<li><strong>优点</strong>：<strong>新页调入</strong>主存也很容易掌握，只要有<strong>空白页面</strong>就可；可能造成浪费的是程序最后一页的零头，它比段式管理系统的<strong>空间浪费要小得多</strong>。</li>
<li><strong>缺点</strong>：正好和段式管理系统相反，由于页不是逻辑上独立的实体，所以处理、保护和共享都<strong>不及段式来得方便</strong>。</li>
</ul>
<p><strong>页式虚拟存储器</strong>：把<strong>虚拟空间</strong>分成<strong>虚页</strong>（逻辑页），<strong>主存空间</strong>也分成<strong>同样大小</strong>的<strong>实页</strong>（物理页）。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702222628174.png" alt="image-20210702222628174" /></p>
<p><strong>虚拟地址</strong>两个字段：<strong>高位</strong>字段为<strong>虚页号</strong>，<strong>低位</strong>字段为<strong>页内字地址</strong>。</p>
<p><strong>页表</strong>：<strong>虚拟地址</strong>到<strong>主存实地址</strong>的变换。虚地址中每一个<strong>虚存页地址</strong>有一个<strong>表目</strong>，包含该虚页所在的<strong>主存页面号</strong>，用它作为实存地址的<strong>高字段</strong>。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702222634186.png" alt="image-20210702222634186" /></p>
<p>页表的<strong>表项</strong>：</p>
<ul>
<li><strong>装入位</strong>(有效位)：如装入位为“1”，表示该虚页<strong>已从辅存调入主存</strong>；如装入位为“0”，则表示对应的虚页尚未调入主存，如访问该页就要产生<strong>页面失效中断</strong></li>
<li><strong>修改位</strong>：指出主存页面中的内容<strong>是否被修改过</strong>，替换时是否要写回辅存</li>
<li><strong>替换控制位</strong>：指出需替换的页</li>
<li><strong>其他保护位</strong></li>
</ul>
<p><strong>快表</strong>（TLB）：把<strong>页表</strong>的<strong>最活动部分</strong>存放在快速存储器中组成快表。<strong>减少时间开销</strong>。</p>
<blockquote>
<p>若不存在TLB，访存时先查页表：</p>
<ul>
<li>页面命中：<strong>先访问主存查页表</strong>，<strong>再访问主存取得数据</strong>，相当于<strong>主存速度降低一倍</strong></li>
<li>页面失效：要进行<strong>页面替换，页面修改</strong>，访问主存次数就更多了</li>
</ul>
</blockquote>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702223540444.png" alt="image-20210702223540444" /></p>
<h3 id="段页式虚拟存储器"><a class="markdownIt-Anchor" href="#段页式虚拟存储器"></a> 段页式虚拟存储器</h3>
<p>把程序按<strong>逻辑结构</strong>分<strong>段</strong>，每<strong>段</strong>分成<strong>固定大小的页</strong>。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702224037755.png" alt="image-20210702224037755" /></p>
<ul>
<li>优点：（兼取页式和段式系统的优点）<strong>调入调出</strong>主存按<strong>页面</strong>进行，亦可按<strong>段</strong>实现<strong>共享和保护</strong>。</li>
<li>缺点：在<strong>地址映像</strong>过程中需要多次查表。虚拟地址 -&gt; 物理地址，通过<strong>一个段表</strong>和<strong>一组页表</strong>来定位。
<ul>
<li><strong>段表</strong>：每个表目对应一个<strong>段</strong>，每个表目有一个指向该段的<strong>页表的起始地址</strong>(页号)及该段的控制保护信息</li>
<li><strong>页表</strong>：<strong>该段各页在主存中的位置</strong>以及是否已装入、已修改等标志</li>
</ul>
</li>
</ul>
<h3 id="其他概念"><a class="markdownIt-Anchor" href="#其他概念"></a> 其他概念</h3>
<p><strong>多道程序</strong>：有<strong>多个用户</strong>在机器上运行（道：用户）。每一道(每个用户)需要一个基号(用户标志号)，指明该道程序的段表起点(存放在基址寄存器中)。虚拟地址格式：<img src="https://repo.live.holgerbest.top/img/image-20210702224632346.png"  style="zoom:50%;" /></p>
<p><strong>虚地址</strong>：按<strong>虚存储空间</strong>编制程序，在<strong>直接寻址</strong>方式下由机器指令的地址码给出地址。由<strong>虚页号</strong>及<strong>页内地址</strong>组成。不是辅存的实地址，而是辅存的逻辑地址。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702225119386.png" alt="image-20210702225119386" /></p>
<p><strong>地址变换</strong>：虚拟存储器中还有<strong>虚拟地址</strong>到<strong>辅存实地址</strong>的变换。<br />
<strong>辅存</strong>一般按<strong>信息块</strong>编址，而不是按字编址。若使一个<strong>块</strong>的大小等于一个<strong>虚页面</strong>的大小，这样就只需把虚页号变换到Nvd即可完成虚地址到辅存实地址的变换。采用<strong>页表</strong>的方式：<strong>外页表</strong> Nv -&gt; Nvd；<strong>内页表</strong> Nv -&gt; 主存页号。</p>
<p><strong>存储管理部件</strong>(MMU)：整个虚拟存储器的管理是由<strong>MMU</strong>部件与<strong>操作系统</strong>共同完成的。</p>
<blockquote>
<p>现代计算机一般都有<strong>辅助存储器</strong>，但具有辅存的存储系统不一定是<strong>虚拟存储系统</strong>。</p>
</blockquote>
<p><strong>虚拟存储系统两大特点</strong>：</p>
<ol>
<li>允许用户用<strong>比主存空间大得多的空间</strong>来访问主存。</li>
<li>每次访存都要进行<strong>虚实地址的转换</strong>。</li>
</ol>
<h3 id="多用户虚拟存储器工作过程"><a class="markdownIt-Anchor" href="#多用户虚拟存储器工作过程"></a> 多用户虚拟存储器工作过程</h3>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702225513797.png" alt="image-20210702225513797" /></p>
<h2 id="相联存储器"><a class="markdownIt-Anchor" href="#相联存储器"></a> 相联存储器</h2>
<p><strong>相联存储器</strong>：不按<strong>地址</strong>访问存储器，而按所存<strong>数据字的全部内容或部分内容</strong>进行查找(或检索)。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702225936832.png" alt="image-20210702225936832" /></p>
<ul>
<li>比较操作<strong>并行进行</strong>（CR中的关键字段与存储器的所有W个字的相应字段同时进行比较）。</li>
<li>检索某一单元仅需要进行<strong>一次检索操作</strong>。</li>
</ul>
<hr />
<p><em>例子</em>  列出“总分”在560分～600分范围内的考生名单：（可用二次查找完成）</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702231224692.png" alt="image-20210702231224692" /></p>
<hr />
<h2 id="存储保护"><a class="markdownIt-Anchor" href="#存储保护"></a> 存储保护</h2>
<ol>
<li><strong>存储区域保护</strong>：<strong>界限寄存器</strong>，为每个程序划定存储区域，禁止越界访问。
<ol>
<li><strong>页表保护</strong>：在<strong>没形成主存地址</strong>前的保护。段表和页表本身都有自己的保护功能。无论地址如何出错，也只能影响到相应的几个主存页面。</li>
<li><strong>键保护</strong>：为主存的每一页配一个键，称为<strong>存储键</strong>，由操作系统赋予，相当于一把“锁”。为了打开这个锁，必须有钥匙，称为<strong>访问键</strong>，保存在每道程序的<strong>状态寄存器</strong>中。数据要写入主存的某一页时，访问键要与存储键相比较，<strong>相符</strong>则允许访问该页，否则拒绝访问。</li>
<li><strong>环保护</strong>：按照程序重要性以及对系统正常运行的影响进行分层，一层为一环，用<strong>环号</strong>表示，环号越小级别越高。可以对<strong>正在执行的程序本身</strong>进行保护。</li>
</ol>
</li>
<li><strong>访问方式保护</strong>：读®、写(W)和执行(E)。</li>
<li><strong>管理状态和用户状态</strong>：
<ol>
<li><strong>管理状态</strong>：执行<strong>操作系统</strong>或<strong>管理程序</strong>时所处的状态。<br />
<strong>用户状态</strong>：执行<strong>用户程序</strong>时所处的状态。</li>
<li><strong>特权指令</strong>：只有操作系统等<strong>系统程序</strong>才能使用。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>组成</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成知识点 - 运算方法与运算部件</title>
    <url>/2021/06/22/computer-computing/</url>
    <content><![CDATA[<h3 id="超前进位产生电路重要"><a class="markdownIt-Anchor" href="#超前进位产生电路重要"></a> 超前进位产生电路（重要）</h3>
<p>只要满足下述两条件中任一个，就可形成<em>C1</em>：</p>
<ol>
<li><em>X1</em>,<em>Y1</em>均为“1”；</li>
<li><em>X1</em>,<em>Y1</em>任一为“1”，且进位<em>C0</em>为“1”。</li>
</ol>
<p>由此，可得<em>C1</em>的表达式为：</p>
<img src="https://repo.live.holgerbest.top/img/image-20210413233508699.png" alt="image" style="zoom:50%;" />
<p>只要满足下述条件中任一个，就可形成C2：</p>
<ol>
<li>X2,Y2均为“1”；</li>
<li>X2,Y2任一为“1”，且X1,Y1均为“1”；</li>
<li>X2,Y2任一为“1”，同时X1,Y1任一为“1”，且C0为“1”。</li>
</ol>
<p>由此，可得C2的表达式为：</p>
<img src="https://repo.live.holgerbest.top/img/image-20210413233615079.png" alt="image" style="zoom:50%;" />
<p>同理，可有C3，C4表达式如下：</p>
<img src="https://repo.live.holgerbest.top/img/image-20210413233640782.png" alt="image" style="zoom:50%;" />
<p>下面引入进位传递函数<em>Pi</em>和进位产生函数<em>Gi</em>：</p>
<img src="https://repo.live.holgerbest.top/img/image-20210413233724723.png" alt="image" style="zoom:50%;" />
<ul>
<li><em>Pi</em>的意义是：当<em>Xi</em>，<em>Yi</em>中有一个为“1”时，若有进位输入，则本位向高位传送进位，这个进位可看成是低位进位越过本位直接向高位传递的</li>
<li><em>Gi</em>的意义是：当<em>Xi</em>，<em>Yi</em>均为“1”时，不管有无进位输入，定会产生向高位的进位</li>
</ul>
<p>将<em>Pi</em>、<em>Gi</em>代入<em>C1</em>～<em>C4</em>，可得：</p>
<img src="https://repo.live.holgerbest.top/img/image-20210413233943927.png" alt="image" style="zoom:50%;" />
<p>改写为：</p>
<img src="https://repo.live.holgerbest.top/img/image-20210413234004588.png" alt="image" style="zoom:50%;" />
<img src="https://repo.live.holgerbest.top/img/image-20210413234016885.png" alt="image" style="zoom:80%;" />
<h3 id="数制"><a class="markdownIt-Anchor" href="#数制"></a> 数制</h3>
<ul>
<li>二进制数 &lt;=&gt; 八进制数：3位二进制数组成1位八进制数</li>
<li>二进制数 &lt;=&gt; 十六进制数：4位二进制数组成1位十六进制数
<ul>
<li>兼有整数和小数部分的数：对整数部分将0补在数的左侧，对小数部分将0补在数的右侧</li>
</ul>
</li>
<li>八进制数 &lt;=&gt; 十六进制数：用二进制数作为中间媒介</li>
<li>二进制数 =&gt; 十进制数：<img src="https://repo.live.holgerbest.top/img/image-20210413234501948.png" alt="image" style="zoom:50%;" /></li>
<li>十进制数 =&gt; 二进制数：
<ul>
<li>整数部分：除2取余数法（到商为零，倒序排列）</li>
<li>小数部分：乘2取整数法（到小数为零或达精度，正序排列）</li>
<li>既有整数部分，又有小数部分：分别转换后拼接</li>
</ul>
</li>
</ul>
<h3 id="机器数"><a class="markdownIt-Anchor" href="#机器数"></a> 机器数</h3>
<blockquote>
<p>假设机器数为小数，符号位在最左面，小数点在符号位和数值之间，数的真值用X表示。</p>
</blockquote>
<h4 id="原码"><a class="markdownIt-Anchor" href="#原码"></a> 原码</h4>
<img src="https://repo.live.holgerbest.top/img/image-20210413235014651.png" alt="原码" style="zoom:50%;" />
<h4 id="反码"><a class="markdownIt-Anchor" href="#反码"></a> 反码</h4>
<img src="https://repo.live.holgerbest.top/img/image-20210413235043292.png" alt="反码" style="zoom:50%;" />
<h4 id="补码"><a class="markdownIt-Anchor" href="#补码"></a> 补码</h4>
<img src="https://repo.live.holgerbest.top/img/image-20210413235148401.png" alt="补码" style="zoom:50%;" />
<h4 id="整数的表示形式"><a class="markdownIt-Anchor" href="#整数的表示形式"></a> 整数的表示形式</h4>
<img src="https://repo.live.holgerbest.top/img/image-20210413235259722.png" alt="整数的表示形式" style="zoom:50%;" />
<h4 id="加减法溢出判断"><a class="markdownIt-Anchor" href="#加减法溢出判断"></a> 加减法溢出判断</h4>
<ol>
<li>结果的符号位变为相反时才溢出：<img src="https://repo.live.holgerbest.top/img/image-20210413235409858.png" style="zoom:50%;" /></li>
<li>数值最高位进位和符号位进位不同才溢出：<img src="https://repo.live.holgerbest.top/img/image-20210413235534932.png" alt="image" style="zoom:50%;" /></li>
<li>双符号位（“变形补码”）：00表示结果为正，11表示结果为负；01表示“上溢”，10表示“下溢”</li>
</ol>
<h4 id="移码"><a class="markdownIt-Anchor" href="#移码"></a> 移码</h4>
<img src="https://repo.live.holgerbest.top/img/image-20210413235938939.png" alt="移码" style="zoom:50%;" />
<h4 id="浮点数"><a class="markdownIt-Anchor" href="#浮点数"></a> 浮点数</h4>
<p>浮点数：指小数点位置可浮动的数据</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>=</mo><mi>M</mi><mo>⋅</mo><msup><mi>R</mi><mi>E</mi></msup></mrow><annotation encoding="application/x-tex">N=M\cdot R^E
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>N是浮点数，M为尾数，E为阶码，R为阶的基数(底)</p>
<img src="https://repo.live.holgerbest.top/img/image-20210413235822277.png" alt="浮点数" style="zoom:50%;" />
<h4 id="规格化浮点数"><a class="markdownIt-Anchor" href="#规格化浮点数"></a> 规格化浮点数</h4>
<p>为了保证数据精度，需要对其进行规格化。</p>
<p>当R=2，尾数不为0时，绝对值应大于或等于0.5(十进制数)</p>
<p>即规格化后的浮点数具有形式：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>±</mo><mn>0.1</mn><mi>b</mi><mi>b</mi><mi>b</mi><mo>⋯</mo><mi>b</mi><mi>b</mi><mo>×</mo><msup><mi>R</mi><mrow><mo>±</mo><mi>E</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\plusmn 0.1bbb\cdots bb \times R ^{\plusmn E}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">±</span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord mathdefault">b</span><span class="mord mathdefault">b</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">±</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>若表示为补码则为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.1</mn><mi>b</mi><mi>b</mi><mi>b</mi><mo>⋯</mo><mi>b</mi><mi>b</mi><mo>×</mo><msup><mi>R</mi><mi>E</mi></msup><mspace linebreak="newline"></mspace><mn>1.0</mn><mi>b</mi><mi>b</mi><mi>b</mi><mo>⋯</mo><mi>b</mi><mi>b</mi><mo>×</mo><msup><mi>R</mi><mi>E</mi></msup></mrow><annotation encoding="application/x-tex">0.1bbb\cdots bb \times R ^{E} \\ 
1.0bbb\cdots bb \times R ^{E}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord mathdefault">b</span><span class="mord mathdefault">b</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">0</span><span class="mord mathdefault">b</span><span class="mord mathdefault">b</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<h4 id="ieee-754标准"><a class="markdownIt-Anchor" href="#ieee-754标准"></a> IEEE 754标准</h4>
<ul>
<li>单精度浮点数(32位):阶码8位，尾数24位(1位符号位)</li>
<li>双精度浮点数(64位):阶码11位，尾数53位(1位符号位)</li>
<li>阶码采用移码，尾数采用原码</li>
<li>规格化原码尾数的整数部分恒为1，在尾数中不出现，计算时自动添加上去</li>
</ul>
<img src="https://repo.live.holgerbest.top/img/image-20210414000452406.png" alt="IEEE-754标准" style="zoom:50%;" />
<h4 id="数值范围和精度"><a class="markdownIt-Anchor" href="#数值范围和精度"></a> 数值范围和精度</h4>
<img src="https://repo.live.holgerbest.top/img/image-20210414000532516.png" alt="数值范围和精度" style="zoom:50%;" />
<div class="note success flat"><p><strong>定点整数范围</strong></p>
<p>设机器字长 n+1 位，其中符号位1位。</p>
<ul>
<li>原码机器表示范围：111…1 ~ 011…1
<ul>
<li>最大正数：<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{n}-1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
</li>
<li>非零最小正数：1</li>
<li>绝对值最大的负数：<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-(2^{n}-1)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p>
</li>
</ul>
</li>
<li>补码机器表示范围：100…0 ~ 011…1
<ul>
<li>最大正数：<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{n}-1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
</li>
<li>最小正数：1</li>
<li>绝对值最大的负数：100…0<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">-2^{n}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
</ul>
</li>
</ul>
<p><strong>定点小数范围</strong></p>
<p>设机器字长 n+1 位，其中符号位1位。</p>
<ul>
<li>原码机器表示范围：1.11…1 ~ 0.11…1
<ul>
<li>最大正数：0.11…1<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">1-2^{-n}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.821331em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>非零最小正数：0.00…1<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-n}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.821331em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>绝对值最大负数：1.11…1<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-(1-2^{-n})
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.071331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
</li>
</ul>
</li>
<li>补码机器表示范围：100…0 ~ 011…1
<ul>
<li>最大正数：0.11…1<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{n}-1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
</li>
<li>非零最小正数：0.00…1<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-n}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.821331em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>绝对值最大负数：1.00…0 = -1</li>
</ul>
</li>
</ul>
<p><strong>浮点数范围</strong></p>
<p>设机器字长 m+n+2 位，阶码 m+1 位，其中阶符1位；尾数 n+1 位，其中数符1位（阶码基数为2），若阶码和尾数均用补码表示，说明在尾数规格化和不规格化两种情况下，它所能表示的最大正数，非零最小正数，绝对值最大的的负数，绝对值最小的负数各是哪几个数？写出机器数，并给出十进制值（不采用隐藏位）。若阶码用移码，尾数仍用补码，上述各值有变化吗？若有变化，请列出。</p>
<p><strong>补码规格化</strong></p>
<ul>
<li>
<p>最大正数：阶码 011…1（m+1 位） ，尾数 0.11…1（n+1 位），真值</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><msup><mn>2</mn><mi>m</mi></msup><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">(1-2^{-n})\times 2^{2^m-1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.071331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.92998em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>非零最小正数：阶码 100…0（m+1 位） ，尾数 0.10…0（n+1 位），真值</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><msup><mn>2</mn><mi>m</mi></msup></mrow></msup><mo>=</mo><msup><mn>2</mn><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>m</mi></msup><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-1}\times 2^{-2^m}=2^{-(2^m+1)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.947438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.92998em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>绝对值最小负数：阶码 100…0（m+1 位） ，尾数 1.01…1（n+1 位），真值</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><msup><mn>2</mn><mi>m</mi></msup></mrow></msup></mrow><annotation encoding="application/x-tex">-(2^{-1}+2^{-n})\times 2^{-2^m}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.071331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.92998em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>绝对值最大负数：阶码 011…1（m+1 位） ，尾数 1.00…0（n+1 位），真值</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn><mo>×</mo><msup><mn>2</mn><mrow><msup><mn>2</mn><mi>m</mi></msup><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">-1\times 2^{2^m-1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.92998em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
</ul>
<p><strong>补码非规格化</strong></p>
<ul>
<li>最大正数：阶码 011…1（m+1 位） ，尾数 0.11…1（n+1 位），真值<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><msup><mn>2</mn><mi>m</mi></msup><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">(1-2^{-n})\times 2^{2^m-1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.071331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.92998em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>非零最小正数：阶码 100…0（m+1 位） ，尾数 0.00…1（n+1 位），真值<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><msup><mn>2</mn><mi>m</mi></msup></mrow></msup><mo>=</mo><msup><mn>2</mn><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>m</mi></msup><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-n}\times 2^{-2^m}=2^{-(2^m+n)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.904661em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.92998em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>绝对值最小负数：阶码 100…0（m+1 位） ，尾数 1.11…1（n+1 位），真值<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><msup><mn>2</mn><mi>m</mi></msup></mrow></msup><mo>=</mo><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>m</mi></msup><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">-2^{-n}\times 2^{-2^m} = -2^{-(2^m+n)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.904661em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.92998em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0213299999999998em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>绝对值最大负数：阶码 011…1（m+1 位） ，尾数 1.00…0（n+1 位），真值<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn><mo>×</mo><msup><mn>2</mn><mrow><msup><mn>2</mn><mi>m</mi></msup><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">-1\times 2^{2^m-1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.92998em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.92998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
</ul>
<p><strong>阶码用移码，尾数仍用补码</strong></p>
<ul>
<li>
<p>若不考虑溢出，上述各值无变化，只是阶码符号位取反。</p>
</li>
<li>
<p>若考虑到下溢处理，若阶码</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≤</mo><mo>−</mo><msup><mn>2</mn><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">\leq -2^{m}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>按下溢处理成<strong>机器零</strong>。故非零最小正数和绝对值最小负数如下表所示：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">规格化</th>
<th style="text-align:center">非规格化</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">非零最小正数</td>
<td style="text-align:center"><div class="MathJax_SVG_Display" style="text-align: center;"><span class="MathJax_SVG" id="MathJax-Element-133-Frame" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="20.88ex" height="2.393ex" viewBox="0 -971.5 8990.2 1030.5" role="img" focusable="false" style="vertical-align: -0.137ex; max-width: 100%;" class="in-text-selection"><defs><path stroke-width="0" id="E342-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path stroke-width="0" id="E342-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path stroke-width="0" id="E342-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path stroke-width="0" id="E342-MJMAIN-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path stroke-width="0" id="E342-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path stroke-width="0" id="E342-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path stroke-width="0" id="E342-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E342-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E342-MJMAIN-2212" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E342-MJMAIN-31" x="778" y="0"></use></g><use xlink:href="#E342-MJMAIN-D7" x="1725" y="0"></use><g transform="translate(2726,0)"><use xlink:href="#E342-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E342-MJMAIN-2212" x="0" y="0"></use><g transform="translate(550,0)"><use transform="scale(0.707)" xlink:href="#E342-MJMAIN-32" x="0" y="0"></use><use transform="scale(0.5)" xlink:href="#E342-MJMATHI-6D" x="707" y="555"></use></g><use transform="scale(0.707)" xlink:href="#E342-MJMAIN-2B" x="1998" y="0"></use><use transform="scale(0.707)" xlink:href="#E342-MJMAIN-31" x="2776" y="0"></use></g></g><use xlink:href="#E342-MJMAIN-3D" x="5920" y="0"></use><g transform="translate(6976,0)"><use xlink:href="#E342-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E342-MJMAIN-2212" x="0" y="0"></use><g transform="translate(550,0)"><use transform="scale(0.707)" xlink:href="#E342-MJMAIN-32" x="0" y="0"></use><use transform="scale(0.5)" xlink:href="#E342-MJMATHI-6D" x="707" y="555"></use></g></g></g></g></svg></span></div><script type="math/tex; mode=display" id="MathJax-Element-133">2^{-1}\times 2<sup>{-2</sup>m+1}=2<sup>{-2</sup>m}</script> 					</div></div></td>
<td style="text-align:center"><div class="MathJax_SVG_Display" style="text-align: center;"><span class="MathJax_SVG" id="MathJax-Element-130-Frame" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="29.021ex" height="2.658ex" viewBox="0 -971.5 12494.9 1144.5" role="img" focusable="false" style="vertical-align: -0.402ex; max-width: 100%;" class="in-text-selection"><defs><path stroke-width="0" id="E329-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path stroke-width="0" id="E329-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path stroke-width="0" id="E329-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path stroke-width="0" id="E329-MJMAIN-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path stroke-width="0" id="E329-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path stroke-width="0" id="E329-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path stroke-width="0" id="E329-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path stroke-width="0" id="E329-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E329-MJMAIN-2212" x="0" y="0"></use><g transform="translate(778,0)"><use xlink:href="#E329-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2212" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E329-MJMATHI-6E" x="778" y="0"></use></g></g><use xlink:href="#E329-MJMAIN-D7" x="2574" y="0"></use><g transform="translate(3574,0)"><use xlink:href="#E329-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2212" x="0" y="0"></use><g transform="translate(550,0)"><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-32" x="0" y="0"></use><use transform="scale(0.5)" xlink:href="#E329-MJMATHI-6D" x="707" y="555"></use></g><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2B" x="1998" y="0"></use><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-31" x="2776" y="0"></use></g></g><use xlink:href="#E329-MJMAIN-3D" x="6769" y="0"></use><use xlink:href="#E329-MJMAIN-2212" x="7825" y="0"></use><g transform="translate(8603,0)"><use xlink:href="#E329-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2212" x="0" y="0"></use><g transform="translate(550,0)"><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-32" x="0" y="0"></use><use transform="scale(0.5)" xlink:href="#E329-MJMATHI-6D" x="707" y="555"></use></g><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2212" x="1998" y="0"></use><use transform="scale(0.707)" xlink:href="#E329-MJMATHI-6E" x="2776" y="0"></use><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2B" x="3376" y="0"></use><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-31" x="4154" y="0"></use></g></g></g></svg></span></div><script type="math/tex; mode=display" id="MathJax-Element-130">-2^{-n}\times 2<sup>{-2</sup>m+1}=-2<sup>{-2</sup>m-n+1}</script></div></div></td>
</tr>
<tr>
<td style="text-align:center">绝对值最小负数</td>
<td style="text-align:center"><div class="MathJax_SVG_Display" style="text-align: center;"><span class="MathJax_SVG" id="MathJax-Element-111-Frame" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="23.217ex" height="3.056ex" viewBox="0 -971.5 9996 1315.6" role="img" focusable="false" style="vertical-align: -0.799ex; max-width: 100%;" class="in-text-selection"><defs><path stroke-width="0" id="E299-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path stroke-width="0" id="E299-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path stroke-width="0" id="E299-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path stroke-width="0" id="E299-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path stroke-width="0" id="E299-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path stroke-width="0" id="E299-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path stroke-width="0" id="E299-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path stroke-width="0" id="E299-MJMAIN-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path stroke-width="0" id="E299-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E299-MJMAIN-2212" x="0" y="0"></use><use xlink:href="#E299-MJMAIN-28" x="778" y="0"></use><g transform="translate(1167,0)"><use xlink:href="#E299-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E299-MJMAIN-2212" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E299-MJMAIN-31" x="778" y="0"></use></g></g><use xlink:href="#E299-MJMAIN-2B" x="2892" y="0"></use><g transform="translate(3893,0)"><use xlink:href="#E299-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E299-MJMAIN-2212" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E299-MJMATHI-6E" x="778" y="0"></use></g></g><use xlink:href="#E299-MJMAIN-29" x="5467" y="0"></use><use xlink:href="#E299-MJMAIN-D7" x="6078" y="0"></use><g transform="translate(7078,0)"><use xlink:href="#E299-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E299-MJMAIN-2212" x="0" y="0"></use><g transform="translate(550,0)"><use transform="scale(0.707)" xlink:href="#E299-MJMAIN-32" x="0" y="0"></use><use transform="scale(0.5)" xlink:href="#E299-MJMATHI-6D" x="707" y="555"></use></g><use transform="scale(0.707)" xlink:href="#E299-MJMAIN-2B" x="1998" y="0"></use><use transform="scale(0.707)" xlink:href="#E299-MJMAIN-31" x="2776" y="0"></use></g></g></g></svg></span></div><script type="math/tex; mode=display" id="MathJax-Element-111">-(2<sup>{-1}+2</sup>{-n})\times 2<sup>{-2</sup>m+1}</script> 					</div></div></td>
<td style="text-align:center"><div class="MathJax_SVG_Display" style="text-align: center;"><span class="MathJax_SVG" id="MathJax-Element-130-Frame" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="29.021ex" height="2.658ex" viewBox="0 -971.5 12494.9 1144.5" role="img" focusable="false" style="vertical-align: -0.402ex; max-width: 100%;" class="in-text-selection"><defs><path stroke-width="0" id="E329-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path stroke-width="0" id="E329-MJMAIN-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path stroke-width="0" id="E329-MJMATHI-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path stroke-width="0" id="E329-MJMAIN-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path stroke-width="0" id="E329-MJMATHI-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path stroke-width="0" id="E329-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path stroke-width="0" id="E329-MJMAIN-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path stroke-width="0" id="E329-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E329-MJMAIN-2212" x="0" y="0"></use><g transform="translate(778,0)"><use xlink:href="#E329-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2212" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E329-MJMATHI-6E" x="778" y="0"></use></g></g><use xlink:href="#E329-MJMAIN-D7" x="2574" y="0"></use><g transform="translate(3574,0)"><use xlink:href="#E329-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2212" x="0" y="0"></use><g transform="translate(550,0)"><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-32" x="0" y="0"></use><use transform="scale(0.5)" xlink:href="#E329-MJMATHI-6D" x="707" y="555"></use></g><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2B" x="1998" y="0"></use><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-31" x="2776" y="0"></use></g></g><use xlink:href="#E329-MJMAIN-3D" x="6769" y="0"></use><use xlink:href="#E329-MJMAIN-2212" x="7825" y="0"></use><g transform="translate(8603,0)"><use xlink:href="#E329-MJMAIN-32" x="0" y="0"></use><g transform="translate(500,412)"><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2212" x="0" y="0"></use><g transform="translate(550,0)"><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-32" x="0" y="0"></use><use transform="scale(0.5)" xlink:href="#E329-MJMATHI-6D" x="707" y="555"></use></g><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2212" x="1998" y="0"></use><use transform="scale(0.707)" xlink:href="#E329-MJMATHI-6E" x="2776" y="0"></use><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-2B" x="3376" y="0"></use><use transform="scale(0.707)" xlink:href="#E329-MJMAIN-31" x="4154" y="0"></use></g></g></g></svg></span></div><script type="math/tex; mode=display" id="MathJax-Element-130">-2^{-n}\times 2<sup>{-2</sup>m+1}=-2<sup>{-2</sup>m-n+1}</script></div></div></td>
</tr>
</tbody>
</table>
<p><strong>浮点数精度问题</strong></p>
<p>浮点数精度 x 取决于尾数中数值位的个数 n，计算公式为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>=</mo><mn>1</mn><msup><mn>0</mn><mi>x</mi></msup><mtext> </mtext><mo>⟺</mo><mtext> </mtext><mi>x</mi><mo>=</mo><mi>n</mi><mo>⋅</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo><mo>≈</mo><mn>0.301</mn></mrow><annotation encoding="application/x-tex">2^n=10^x \ \Longleftrightarrow \ x=n\cdot log(2) \ , \ log(2) \approx 0.301
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7383919999999999em;vertical-align:-0.024em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span><span class="mord">0</span><span class="mord">1</span></span></span></span></span></p>
</div>
<h3 id="定点数乘法重要"><a class="markdownIt-Anchor" href="#定点数乘法重要"></a> 定点数乘法（重要）</h3>
<h4 id="定点原码一位乘法"><a class="markdownIt-Anchor" href="#定点原码一位乘法"></a> 定点原码一位乘法</h4>
<ul>
<li>求得一个相加数，就与上次部分积相加</li>
<li>求本次部分积时，前一次部分积 &gt;&gt; 一位，同时乘数寄存器 &gt;&gt; 一位，接受部分积移出的位数</li>
</ul>
<img src="https://repo.live.holgerbest.top/img/image-20210414002857510.png" alt="原码一位乘法" style="zoom: 50%;" />
<h4 id="定点补码一位乘法"><a class="markdownIt-Anchor" href="#定点补码一位乘法"></a> 定点补码一位乘法</h4>
<ul>
<li>当乘数Y为正时，定点补码一位乘法的运算过程与定点原码一位乘法相同。</li>
<li>当乘数Y为负时，还需要补充进行加[-X]补操作。</li>
</ul>
<p>例：设X=-0.1101，Y=0.1011，求[X·Y]补，要求写出定点补码一位乘法的机器实现过程。</p>
<img src="https://repo.live.holgerbest.top/img/image-20210414004002671.png" style="zoom: 50%;"/>
<h4 id="布斯一位乘法规则"><a class="markdownIt-Anchor" href="#布斯一位乘法规则"></a> 布斯一位乘法规则</h4>
<img src="https://repo.live.holgerbest.top/img/image-20210414003353161.png" alt="布斯公式" style="zoom: 50%;" />
<img src="https://repo.live.holgerbest.top/img/image-20210414003530025.png" alt="image-20210414003530025" style="zoom:67%;" />
<h4 id="定点数两位乘法"><a class="markdownIt-Anchor" href="#定点数两位乘法"></a> 定点数两位乘法</h4>
<p>两位乘数有4种可能组合，对应以下操作：</p>
<ul>
<li>00——相当于0•X，部分积为Pi +0，然后右移两位；</li>
<li>01——相当于1•X，部分积为Pi+X，然后右移两位；</li>
<li>10——相当于2•X，部分积为Pi+2X，然后右移两位；</li>
<li>11——相当于3•X，部分积为Pi+3X，用 (Pi - X)+4X 来替代：本次-X，然后右移两位，下次+X，不再移位。<strong>使用触发器C记录是否有欠位</strong></li>
<li>如果最后一次操作欠下+4X，则最后一次右移2位后还需补充+X操作，+X后不再移位。</li>
</ul>
<img src="https://repo.live.holgerbest.top/img/image-20210414003830005.png" alt="image-20210414003830005" style="zoom:67%;" />
<h3 id="浮点数运算"><a class="markdownIt-Anchor" href="#浮点数运算"></a> 浮点数运算</h3>
<h4 id="加减法重要"><a class="markdownIt-Anchor" href="#加减法重要"></a> 加减法（重要）</h4>
<img src="https://repo.live.holgerbest.top/img/image-20210414004016795.png" alt="image-20210414004016795" style="zoom:80%;" />
<ol>
<li><strong>对阶</strong>：dE=|Ex-Ey|；小阶向大阶看齐。（保留大阶）</li>
<li>尾数的加（减）运算。</li>
<li><strong>规格化</strong>处理
<ul>
<li>如果结果的<strong>两个符号位的值不同</strong>，表示运算<strong>尾数结果溢出</strong>，应“右规”，即尾数结果<strong>右移一位</strong>，<strong>阶码+1</strong>。</li>
<li>如果<strong>最高数值位与符号位相同</strong>（不满足规格化要求），应“左规”，此时<strong>尾数连续左移</strong>，直到最高数值位与符号位的值<strong>不同为止</strong>；同时从阶码中<strong>减去移位的位数</strong>。</li>
</ul>
</li>
<li><strong>舍入</strong>处理。<strong>0舍1入法</strong></li>
<li>检查是否<strong>溢出</strong>。
<ul>
<li>阶码下溢：置机器零</li>
<li>阶码上溢：置上溢标志</li>
</ul>
</li>
</ol>
<img src="https://repo.live.holgerbest.top/img/image-20210414004613715.png" alt="image-20210414004613715" style="zoom:67%;" />
<h4 id="乘法"><a class="markdownIt-Anchor" href="#乘法"></a> 乘法</h4>
<ol>
<li>检测操作数是否为0，若其中有一个操作数为0，则置结果为0；</li>
<li><strong>阶码相加</strong>，阶符相同的加可能会溢出，若<strong>溢出</strong>，则<strong>作溢出处理</strong>；</li>
<li><strong>尾数相乘</strong>；</li>
<li>尾数乘积<strong>规格化</strong>，只有左规；</li>
<li><strong>舍入</strong>
<ul>
<li><strong>截断处理</strong>：<strong>无条件地丢掉</strong>正常尾数最低位之后的全部数值</li>
<li><strong>舍入处理</strong>：运算过程中保留右移中移出的若干高位的值，然而再按某种规则（<strong>0舍1入法</strong>）用这些位上的值修正尾数</li>
</ul>
</li>
<li>判<strong>溢出</strong></li>
</ol>
<h3 id="奇偶校验码"><a class="markdownIt-Anchor" href="#奇偶校验码"></a> 奇偶校验码</h3>
<blockquote>
<p>通过在数据位中加入一些冗余位，从而达到在数据传输过程中能自动发现错误（检错码）和校正错误（纠错码）</p>
</blockquote>
<p>编码方法:</p>
<ul>
<li>不管数据位长度多少，校验位只有一位。</li>
<li><strong>数据位和校验位一起</strong>所含“1”的个数，只能是奇数，称为奇校验。</li>
<li><strong>数据位和校验位一起</strong>所含“1”的个数，只能是偶数，称为偶校验。</li>
</ul>
<p>只能发现一位错(或奇数个位错)，不能确定是哪一位错，也不能发现偶数个位错。</p>
<img src="https://repo.live.holgerbest.top/img/image-20210414000959007.png" alt="奇偶校验码" style="zoom:80%;" />
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>组成</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成知识点 - 辅助存储器，I/O设备与系统</title>
    <url>/2021/07/03/computer-ch-8-10/</url>
    <content><![CDATA[<blockquote>
<p>该部分不考解答题。</p>
</blockquote>
<h1 id="辅助存储器"><a class="markdownIt-Anchor" href="#辅助存储器"></a> 辅助存储器</h1>
<h2 id="种类与技术指标"><a class="markdownIt-Anchor" href="#种类与技术指标"></a> 种类与技术指标</h2>
<h3 id="种类"><a class="markdownIt-Anchor" href="#种类"></a> 种类</h3>
<ul>
<li><strong>磁表面存储器</strong>：磁性材料沉积在盘片(或带)的基体上形成记录介质</li>
<li><strong>光存储器</strong>：利用激光束在具有感光特性的表面上存储信息</li>
<li><strong>半导体存储器</strong></li>
</ul>
<h3 id="技术指标"><a class="markdownIt-Anchor" href="#技术指标"></a> 技术指标</h3>
<p><strong>存储密度</strong>：<strong>单位长度或单位面积</strong>磁层表面所存储的<strong>二进制信息量</strong>。</p>
<p><strong>道密度</strong>：沿磁盘半径方向<strong>单位长度的磁道数</strong></p>
<p><strong>位密度</strong>、<strong>线密度</strong>：<strong>单位长度磁道</strong>所能记录<strong>二进制信息的位数</strong>。单位是位/英寸（bpi）</p>
<ul>
<li>磁盘存储器：用<strong>道密度</strong>和<strong>位密度</strong>表示；<strong>面密度=道密度×位密度</strong></li>
<li>磁带存储器：用<strong>位密度</strong>表示</li>
</ul>
<p><strong>磁道</strong>：存储在介质表面上的信息的磁化轨迹。（磁盘表面上的许多同心圆）</p>
<p><strong>柱面</strong>：在有多个盘片构成的盘组中，由处于<strong>同一半径</strong>的<strong>磁道</strong>组成的一个<strong>圆柱面</strong></p>
<p><strong>道宽</strong>：磁道的宽度</p>
<p><strong>道距</strong>：为避免干扰，磁道与磁道之间需保持一定距离，<strong>相邻两条磁道中心线之间的距离</strong>叫道距</p>
<p><strong>存储容量</strong>：磁表面存储器所能存储的<strong>二进制信息总量</strong>。一般用<strong>字节</strong>为单位。</p>
<ul>
<li><strong>格式化容量</strong>：按照<strong>某种特定的记录格式</strong>所能存储信息的总量，也就是用户<strong>真正可以使用的容量</strong></li>
<li><strong>非格式化容量</strong>：磁记录表面<strong>可以利用的磁化单元总数</strong></li>
</ul>
<blockquote>
<p>格式化容量一般约为非格式化容量的60%～70%。</p>
</blockquote>
<p><strong>寻址时间</strong>：<strong>找道时间</strong> + <strong>等待时间</strong> （磁盘采取<strong>直接存取</strong>方式）</p>
<ul>
<li>ts：磁头寻找目标磁道所需的<strong>找道时间</strong></li>
<li>tw：找到磁道以后，磁头等待所需要读写的区段旋转到它的下方所需要的<strong>等待时间</strong></li>
</ul>
<p><strong>平均寻址时间</strong>：由平均找道时间Tsa和平均等待时间Twa组成。<br />
Ta = Tsa + Twa＝(Tsmax + Tsmin)/2 + (Twmax + Twmin)/2</p>
<ul>
<li><strong>硬磁盘存储器</strong>比软磁盘存储器的平均寻址时间<strong>短</strong>。</li>
<li><strong>磁带存储器</strong>采取<strong>顺序存取</strong>方式，不需要寻找磁道，但需要考虑磁头寻找记录区的等待时间。</li>
</ul>
<p><strong>数据传输率</strong>Dr：磁表面存储器在<strong>单位时间内</strong>与<strong>主机</strong>之间传送数据的<strong>位数或字节数</strong>。与<strong>存储设备</strong>和<strong>主机接口逻辑</strong>两者有关。Dr = 记录密度D × 记录介质的运动速度V。</p>
<p><strong>误码率</strong>：从辅存读出时，<strong>出错信息位数</strong>和<strong>读出的总信息位数</strong>之比。是衡量磁表面存储器<strong>出错概率</strong>的参数。</p>
<p><strong>价格</strong>：通常用<strong>位价格</strong>（设备价格除以容量）来比较各种存储器。<strong>磁表面存储器和光盘存储器</strong>的位价格低。</p>
<h3 id="磁记录原理与记录方式"><a class="markdownIt-Anchor" href="#磁记录原理与记录方式"></a> 磁记录原理与记录方式</h3>
<p><strong>原理</strong>：磁表面存储器通过磁头和记录介质的<strong>相对运动</strong>完成写入和读出，是<strong>电磁转换</strong>过程。</p>
<p><strong>磁记录方式</strong>：一种编码方法，指的是按照某种规律将一连串<strong>二进制数字信息</strong>变换成<strong>存储介质磁层</strong>的相应<strong>磁化翻转形式</strong>，并经读写控制电路实现这种转换规律。</p>
<h2 id="磁盘存储器"><a class="markdownIt-Anchor" href="#磁盘存储器"></a> 磁盘存储器</h2>
<h3 id="种类-2"><a class="markdownIt-Anchor" href="#种类-2"></a> 种类</h3>
<p><strong>磁盘存储器</strong>：<strong>硬盘存储器</strong>和<strong>软盘存储器</strong>。</p>
<p>根据<strong>磁头的工作方式</strong>分类：移动头磁盘存储器和固定头磁盘存储器。</p>
<p>根据<strong>磁盘可换与否</strong>分类：可换盘存储器和固定盘存储器两种。</p>
<p><strong>温彻斯特磁盘</strong>（温盘），是一种<strong>可移动磁头固定盘片</strong>的磁盘存储器，它是<u>目前应用最广，最有代表性</u>的硬磁盘存储器。</p>
<h3 id="基本结构"><a class="markdownIt-Anchor" href="#基本结构"></a> 基本结构</h3>
<p>磁盘存储器由<strong>驱动器</strong>(hard disk drive，简称HDD)和<strong>控制器</strong>(hard disk controller，简称HDC)组成。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210702235123289.png" alt="image-20210702235123289" /></p>
<ul>
<li>磁道(track)：一系列的<strong>同心圆</strong>。</li>
<li>扇区(Sector)：磁道组成的<strong>扇形表面</strong>。扇区包括了<strong>固定数量的字节</strong>。</li>
</ul>
<p><strong>数据</strong>储存在盘片表面的<strong>扇区</strong>和<strong>磁道</strong>里。</p>
<h3 id="磁盘格式化"><a class="markdownIt-Anchor" href="#磁盘格式化"></a> 磁盘格式化</h3>
<ul>
<li><strong>低级格式化</strong>：在盘片上建立<strong>扇区和磁道</strong>，每个扇区的<strong>开始和结束部分</strong>都被写到了盘片上，这个处理使硬盘准备开始以byte的形式保持数据。</li>
<li><strong>高级格式化</strong>：写入<strong>文件储存的结构</strong>，例如把文件分配表写入到扇区，这个过程使硬盘准备保持文件。</li>
</ul>
<blockquote>
<p><strong>磁盘cache</strong>：增强<strong>相对慢速存储设备</strong>存取速度的<strong>暂存存储器</strong>，弥补慢速磁盘和主存之间的速度差异。</p>
</blockquote>
<h3 id="磁盘阵列存储器"><a class="markdownIt-Anchor" href="#磁盘阵列存储器"></a> 磁盘阵列存储器</h3>
<p><strong>廉价冗余磁盘阵列</strong>(Redundent Array Of Inexpensive Disk，简称<strong>RAID</strong>)：用多台磁盘存储器组成的大容量外存储子系统。</p>
<p><strong>数据分块技术</strong>：在多个磁盘上<strong>交错存放数据</strong>，使之可以<strong>并行存取</strong>。</p>
<p>可以利用<strong>冗余信息</strong>重建用户数据。</p>
<p>RAID分为<strong>8级</strong>（0–7）是表示具有下列3个共同特性的不同设计结构：</p>
<ol>
<li>RAID是一组物理磁盘驱动器，在OS下被视为一个单逻辑驱动器</li>
<li>数据分布在<strong>一组物理磁盘</strong>上；</li>
<li>冗余磁盘容量用于存储<strong>校验信息</strong>，保证磁盘万一损坏时能恢复数据。（RAID 0不支持该特性）</li>
</ol>
<ul>
<li>RAID 0级(无冗余和无校验的数据分块)</li>
<li>RAID 1级(镜像磁盘阵列)</li>
<li>RAID 2级(具有纠错海明码的磁盘阵列)</li>
<li>RAID 3级(采用奇偶校验码和位交叉存取的磁盘阵列)</li>
<li>RAID 4级(采用奇偶校验码和扇区交叉的磁盘阵列)</li>
<li>RAID 5级(无专用校验盘的奇偶校验磁盘阵列)</li>
<li>RAID 6级(采用分块交叉技术和双磁盘容错的磁盘阵列)</li>
<li>RAID 7级(独立接口的磁盘阵列)</li>
<li>RAID 10级(RAID 0级+RAID 1级)</li>
</ul>
<p><strong>位交叉存取</strong>：将一个数据字中的各<strong>位</strong>分别存储在不同的磁盘上，以<strong>同步</strong>方式进行读写，最小访问数据单位是<strong>每个磁盘的扇区</strong>，适合传送<strong>大批量数据</strong>。</p>
<p><strong>块交叉存取</strong>：以<strong>数据块</strong>为单位，将<strong>连续的数据块</strong>分别存储在不同的磁盘上，最小访问数据单位是<strong>一个磁盘的扇区</strong>，适合传送<strong>小批量数据</strong>。</p>
<h2 id="磁带存储器"><a class="markdownIt-Anchor" href="#磁带存储器"></a> 磁带存储器</h2>
<p><strong>记录方式</strong>：开盘式磁带，数据流磁带</p>
<p><strong>磁带和磁盘的区别</strong>：</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703000935191.png" alt="image-20210703000935191" /></p>
<h2 id="光盘存储器"><a class="markdownIt-Anchor" href="#光盘存储器"></a> 光盘存储器</h2>
<p><strong>种类</strong></p>
<ul>
<li>CR-ROM 只读</li>
<li>WORM 一次写入</li>
<li>可擦写型</li>
</ul>
<p>CD-ROM的<strong>数据传输率</strong>：单倍速 150 KB/s，n倍速 n×150 KB/s</p>
<p><strong>读写原理</strong>：</p>
<ul>
<li><strong>光存储技术</strong>：应用激光在某种介质上写入信息，然后再利用<strong>激光</strong>读出信息的技术</li>
<li><strong>磁光存储</strong>：光存储使用的介质是<strong>磁性</strong>材料，亦即利用<strong>激光</strong>在磁记录介质上存储信息</li>
</ul>
<p><strong>记录原理</strong>：形变、相变和M-O存储等。</p>
<p><strong>CD-ROM块格式</strong>：Sync + ID + Data + L.ECC</p>
<h2 id="固态盘"><a class="markdownIt-Anchor" href="#固态盘"></a> 固态盘</h2>
<p><strong>固态盘</strong>（SSD）：采用<strong>半导体存储介质</strong>和<strong>传统磁盘接口</strong>的存储器。</p>
<p><strong>存储介质</strong>：DRAM或NVRAM(非易性随机存储器)或NAND闪存。</p>
<blockquote>
<p>DRAM、NAND、硬盘速度分别以ns、us、ms计算。</p>
</blockquote>
<h1 id="io设备"><a class="markdownIt-Anchor" href="#io设备"></a> I/O设备</h1>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703001312400.png" alt="image-20210703001312400" /></p>
<h2 id="输入设备"><a class="markdownIt-Anchor" href="#输入设备"></a> 输入设备</h2>
<p><strong>键盘</strong>：由一组排列成阵列形式的按键开关组成的，每按下一个键，产生一个相应的字符代码(每个按键的位置码)，然后将它转换成ASCII码或其他码，送主机。常用的标准键盘有<strong>101</strong>个键。</p>
<p>ASCII码：每个字符是用<strong>7位二进制代码</strong>表示的，其排列次序为b6 b5 b4 b3 b2 b1 b0。一个字符在计算机内实际是用<strong>8位</strong>表示。</p>
<ul>
<li>正常情况下，最高一位b7为“0”。</li>
<li>奇偶校验时，这一位可用于存放<strong>奇偶校验的值</strong></li>
</ul>
<p>光笔、图形板和画笔：<strong>游动标</strong></p>
<p>鼠标器、跟踪球和操作杆输入<strong>相对坐标</strong>。世界上最早的鼠标诞生于1964年，由美国人道格·恩格尔巴特发明（获<strong>得1997年图灵奖）。</strong></p>
<p><strong>触摸屏系统</strong>包括 <strong>触摸屏控制器</strong>(卡)和<strong>触摸检测装置</strong>。</p>
<p>图像输入设备：摄像机与摄像头；数字照相机</p>
<p><strong>条形码</strong>：由一组<strong>宽度和反射率不同</strong>的平行相邻的“条”（反射率较<strong>低</strong>）和“空”（反射率较<strong>高</strong>），按照预先规定的编码规则组合起来，用以表示一组数据的符号。这组数据可以是数字、字母或某些符号。</p>
<p>光学字符识别(OCR)技术：<strong>识别技术</strong>是其核心内容，还包括图形文本的扫描输入，光电信号变换，电信号的数字化处理，版面分析与理解，字的切分处理以及输入信息载体(页)的自动传送技术等。</p>
<h2 id="输出设备"><a class="markdownIt-Anchor" href="#输出设备"></a> 输出设备</h2>
<h3 id="显示器"><a class="markdownIt-Anchor" href="#显示器"></a> 显示器</h3>
<ul>
<li><strong>图形</strong>(graphics)最初是指没有亮暗层次变化的线条图（用<strong>线条的有无</strong>来表示简单的图形）</li>
<li><strong>图像</strong>(image)则最初就是指具有亮暗层次的图（将图片上连续的亮暗变化变换为<strong>离散的数字量</strong>，并以点阵列的形式显示输出）。</li>
</ul>
<p>在显示屏幕上，图形和图像都是由称作<strong>像素</strong>的光点组成的。</p>
<ul>
<li><strong>分辨率</strong>：(光点的多少)显示设备所能表示的<strong>像素个数</strong>。像素越密，分辨率越高，图像越清晰。</li>
<li><strong>灰度级</strong>：光点的<strong>深浅变化</strong> (在黑白显示器上表现为<strong>灰度级</strong>，在彩色显示器上表现为<strong>颜色</strong>)</li>
</ul>
<p><strong>分辨率</strong>和<strong>灰度级</strong>决定了所显示图的质量。</p>
<blockquote>
<p>4位一个像素：16级灰度或颜色</p>
</blockquote>
<ul>
<li><strong>刷新</strong>(refresh)：在图像消失之前使电子束不断地重复扫描整个屏幕</li>
<li><strong>刷新频率</strong>或扫描频率：每秒刷新的次数。刷新频率应大于30次／秒，人眼才不会感到闪烁。</li>
<li><strong>帧存储器</strong>(VRAM)：存储图像的存储器</li>
<li><strong>亮度</strong>：单位是坎德拉每平方米(cd/m2)</li>
<li><strong>对比度</strong>：显示器画面上最大亮度和最小亮度的比值</li>
</ul>
<p>分类：阴极射线管(CRT)显示器、液晶显示器(LCD)、等离子显示器等(PDP)</p>
<h3 id="打印机"><a class="markdownIt-Anchor" href="#打印机"></a> 打印机</h3>
<p>按印字原理分类，分为<strong>击打式</strong>和<strong>非击打式</strong>两大类。击打式设备成本低，缺点是噪音大，速度慢。非击打式设备速度快，噪音低，印字质量比击打式好，但价格较贵。</p>
<p>按工作方式划分，可分为<strong>串行打印机</strong>和<strong>行式打印机</strong>两种。所谓串行打印机，是<strong>逐字打印</strong>的。行式打印机的速度比串行打印机<strong>快</strong>，它一次就可以输出一行。</p>
<ul>
<li><strong>点阵针式打印机</strong>：由打印针印出的n(横)×m(纵)个点阵组成字符图形。点越多，印字质量越高。西文字符的点阵有5×7，7×7，7×9等，打印汉字需要16×16点阵或24×24点阵。</li>
<li><strong>激光打印机</strong>：输出速度快，印字质量高，而且可以使用普通纸张。普通激光印字机的印字分辨率都能达到300DPI(每英寸300个点)或 400DPI，甚至600DPI。<br />
激光打印机是逐页输出的，称为“<strong>页式输出设备</strong>”，而普通击打式打印机是<strong>逐字或逐行输出</strong>。<br />
页式输出设备的输出速度用<strong>每分钟输出的页数</strong>(PPM)来表示。</li>
<li><strong>喷墨打印机</strong>：直接将墨水喷射到普通纸上实现印刷。</li>
</ul>
<h3 id="汉字处理技术"><a class="markdownIt-Anchor" href="#汉字处理技术"></a> 汉字处理技术</h3>
<p><strong>汉字输入编码</strong>：数字编码、拼音码、字形码</p>
<p><strong>汉字交换编码</strong>：GB2312，GBK等</p>
<p><strong>汉字内码</strong>：用于汉字信息的存储、检索等操作的<strong>机内代码</strong>，一般采用两个字节表示。常以国标码为基础的编码，如将国标码两字节的最高位置1后形成。</p>
<h1 id="io系统"><a class="markdownIt-Anchor" href="#io系统"></a> I/O系统</h1>
<p>输入输出系统包括：<strong>外部设备</strong>(输入输出设备和辅助存储器)及其与主机(CPU和存储器)之间的<strong>控制部件</strong>（设备控制器，设备适配器或接口）。</p>
<p><strong>设备控制器</strong>：控制并实现<strong>主机与外部设备</strong>之间的<strong>数据传送</strong>。</p>
<p><strong>设备代码</strong>（设备号）：对每一台I/O设备进行编址。</p>
<p><strong>寻址方法</strong>：<strong>专设I/O指令</strong>；<strong>利用访存(取数/存数)指令完成I/O功能</strong>（主存的地址空间中<strong>分出一部分地址码</strong>作为I/O的设备代码）</p>
<p>设备控制器的<strong>基本功能</strong>：</p>
<ol>
<li>实现主机和外围设备之间的<strong>数据传送控制</strong>。（同步控制、设备选择和中断控制）</li>
<li><strong>实现数据缓冲</strong>，以达到主机同外围设备之间的速度匹配。（数据缓冲寄存器）</li>
<li><strong>接受主机的命令</strong>，提供设备接口的状态，并按照主机的命令控制设备。</li>
</ol>
<p>输入输出接口<strong>类型</strong>：</p>
<ol>
<li>按照数据传送的<strong>宽度</strong>可分为<strong>并行接口</strong>和<strong>串行接口</strong>。
<ol>
<li><strong>并行接口</strong>：<strong>设备和接口</strong>是将一个字节(或字)的<strong>所有位同时传送</strong>。</li>
<li><strong>串行接口</strong>：<strong>设备和接口</strong>间的数据是<strong>一位一位串行传送</strong>的，而<strong>接口和主机</strong>之间是<strong>按字节或字并行传送</strong>。接口要完成数据格式的<strong>串—并变换</strong>。</li>
</ol>
</li>
<li>按照数据传送的<strong>控制方式</strong>可分成<strong>程序控制</strong>输入输出接口，<strong>程序中断</strong>输入输出接口和<strong>直接存储器存取</strong>(DMA)接口等。</li>
</ol>
<p>I/O设备<strong>数据传送控制方式</strong>：</p>
<ol>
<li>程序直接控制方式（PDC）：完全通过程序来控制主机和外围设备之间的信息传送。</li>
<li><strong>程序中断传送方式</strong>：发出START信号启动外围设备，然后机器继续执行程序。当外围设备完成数据传送的准备后，便向CPU发“<strong>中断请求</strong>”(INT)信号。<strong>一定程度上实现了CPU和外围设备的并行工作</strong>，大大提高了计算机系统的工作效率。</li>
<li><strong>直接存储器存取方式</strong>（DMA）：在外围设备和主存之间开辟<strong>直接的数据传送通路</strong>。无需CPU的频繁干预。</li>
<li>I/O通道控制方式：通道能独立地执行用通道命令编写的输入输出控制程序。</li>
<li>外围处理机方式(PPU)</li>
</ol>
<h2 id="程序中断输入输出方式"><a class="markdownIt-Anchor" href="#程序中断输入输出方式"></a> 程序中断输入输出方式</h2>
<p>“<strong>中断</strong>”是由I/O设备或其他非预期的急需处理的事件引起的，它使CPU<strong>暂时中断</strong>现在正在执行的程序，而转至<strong>另一服务程序</strong>（中断处理程序）去处理这些事件，处理完后<strong>再返回原程序</strong>。</p>
<p>中断的<strong>作用</strong>：</p>
<ol>
<li>CPU与I/O设备<strong>并行工作</strong>：<img src="https://repo.live.holgerbest.top/img/image-20210703005318923.png" alt="image-20210703005318923" /></li>
<li>硬件<strong>故障处理</strong></li>
<li>实现人机联系：用户要干预机器</li>
<li>实现多道程序和分时操作（时钟中断）</li>
<li>实现<strong>实时处理</strong></li>
<li>实现应用程序和操作系统(管态程序)的联系</li>
<li>多处理机系统各处理机间的联系</li>
</ol>
<h3 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h3>
<p><strong>中断源</strong>：引起中断的事件，即发出中断请求的来源</p>
<p>中断源的<strong>种类</strong>：（前面两种中断则是<strong>随机</strong>发生的）</p>
<ul>
<li><strong>外中断</strong>：<strong>I/O设备</strong>、<strong>定时钟</strong>等来自处理机<strong>外部设备</strong>的中断</li>
<li><strong>内中断</strong>：处理器<strong>硬件故障</strong>或程序“<strong>出错</strong>”引起的中断</li>
<li><strong>软中断</strong>：由“<strong>Trap</strong>”指令产生的中断，在程序中<strong>预先安排好</strong>的。</li>
</ul>
<p><strong>中断触发器</strong>：中断源发生引起中断的事件时，先将它保存在<strong>设备控制器</strong>的“中断触发器”中，即将“中断触发器”置“1”。当中断触发器为“1”时，向CPU发出“<strong>中断请求</strong>”信号。</p>
<blockquote>
<p>每个中断源有一个<strong>中断触发器</strong>。全机的多个中断触发器构成<strong>中断寄存器</strong>。其内容称为<strong>中断字</strong>（中断码）。</p>
</blockquote>
<p><strong>优先权</strong>：有<strong>多个中断同时发生</strong>时，对各个中断响应的<strong>优先次序</strong>。</p>
<p><strong>中断级</strong>：把所有中断按不同的<strong>类别</strong>分为若干级。在同一级中还可以有多个中断源。</p>
<p>首先按<strong>中断级</strong>确定优先次序，然后在<strong>同一级内</strong>再确定各个中断源的<strong>优先权</strong>。</p>
<p><strong>禁止中断</strong>：产生中断源后，由于某种条件的存在，CPU不能中止现行程序的执行。</p>
<p><strong>“中断允许”触发器</strong>：只有该触发器为“1”状态时，才允许处理机响应中断；如果该触发器被清除，则不响应所有中断源申请的中断。通过“<strong>开中断</strong>”或“<strong>关中断</strong>”指令来置位、复位。</p>
<p><strong>中断屏蔽</strong>：当产生中断请求后，用程序方式<strong>有选择地封锁部分中断</strong>，而允许其余部分中断仍得到响应。</p>
<p><strong>中断屏蔽触发器</strong>：用程序方法将该触发器置“1”，则对应的设备中断被封锁，若将其置“0”，才允许该设备的中断请求得到响应。由各设备的<strong>中断屏蔽触发器</strong>组成<strong>中断屏蔽寄存器</strong>。</p>
<p>有些中断请求是<strong>不可屏蔽</strong>的：不管中断系统是否开中断，这些中断源的中断请求一旦提出，CPU必须立即响应。</p>
<h3 id="中断处理过程"><a class="markdownIt-Anchor" href="#中断处理过程"></a> 中断处理过程</h3>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703010241236.png" alt="image-20210703010241236" /></p>
<ol>
<li><strong>关中断</strong>：进入不可再次响应中断的状态。由硬件实现。</li>
<li><strong>保存断点和现场</strong>：把当前的程序计数器PC中的内容(断点)，程序状态字、中断屏蔽寄存器、CPU中某些寄存器的内容(现场状态)保存起来。由硬件、软件实现。</li>
<li><strong>判别中断源</strong>，转向<strong>中断服务程序</strong>。由硬件或软件实现。</li>
<li><strong>开中断</strong>：允许更高级中断请求得到响应，实现中断嵌套。由硬件实现。</li>
<li><strong>执行中断服务程序</strong>。由软件实现。</li>
<li><strong>退出中断</strong>：关中断，恢复现场、恢复断点，开中断，返回原程序执行。由硬件、软件实现。</li>
</ol>
<ul>
<li><strong>判别中断源</strong>方法：<strong>查询法</strong>（软件）、<strong>串行排队链法</strong>（硬件）</li>
<li><strong>转向中断服务程序入口地址</strong>的方法：设一条专门接收终端设备码的指令<strong>INTA</strong>（取到设备号后，再通过主存的跳转表产生中断服务程序入口地址）；<strong>向量中断</strong>（为每一个中断源设置一个中断向量，中断向量包括了该中断源的中断服务程序入口地址）</li>
</ul>
<p><strong>多重中断</strong>（中断嵌套）：在<strong>处理某一个中断过程又发生了新的中断请求</strong>，从而中断该服务程序的执行，又转去进行新的中断处理。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703010633688.png" alt="image-20210703010633688" /></p>
<ul>
<li>在处理某级中的某个中断时，与它<strong>同级</strong>的或比它<strong>低级</strong>的新中断请求应不能中断它的处理，而在<strong>处理完该中断返回主程序后</strong>，再去响应和处理这些新中断。</li>
<li>而比它<strong>优先级高</strong>的新中断请求却能中断它的处理。</li>
</ul>
<h2 id="dma输入输出方式"><a class="markdownIt-Anchor" href="#dma输入输出方式"></a> DMA输入输出方式</h2>
<p><strong>DMA</strong>：<strong>I/O设备</strong>与<strong>主存储器</strong>之间由<strong>硬件</strong>组成的<strong>直接数据通路</strong>，用于高速I/O设备与主存之间的<strong>成组数据</strong>传送。</p>
<p>数据传送是在<strong>DMA控制器</strong>控制下进行的，由DMA控制器给出当前正在传送的数据字的<strong>主存地址</strong>，并统计传送数据的个数以确定一组数据的传送是否已结束。在主存中要开辟连续地址的<strong>专用缓冲器</strong>，用来提供或接收传送的数据。在数据传送前和结束后要通过<strong>程序</strong>或<strong>中断方式</strong>对缓冲器和DMA控制器进行预处理和后处理。</p>
<h3 id="dma三种工作方式"><a class="markdownIt-Anchor" href="#dma三种工作方式"></a> DMA三种工作方式</h3>
<ol>
<li><strong>CPU暂停方式</strong>：主机响应DMA请求后，<strong>让出存储总线</strong>，<strong>直到一组数据传送完毕</strong>后，DMA控制器才把总线控制权交还给CPU。</li>
<li><strong>CPU周期窃取方式</strong>：DMA控制器与主存储器之间<strong>传送一个数据</strong>，占用(窃取)一个CPU周期，即<strong>CPU暂停工作一个周期</strong>，然后继续执行程序。</li>
<li><strong>直接访问存储器工作方式</strong>：<strong>标准的DMA工作方式</strong>，如传送数据时CPU正好<strong>不占用存储总线</strong>，则对CPU<strong>不产生任何影响</strong>。如DMA和CPU同时<strong>需要访问存储总线</strong>，则<strong>DMA的优先级高于CPU</strong>。</li>
</ol>
<h3 id="dma控制器组成"><a class="markdownIt-Anchor" href="#dma控制器组成"></a> DMA控制器组成</h3>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703011158592.png" alt="image-20210703011158592" /></p>
<ol>
<li><strong>主存地址寄存器</strong>(MAR)：初始值为<strong>主存缓冲区</strong>的首地址，在传送前由程序送入</li>
<li><strong>外围设备地址寄存器</strong>(ADR)：存放I/O设备的<strong>设备码</strong>，或者表示设备信息存储区的寻址信息</li>
<li><strong>字数计数器</strong>(WC)：对传送数据的<strong>总字数</strong>进行统计</li>
<li><strong>控制与状态寄存器</strong>(CSR)：存放<strong>控制字和状态字</strong></li>
<li><strong>数据缓冲寄存器</strong>(DBR)：<strong>暂存</strong>I/O设备与主存传送的数据。</li>
</ol>
<h2 id="总线结构"><a class="markdownIt-Anchor" href="#总线结构"></a> 总线结构</h2>
<p><strong>总线</strong>：各模块之间<strong>传送信息的通路</strong>。</p>
<p><strong>总线类型</strong>：</p>
<ul>
<li><strong>内总线</strong>（连接计算机内部各模块的总线）和<strong>外总线</strong>（系统之间或系统与外部设备之间连接的总线）</li>
<li><strong>单总线</strong>（所有模块都连接到单一总线上）和<strong>多总线</strong>（将速度较低的 I/O 设备从总线上分出去，而形成系统总线与 I/O 总线分开的双总线结构）</li>
</ul>
<p><strong>总线组成</strong>：总线是从<u>两个或两个以上</u><strong>源部件</strong>传送<strong>信息</strong>到<u>一个或多个</u><strong>部件</strong>的一组<strong>传输线</strong>。</p>
<blockquote>
<p>如一根传输线仅用于连接一个源部件(输出)和一个或多个目的部件(输入)，则不称为总线。</p>
</blockquote>
<p><strong>总线控制线路</strong>：总线判优或仲裁逻辑、驱动器和中断逻辑等。</p>
<p><strong>总线判优控制</strong>：存在多个设备或部件同时申请对总线的使用权，为保证在同一时间内只能有一个申请者使用总线，需要设置总线判优控制机构。</p>
<ul>
<li><strong>主控器</strong>或主设备：可以<strong>控制总线</strong>并<strong>启动数据传送</strong>的任何设备</li>
<li><strong>受控器</strong>或从设备：能够<strong>响应</strong>总线主控器发出的<strong>总线命令</strong>的任何设备</li>
</ul>
<blockquote>
<p>通常 CPU 为主设备，存储器为从设备，I/O 设备可以为主设备或从设备。</p>
</blockquote>
<p>总线判优控制按其<strong>仲裁控制机构</strong>的设置可分为<strong>集中式控制</strong>(总线控制逻辑基本上集中于<strong>一个设备</strong>)和<strong>分布式控制</strong>(总线控制逻辑分散在连接总线的<strong>各个部件或设备</strong>中)两种。</p>
<p>常用的<strong>优先权仲裁方式</strong>为<strong>串行链接方式</strong>。优先次序是由“总线可用”线所接部件的位置决定的，离总线控制器<strong>越近</strong>的部件其优先权越高。</p>
<p><strong>总线通信</strong>：</p>
<ul>
<li><strong>同步通信</strong>（<strong>统一的时钟</strong>控制数据的传送）和<strong>异步通信</strong>（数据发送部件和接收部件之间的相互“<strong>握手</strong>”信号）</li>
<li>并行通信和串行通信
<ul>
<li><strong>并行通信</strong>：数据的<strong>各位</strong>同时进行传送。<strong>距离较短</strong>，限制在一个机柜内使用</li>
<li><strong>串行通信</strong>：数据一位一位地顺序传送。<strong>线路简单</strong>，适合于<strong>远距离通信</strong>。</li>
<li>在<strong>相同频率</strong>的作用下，并行通信则<strong>传输率高</strong>。但频率提高到一定程度<u>并行通信</u>会受到信号时滞、串扰和散热问题的困扰。</li>
</ul>
</li>
</ul>
<p><strong>出错处理</strong>：自动纠正错误/发现错误 -&gt; 发出“数据出错”信号</p>
<p><strong>总线驱动</strong>：总线上可连接多个部件，具有<strong>扩充灵活</strong>的优点，但总线的驱动能力总是<strong>有限制</strong>的，因此在扩充时要加以注意。通常一个模块或一个部件限制在1～2个负载以内。</p>
<p><strong>总线举例</strong>：ISA 总线 / EISA总线，PCI总线 【即插即用】</p>
<p><strong>即插即用</strong>（P&amp;P）：解决总线上卡与卡之间以及卡与主板之间的资源冲突问题，达到不需人为干预的系统资源分配。</p>
<p><strong>热插拔</strong>：具有P&amp;P功能的总线和I/O设备控制器有相应的硬件和操作系统在计算机正式工作之前自动完成配置，在插拔卡时也不需要关电源。</p>
<h2 id="外设接口"><a class="markdownIt-Anchor" href="#外设接口"></a> 外设接口 ▲</h2>
<ul>
<li>ATA(IDE) / 并行ATA</li>
<li>串行ATA(SATA)和eSATA</li>
<li>SCSI、SAS和iSCSI接口</li>
<li>光纤通道和InfiniBand</li>
<li>PCMCIA</li>
<li>串口通信接口USB（通用串行总线）和IEEE 1394</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>组成</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成知识点 - introduction</title>
    <url>/2021/06/22/computer-introduction/</url>
    <content><![CDATA[<h3 id="计算机系统概论"><a class="markdownIt-Anchor" href="#计算机系统概论"></a> 计算机系统概论</h3>
<p>程序是由<strong>指令</strong>组成的：计算机执行程序的过程，就是按照给定次序执行一组指令的过程。</p>
<p>一条指令通常分成两部分：</p>
<ul>
<li><strong>操作码</strong>：规定该指令执行什么样的<strong>运算(或操作)</strong>，因此被命名为操作码。</li>
<li><strong>地址码</strong>：规定对哪些<strong>数据</strong>进行运算，通常表示的是<strong>数据地址</strong>，因此被称为地址码。</li>
</ul>
<h3 id="冯诺依曼结构冯诺依曼型机器重要"><a class="markdownIt-Anchor" href="#冯诺依曼结构冯诺依曼型机器重要"></a> 冯·诺依曼结构（冯·诺依曼型机器）（重要）</h3>
<ul>
    <li>由<strong>运算器、控制器、存储器、输入设备和输出设备</strong>5部分组成</li>
    <li>采用<strong>存储程序</strong>的方式，程序和数据放在同一个存储器中，以二进制码表示</li>
    <li>指令由<strong>操作码</strong>和<strong>地址码</strong>组成</li>
    <li>指令在<strong>存储器</strong>中按执行顺序存放，一般顺序执行，但也可按运算结果或外界条件而改变</li>
    <li>机器以<text style="color: red"><strong>运算器</strong></text>为中心，输入输出设备与存储器间的数据传送都通过运算器</li>
</ul>
<h3 id="计算机发展史"><a class="markdownIt-Anchor" href="#计算机发展史"></a> 计算机发展史</h3>
<ul>
<li>第一代：电子管计算机时代 1946～50年代后期</li>
<li>第二代：晶体管计算机时代 50年代中期～60年代后期</li>
<li>第三代：集成电路计算机时代（60年代中期～70年代前期）</li>
<li>第四代：大规模集成电路计算机时代</li>
<li>第五代：超大规模集成电路</li>
</ul>
<h3 id="计算机硬件的组成重要"><a class="markdownIt-Anchor" href="#计算机硬件的组成重要"></a> 计算机硬件的组成（重要）</h3>
<img src="https://repo.live.holgerbest.top/img/image-20210413232826514.png" style="zoom: 0.75"/>
<h3 id="计算机系统的多级层次结构"><a class="markdownIt-Anchor" href="#计算机系统的多级层次结构"></a> 计算机系统的多级层次结构</h3>
<img src="https://repo.live.holgerbest.top/img/image-20210413232921855.png" style="zoom: 0.75"/>
<h3 id="组合逻辑"><a class="markdownIt-Anchor" href="#组合逻辑"></a> 组合逻辑</h3>
<h4 id="三态电路"><a class="markdownIt-Anchor" href="#三态电路"></a> 三态电路</h4>
<p>三态：正常0态、正常1态和高阻态Z</p>
<img src="https://repo.live.holgerbest.top/img/image-20210413233209933.png" alt="三态电路" style="zoom:50%;" />
<p>（其余见<a href="https://blog.holgerbest.top/2021/01/01/digital-circuit-1/">数字电路部分</a>）</p>
<h3 id="时序逻辑"><a class="markdownIt-Anchor" href="#时序逻辑"></a> 时序逻辑</h3>
<p>（见<a href="https://blog.holgerbest.top/2021/01/01/digital-circuit-2/">数字电路部分</a>）</p>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>组成</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成知识点 - 主存储器</title>
    <url>/2021/06/22/computer-main-storage/</url>
    <content><![CDATA[<h3 id="主存储器"><a class="markdownIt-Anchor" href="#主存储器"></a> <strong>主存储器</strong></h3>
<p><strong>主存储器</strong>处于全机中心地位</p>
<h4 id="主要技术指标"><a class="markdownIt-Anchor" href="#主要技术指标"></a> 主要技术指标</h4>
<ul>
<li><strong>字(存储字)</strong>：计算机可寻址的最小单位。一个字可以由若干<strong>字节</strong>组成。</li>
<li><strong>字长</strong>：一个存储字所包括的二进制位数。</li>
<li>一个<strong>字节</strong>（Byte）为8个二进制<strong>位</strong>（bit）。</li>
<li><strong>容量</strong>：以字或字节为单位来表示主存储器存储单元的总数。<br />
<strong>地址码的位数</strong>决定了主存储器的可直接寻址的最大空间。</li>
<li>存储器<strong>存取时间</strong>(Memory Access Time)：启动一次存储器操作到完成该操作所经历的时间。</li>
<li><strong>存储周期</strong>(Memory Cycle Time)：连续启动两次独立的存储器操作(例如连续两次读操作)所需间隔的最小时间。<br />
存储周期<strong>略大于</strong>存取时间。</li>
</ul>
<h4 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h4>
<img src="https://repo.live.holgerbest.top/img/image-20210414001629517.png" alt="操作" style="zoom:50%;" />
<ul>
<li>读操作：存储器 -&gt; CPU  CPU把信息字的地址送到AR，经地址总线送往主存储器；CPU发读(Read)命令，CPU等待主存储器的Ready回答信号，Ready为 1，表示信息已读出经数据总线，送入DR。</li>
<li>写操作：CPU -&gt; 存储器  CPU把信息字的地址送到AR，经地址总线送往主存储器,并将信息字送往DR；CPU发写(Write)命令；CPU等待主存储器的Ready回答信号，Ready为 1，表示信息已从DR经数据总线写入主存储器。</li>
</ul>
<h4 id="读写存储器"><a class="markdownIt-Anchor" href="#读写存储器"></a> 读/写存储器</h4>
<blockquote>
<p>按存储元件在运行中能否长时间保存信息分为静态存储器和动态存储器两种</p>
</blockquote>
<ul>
<li><strong>静态存储器</strong> <strong>SRAM</strong>：利用双稳态触发器来保存信息，只要不断电，信息就不会丢失</li>
<li><strong>动态存储器</strong> <strong>DRAM</strong>：利用MOS电容存储电荷来保存信息，使用时需不断给电容充电才能使信息保持</li>
</ul>
<p>静态存储器的集成度低，功耗较大；动态存储器的集成度高，功耗小，主要用于大容量存储器(主存)</p>
<p>DRAM必须在电荷漏掉以前就进行充电，这一充电过程称为<strong>再生</strong>，或称为刷新。再生一般应在小于或等于2ms时间内进行一次。</p>
<h4 id="容量扩展"><a class="markdownIt-Anchor" href="#容量扩展"></a> 容量扩展</h4>
<p><strong>位扩展</strong>：多个存储器芯片对<strong>字长</strong>进行扩展</p>
<img src="https://repo.live.holgerbest.top/img/image-20210414002026432.png" alt="位扩展" style="zoom:67%;" />
<p><strong>字扩展</strong>：增加存储器中<strong>字</strong>的数量</p>
<img src="https://repo.live.holgerbest.top/img/image-20210414002050890.png" alt="字扩展" style="zoom:67%;" />
<p><strong>字位扩展</strong>：</p>
<img src="https://repo.live.holgerbest.top/img/image-20210414002139830.png" alt="字位扩展" style="zoom:67%;" />
<img src="https://repo.live.holgerbest.top/img/image-20210414002152246.png" alt="字位扩展" style="zoom:67%;" />
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>组成</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成知识点 - 期末复习</title>
    <url>/2021/07/02/computer-final-exam/</url>
    <content><![CDATA[<p>2021-07-03：已完结</p>
<ul>
<li><a href="https://blog.holgerbest.top/2021/06/22/computer-introduction/">introduction</a></li>
<li><a href="https://blog.holgerbest.top/2021/06/22/computer-computing/">运算方法与运算部件</a></li>
<li><a href="https://blog.holgerbest.top/2021/06/22/computer-main-storage/">主存储器</a></li>
<li><a href="https://blog.holgerbest.top/2021/07/02/computer-ch5/">指令系统</a> 【重点】</li>
<li><a href="https://blog.holgerbest.top/2021/07/02/computer-ch6/">中央处理器</a> 【重点】</li>
<li><a href="https://blog.holgerbest.top/2021/07/02/computer-ch7/">存储系统</a>  【重点】</li>
<li><a href="https://blog.holgerbest.top/2021/07/03/computer-ch-8-10/">辅助存储器，I/O设备与系统</a>  【不考解答题】</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>组成</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成知识点 - 期中复习</title>
    <url>/2021/04/14/computer-mid/</url>
    <content><![CDATA[<ul>
<li><a href="https://blog.holgerbest.top/2021/06/22/computer-introduction/">introduction</a></li>
<li><a href="https://blog.holgerbest.top/2021/06/22/computer-computing/">运算方法与运算部件</a></li>
<li><a href="https://blog.holgerbest.top/2021/06/22/computer-main-storage/">主存储器</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>组成</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 存储、文件结构与索引</title>
    <url>/2021/07/03/db-file-index/</url>
    <content><![CDATA[<div class="note success flat"><p><strong>本节内容</strong></p>
<ol>
<li>数据库文件存储</li>
<li>文件结构</li>
<li>索引</li>
</ol>
</div>
<h3 id="数据库存储"><a class="markdownIt-Anchor" href="#数据库存储"></a> 数据库存储</h3>
<p><strong>块</strong>（Block）：将每个数据库文件分成<strong>定长的</strong>（4-8KB）存储单元，称为<strong>块</strong>。</p>
<p>数据在磁盘和主存之间以<strong>块</strong>（Block）为单位传输。<strong>块</strong>是存储分配和数据分配的<strong>基本单元</strong>。</p>
<p><strong>缓存</strong>中的<strong>块替换策略</strong>：与组成和操作系统不同，数据库常用MRU算法（Most recently used，最近最多使用）。即每次替换都选择<strong>最近最常使用的块</strong>，将其替换掉（但是正在使用的块不会被替换）。</p>
<p>其他知识参考《组成》有关内容：<u>计算机组成知识点 - 辅助存储器，I/O设备与系统</u> - <a href="https://blog.holgerbest.top/2021/07/03/computer-ch-8-10/#%E7%A7%8D%E7%B1%BB%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8C%87%E6%A0%87">辅助存储器种类与技术指标</a>，<a href="https://blog.holgerbest.top/2021/07/03/computer-ch-8-10/#%E7%A3%81%E7%9B%98%E5%AD%98%E5%82%A8%E5%99%A8">磁盘存储器</a></p>
<h3 id="文件组织"><a class="markdownIt-Anchor" href="#文件组织"></a> 文件组织</h3>
<p>1、定长记录</p>
<p>2、变长记录的基本方法：添加<strong>终止记录</strong>来标志记录的结束。删除、更新困难。</p>
<p>3、变长记录：<strong>分槽页的结构</strong>（Slotted Page Method）</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703122721481.png" alt="image-20210703122721481" /></p>
<h3 id="文件中记录的组织"><a class="markdownIt-Anchor" href="#文件中记录的组织"></a> 文件中记录的组织</h3>
<ol>
<li>Heap File 堆文件 Organization （无序）</li>
<li>Sequential File 顺序文件 Organization （按照 search key 的值顺序存储）</li>
<li>Hashing File 散列文件 Organization （hash函数）</li>
<li>多表聚集文件组织：将经常连接的表（关系、记录）存储在同一个文件中</li>
</ol>
<h3 id="数据字典"><a class="markdownIt-Anchor" href="#数据字典"></a> 数据字典</h3>
<p><strong>元数据</strong>：“<strong>关于数据的数据</strong>”。数据库系统中维护的关于关系的数据。</p>
<p><strong>数据字典</strong>（系统目录）：关于<strong>关系</strong>的<strong>关系模式</strong>和<strong>其他元数据</strong>存储的结构。</p>
<p>数据字典常驻<strong>缓存</strong>。</p>
<h3 id="索引"><a class="markdownIt-Anchor" href="#索引"></a> 索引</h3>
<ul>
<li><strong>优点</strong>：提高<strong>查询速度</strong>，<strong>减少磁盘I/O</strong>。<br />
提高查询速度的<strong>原因</strong>：索引中<strong>搜索码有序排列</strong>；使用了<strong>B树</strong>。</li>
<li><strong>缺点</strong>：<strong>降低了增删改的速度</strong>（因为需要修改索引文件），<strong>维护索引</strong>需要更高的<strong>代价</strong>。</li>
</ul>
<p><strong>索引作用</strong>：顺序访问；直接访问；存在性检查。</p>
<ul>
<li><strong>稠密索引</strong>：文件中的<strong>每个搜索码</strong>都有一个索引项。更快，但空间开销大。</li>
<li><strong>稀疏索引</strong>：只为<strong>搜索码的某些值</strong>建立索引项。只有当<strong>关系按搜索码排列顺序存储</strong>时才可用稀疏存索引。占用空间小。</li>
</ul>
]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 数据库设计与E-R模型</title>
    <url>/2021/07/03/db-design/</url>
    <content><![CDATA[<div class="note success flat"><p><strong>本节内容</strong></p>
<p>E-R模型及其向关系模式的转换</p>
</div>
<h3 id="e-r模型"><a class="markdownIt-Anchor" href="#e-r模型"></a> E-R模型</h3>
<h4 id="设计过程"><a class="markdownIt-Anchor" href="#设计过程"></a> 设计过程</h4>
<p><strong>需求分析</strong> -&gt; <strong>概念数据库设计</strong> -&gt; <strong>逻辑数据库设计</strong> -&gt; <strong>物理数据库设计</strong></p>
<p><strong>数据库的设计原则</strong>：避免冗余，避免不完整，选择好的设计</p>
<h4 id="实体-联系模型e-r模型"><a class="markdownIt-Anchor" href="#实体-联系模型e-r模型"></a> 实体-联系模型（E-R模型）</h4>
<ul>
<li>
<p><strong>实体</strong>：客观存在并可相互区分的事物。<strong>用矩形表示</strong></p>
<ul>
<li>实体型：实体名与其属性名集合共同构成实体型。</li>
<li>实体集：同型实体的集合称为实体集。</li>
</ul>
</li>
<li>
<p><strong>属性</strong>：实体所具有的某一特性称为实体的属性。<strong>用椭圆表示</strong></p>
<ul>
<li>域：属性的取值范围，即值集。</li>
<li>简单属性（不可再分的属性）与复合属性（可以划分为更小的属性）</li>
<li><strong>单值属性</strong>（每一个特定的实体在该属性上的<strong>取值唯一</strong>）与<strong>多值属性</strong>（某个特定的实体在该属性上<strong>有多于一个的取值</strong>，<strong>用双椭圆表示</strong>）</li>
<li><strong>派生属性</strong>（可以从其他相关的属性或实体派生出来的属性值，<strong>用虚椭圆表示</strong>）与<strong>基属性</strong><br />
数据库一般<strong>只存基属性值</strong>，而派生属性只存其定义或依赖关系，用到时再从基属性中计算出来</li>
</ul>
</li>
<li>
<p><strong>联系</strong>：多个实体之间的相互关联。<strong>用菱形表示</strong></p>
<ul>
<li><strong>联系集</strong>：同类联系的集合。</li>
<li>联系的<strong>元</strong>或度：参与联系的<strong>实体集的个数</strong>称为联系的元。</li>
<li><strong>角色</strong>：实体在联系中的作用称为实体的<strong>角色</strong>。</li>
</ul>
</li>
<li>
<p>码</p>
<ul>
<li><strong>超码</strong>：能唯一标识实体的属性或属性组。</li>
<li><strong>候选码</strong>：其任意真子集都不能成为超码的最小超码。</li>
<li><strong>主码</strong>：从所有候选码中选定一个用来区别同一实体集中的不同实体。<strong>下划线来标明</strong></li>
</ul>
</li>
<li>
<p><strong>参与</strong>：实体集之间的关联。（实体参与联系）<strong>用连线表示</strong></p>
<ul>
<li><strong>完全参与</strong>：如果实体集E中的<strong>每个实体</strong>都参与到联系集R中的至少一个联系，则称E<strong>全部参与</strong>R。</li>
<li><strong>部分参与</strong>：如果实体集E中<strong>只有部分实体</strong>参与到联系集R的联系中，则称E<strong>部分参与</strong>R。<strong>用双线连接表示</strong></li>
</ul>
</li>
<li>
<p><strong>存在依赖</strong>：如果实体x的<strong>存在</strong>依赖于实体y的<strong>存在</strong>，则称x<strong>存在依赖</strong>于y。</p>
<ul>
<li>y称作<strong>支配实体</strong>，x称作<strong>从属实体</strong>。</li>
<li>设有 A <u>R</u> B，若 A <strong>存在依赖</strong>于B, 则A<strong>全部参与</strong>联系R。</li>
</ul>
</li>
<li>
<p>映射的<strong>基数</strong>：实体之间的<strong>联系的数量</strong>，即一个实体通过一个联系集<strong>能与另一实体集相关联的实体的数目</strong>。</p>
<ul>
<li><strong>一对一</strong>（1:1）：E1中的一个实体与E2中<strong>至多一个</strong>实体相联系，并且E2中的一个实体与E1中<strong>至多一个</strong>实体相联系。<br />
<img src="https://repo.live.holgerbest.top/img/image-20210703160104927.png" alt="image-20210703160104927" /></li>
<li><strong>一对多</strong>（1:m）：E1中的一个实体与E2中<strong>n(n≥0)个</strong>实体相联系，并且E2中的一个实体与E1中<strong>至多一个</strong>实体相联系。<br />
<img src="https://repo.live.holgerbest.top/img/image-20210703160123633.png" alt="image-20210703160123633" /></li>
<li><strong>多对多</strong>（m:n）：E1中的一个实体与E2中<strong>n(n≥0)个</strong>实体相联系，并且E2中的一个实体与E1中<strong>m(m≥0)个</strong>实体相联系。<br />
<img src="https://repo.live.holgerbest.top/img/image-20210703160118037.png" alt="image-20210703160118037" /></li>
</ul>
</li>
<li>
<p><strong>弱实体集</strong>：一个实体集的所有属性<strong>都不足以形成主码</strong>。使用<strong>双线矩形</strong>表示。优点：避免数据冗余<br />
<strong>弱实体集</strong>必然<strong>存在依赖</strong>于<strong>强实体集</strong>。</p>
</li>
<li>
<p><strong>分辨符</strong>（部分码）：弱实体集中用于区别依赖于某个特定强实体集的属性集合。使用<strong>虚线表示</strong>。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703160534792.png" alt="image-20210703160534792" /></p>
</li>
</ul>
<p>E-R图表示汇总：</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703160827171.png" alt="image-20210703160827171" /></p>
<h3 id="e-r模型向关系模式的转换"><a class="markdownIt-Anchor" href="#e-r模型向关系模式的转换"></a> E-R模型向关系模式的转换</h3>
<ul>
<li>实体 -&gt; <strong>关系模式</strong></li>
<li>属性 -&gt; 关系的<strong>属性</strong></li>
<li>复合属性 -&gt; <strong>展开</strong>：将每个组合属性作为复合属性所在实体的属性</li>
<li>多值属性 -&gt; 新的<strong>关系</strong>+所在实体的码</li>
<li>联系
<ul>
<li><strong>一对一联系</strong>：两个实体分别转换为<strong>关系模式</strong>，将任意一个关系模式的<strong>码和联系的属性</strong>加入到另一个关系模式中。若联系双方均部分参与，则将联系定义为一个新的关系，属性为参与双方的码。</li>
<li><strong>一对多联系</strong>：将<strong>一方</strong>实体的码加入到<strong>多方</strong>参与实体的属性中（作为<strong>外键</strong>）。</li>
<li><strong>多对多联系</strong>： 将联系定义为<strong>新的关系</strong>，属性为<strong>参与双方的码</strong>。</li>
</ul>
</li>
<li><strong>弱实体集</strong>：所对应的关系的码由弱实体集本身的<strong>分辨码</strong>再加上所依赖的<strong>强实体集的码</strong></li>
</ul>
]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 期末不挂科指南</title>
    <url>/2021/07/03/db-final-exam/</url>
    <content><![CDATA[<p>2021-07-03：已完结</p>
<ul>
<li><a href="https://blog.holgerbest.top/2021/07/03/db-introduction/">基本概念</a></li>
<li><a href="https://blog.holgerbest.top/2021/07/03/db-relation-sql/">关系代数与SQL</a></li>
<li><a href="https://blog.holgerbest.top/2021/04/22/db-mid-sql/">期中SQL练习</a></li>
<li><a href="https://blog.holgerbest.top/2021/07/03/db-final-sql/">期末SQL练习</a></li>
<li><a href="https://blog.holgerbest.top/2021/07/03/db-design/">数据库设计与E-R模型</a></li>
<li><a href="https://blog.holgerbest.top/2021/07/03/db-relation/">关系数据库理论</a></li>
<li><a href="https://blog.holgerbest.top/2021/07/03/db-file-index/">存储、文件结构与索引</a></li>
<li><a href="https://blog.holgerbest.top/2021/06/10/db-lock/">并发控制</a></li>
<li><a href="https://blog.holgerbest.top/2021/07/03/db-recovery/">恢复技术</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 期末 SQL 专项练习</title>
    <url>/2021/07/03/db-final-sql/</url>
    <content><![CDATA[<p>已知关系S、SC、C的关系模式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">S（S#，SN，SA，SEX，SD）</span><br><span class="line">C（C#，CN，PC#）</span><br><span class="line">SC（C#，S#，G）</span><br></pre></td></tr></table></figure>
<p>其中：S#为学号，SN为学生名，SA为年龄，SEX为性别，SD为系别，C#为课程号，G为成绩，CN为课程名称，PC#先行课程号</p>
<p>（1）查询年龄在19至21岁之间的学生的学号、姓名和年龄</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> S#, SN, SA</span><br><span class="line"><span class="keyword">from</span> S</span><br><span class="line"><span class="keyword">where</span> SA <span class="keyword">between</span> <span class="number">19</span> <span class="keyword">and</span> <span class="number">21</span>;</span><br></pre></td></tr></table></figure>
<p>（2）查询姓名中第2个字有“明”字的学生的姓名、性别</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SN, SEX</span><br><span class="line"><span class="keyword">from</span> S</span><br><span class="line"><span class="keyword">where</span> SN <span class="keyword">like</span> ‘<span class="operator">%</span>明<span class="operator">%</span>’;</span><br></pre></td></tr></table></figure>
<p>（3）查询选修了1002课程的学生的学号和姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> S.S#, SN</span><br><span class="line"><span class="keyword">from</span> S, SC</span><br><span class="line"><span class="keyword">where</span> S.S# <span class="operator">=</span> SC.S# <span class="keyword">and</span> C# <span class="operator">=</span> <span class="string">&#x27;1002&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>（4）查询各个课程号及其相应的选修人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> C#, <span class="built_in">count</span>(S#)</span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> C#;</span><br></pre></td></tr></table></figure>
<p>（5）查询3门以上课程是90分以上的学生学号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> S#</span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"><span class="keyword">where</span> G <span class="operator">&gt;</span> <span class="number">90</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> S#</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 基本概念</title>
    <url>/2021/07/03/db-introduction/</url>
    <content><![CDATA[<div class="note success flat"><p><strong>本节内容</strong></p>
<p>第一部分：基本概念</p>
<p>教材 Chapter 1: Introduction</p>
</div>
<h3 id="数据库管理系统dbms"><a class="markdownIt-Anchor" href="#数据库管理系统dbms"></a> 数据库管理系统（DBMS）</h3>
<p><strong>数据库管理系统</strong>（DBMS）由一个相互关联的<u>数据集合</u>（通常称作<strong>数据库</strong>）和一组用以访问这些数据的程序组成。</p>
<p>DBMS 的目标：方便、高效地存储、检索数据。</p>
<p>DBMS 的功能：定义存储结构、提供操纵数据的方法、保证数据的安全性、并发控制。</p>
<p><strong>信息</strong>：经过处理和加工提炼而用于决策或其他应用活动的数据</p>
<div class="note success flat"><p><strong>区别 DB DBMS DBS</strong></p>
<ul>
<li><strong>数据库</strong>(Database,简称DB)是指：长期储存在计算机内的、有组织的、可共享的大量数据集合。一个应用系统通常包含多个数据库。</li>
<li><strong>数据库管理系统（核心）</strong>（Database Management System，简称DBMS）是位于用户（应用程序）与操作系统之间的一层数据库管理软件，DBMS是独立、开放的数据库管理软件（提供多种外部接口，管理的数据可以被其它外部应用程序调用），用于科学地组织和存储数据以及高效地获取和维护数据。</li>
<li><strong>数据库系统</strong>（Database System，简称DBS）是指在计算机应用系统中引入数据库后的系统构成。数据库系统由数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员（和用户）构成。</li>
</ul>
<p>DBS包含DB和DBMS；DBS的核心是DBMS，对于程序员来讲，DBMS提供了很大的便利，可以更加专注程序本身。DBS与普通软件系统的最大区别在于：普通软件自己管理数据及数据安全，DBS由DBMS帮我们管理数据和安全性。</p>
</div>
<h3 id="使用数据库系统的目的"><a class="markdownIt-Anchor" href="#使用数据库系统的目的"></a> 使用数据库系统的目的</h3>
<p>解决使用<strong>文件处理系统</strong>存储数据的不足：</p>
<ol>
<li>数据冗余和不一致</li>
<li>数据访问困难</li>
<li>数据孤立</li>
<li>完整性问题</li>
<li>原子性问题</li>
<li>并发访问问题：购票系统中，同一张票多人同一时间购买，只能有一个人购买成功</li>
<li>安全性问题：权限控制</li>
</ol>
<h3 id="数据视图"><a class="markdownIt-Anchor" href="#数据视图"></a> 数据视图</h3>
<img src="https://repo.live.holgerbest.top/img/image-20210415172118344.png" style="zoom:50%;" />
<ul>
<li>物理层（physical level）：硬盘上的记录如何存储</li>
<li>逻辑层（logical level）：数据的逻辑结构，实现了<strong>物理数据独立性</strong></li>
<li>视图层（view level，逻辑层的子集）：隐藏了数据和类型 安全性、独立性</li>
</ul>
<p>优点：逻辑层和视图层具有<strong>独立性</strong>：</p>
<ul>
<li><strong>物理独立性</strong>：物理结构改变，逻辑结构不受影响</li>
<li><strong>逻辑独立性</strong>：逻辑结构改变不影响视图层</li>
</ul>
<h3 id="实例和模式"><a class="markdownIt-Anchor" href="#实例和模式"></a> 实例和模式</h3>
<p><strong>模式</strong>（Schemas）：数据库的逻辑结构以及之间的联系。</p>
<p><strong>实例</strong>（Instances）：特定时刻在数据库中的信息的集合。</p>
<h3 id="数据模型"><a class="markdownIt-Anchor" href="#数据模型"></a> 数据模型</h3>
<p><strong>数据模型</strong>：（对现实世界数据特征的抽象）描述数据、数据联系】数据语义、一致性约束的概念工具的集合。</p>
<h4 id="分级数据抽象"><a class="markdownIt-Anchor" href="#分级数据抽象"></a> 分级数据抽象</h4>
<ul>
<li>一级：<strong>概念模型</strong>（E-R 模型 (实体-联系模型)）按用户的观点来对数据和信息建模。</li>
<li>二级：<strong>逻辑模型</strong>（关系模型、网状、层次、面向对象……）按计算机实现的观点来对数据建模。</li>
</ul>
<h3 id="数据库语言"><a class="markdownIt-Anchor" href="#数据库语言"></a> 数据库语言</h3>
<p>SQL：结构化查询语言（声明式）</p>
<ul>
<li>DDL：数据定义语言，定义表的结构（创建表、视图、索引……）</li>
<li>DML：数据操纵语言（更删改查）</li>
</ul>
<h3 id="数据库设计"><a class="markdownIt-Anchor" href="#数据库设计"></a> 数据库设计</h3>
<p>需求分析 -&gt; 概念设计 -&gt; 逻辑设计 -&gt; 物理设计</p>
<h4 id="e-r-模型概念设计"><a class="markdownIt-Anchor" href="#e-r-模型概念设计"></a> E-R 模型（概念设计）</h4>
<ul>
<li><strong>实体</strong>：现实世界中可区别于其他对象的一件“事情”或一个“物体”。数据库中的实体通过<strong>属性</strong>来描述。</li>
<li><strong>联系</strong>：几个实体间的关联。</li>
</ul>
<img src="https://repo.live.holgerbest.top/img/image-20210415181441005.png" style="zoom:50%;" />
<h4 id="规范化"><a class="markdownIt-Anchor" href="#规范化"></a> 规范化</h4>
<p>减少冗余 -&gt; 减少操作异常</p>
<h3 id="数据的存储和查询"><a class="markdownIt-Anchor" href="#数据的存储和查询"></a> 数据的存储和查询</h3>
<p>存储管理器</p>
<p>查询管理器</p>
<h3 id="事务管理"><a class="markdownIt-Anchor" href="#事务管理"></a> 事务管理</h3>
<p><strong>事务</strong>：数据库应用中完成<strong>单一逻辑功能</strong>的操作集合。</p>
<p>原子性问题：多件事情同时发生，它们同时成功或同时失败。  <em>All or nothing.</em></p>
<p>经典例子：银行转账，转出账户扣款和转入账户到账应同时成功或失败，即是一个事务。</p>
<ul>
<li>恢复管理器：确保数据库所有事务均能够成功完成。</li>
<li>并发控制管理器：控制并发事务间的相互影响，保证一致性。</li>
</ul>
<h3 id="数据库体系结构"><a class="markdownIt-Anchor" href="#数据库体系结构"></a> 数据库体系结构</h3>
<ul>
<li>两层：B/S (Browser/Server)、C/S (Client/Server)</li>
<li>三层：客户机 - 应用服务器（实现业务逻辑） - 数据库</li>
</ul>
]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 事务与并发控制</title>
    <url>/2021/06/10/db-lock/</url>
    <content><![CDATA[<div class="note success flat"><p><strong>本节内容</strong></p>
<ol>
<li>事务</li>
<li>并发控制</li>
</ol>
</div>
<!--事务-->
<h2 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务</h2>
<p><strong>事务</strong>：访问并可能更新各种数据项的一个程序执行单元。</p>
<p>事务的<strong>ACID特性</strong>：</p>
<ul>
<li><strong>原子性</strong>（Atomicity）：事务的所有操作在数据库中要么<strong>全部正确</strong>地反映出来，要么<strong>完全不反应</strong>。</li>
<li><strong>一致性</strong>（Consistency）：隔离执行事务时（在没有其他事务并发执行的情况下）保证数据库的一致性。</li>
<li><strong>隔离性</strong>（Isolation）：尽管多个事务可能并发执行，但系统保证，对任何一对事务Ti和Tj，对Ti看来，Tj或在Ti开始之前已经执行，或在Ti完成之后开始执行。因此，每个事务都<strong>感觉不到系统中有其他事务在并发地执行</strong>。</li>
<li><strong>持续性</strong>（Durability ）：一个事务成功完成后，对数据库的<strong>改变必须是永久的</strong>，即使出现系统故障。</li>
</ul>
<p>抽象事务模型：</p>
<img src="https://repo.live.holgerbest.top/img/image-20210703105159959.png"  style="zoom:50%;" />
<p><strong>调度</strong>：指令在系统中执行的时间顺序。</p>
<p><strong>串行调度</strong>：属于同一事务的指令在调度中紧挨在一起。</p>
<p><strong>可串行化调度</strong>：等价于一个串行调度的调度。</p>
<p><strong>指令冲突</strong>：分别属于两个事务的两条指令<strong>至少有一个</strong>是write指令。</p>
<p><strong>冲突等价</strong>：在调度S中，含有分别属于事务Ti和Tj的两条连续指令Ii和Ij，且Ii和Ij引用了<strong>相同的数据项</strong>Q。只考虑read和write指令，若调度S可以经过一系列<strong>非冲突的</strong>指令转换为另一调度S’，则称S与S’是<strong>冲突等价</strong>的。</p>
<p>调度的<strong>优先图</strong>：调度S中包含事务T1，T2，……，Tn。将事务Ti作为图的顶点，若Ti和Tj有<strong>冲突</strong>且Ti比Tj<strong>优先访问资源</strong>，则图中存在一条从Ti到Tj的有向边。</p>
<p>一个调度S是<strong>冲突可串行化的</strong> 当且仅当 S的<strong>优先图中不存在环路</strong>；当且仅当 存在一个串行调度S’，S与S’<strong>冲突等价</strong>。</p>
<p><strong>可恢复调度</strong>：对任何一对事务Ti和Tj，若Tj<strong>读取</strong>了之前由Ti<strong>所写的</strong>数据项，Ti应<strong>先于</strong>Tj提交。</p>
<p><strong>级联回滚</strong>：因单个事务故障导致的<strong>一系列事务回滚</strong>的现象。</p>
<p><strong>无级联调度</strong>：对任何一对事务Ti和Tj，若Tj<strong>读取</strong>了之前由Ti<strong>所写的</strong>数据项，Ti应<strong>在Tj这一读操作前</strong>提交。</p>
<!--并发控制-->
<h2 id="并发控制"><a class="markdownIt-Anchor" href="#并发控制"></a> 并发控制</h2>
<h3 id="并发导致的不一致性"><a class="markdownIt-Anchor" href="#并发导致的不一致性"></a> 并发导致的不一致性</h3>
<p><strong>一对矛盾</strong>：数据共享（并发性质）、数据一致性</p>
<ul>
<li><strong>丢失修改</strong>（Lost Update）两个事务T1和T2读入同一数据并修改，T2的提交结果破坏了T1提交的结果，导致T1的修改被丢失。</li>
<li><strong>不可重复读</strong>（Non-repeatable Read）：不可重复读是指事务T1读取数据后，事务T2执行更新（更删改）操作，使T1无法再现前一次读取结果。</li>
<li><strong>读“脏”数据</strong>（Dirty Read）：事务T1修改某一数据，并将其写回磁盘；事务T2读取同一数据后，T1由于某种原因被撤销，这时T1已修改过的数据恢复原值，T2读到的数据就与数据库中的数据不一致。T2读到的数据就为“脏”数据，即不正确的数据。</li>
</ul>
<blockquote>
<p>数据不一致性：由于并发操作破坏了事务的<strong>隔离性</strong>。</p>
</blockquote>
<p>并发控制的<strong>主要技术</strong>：有封锁(Locking)、时间戳(Timestamp)、乐观控制法</p>
<h3 id="封锁"><a class="markdownIt-Anchor" href="#封锁"></a> 封锁</h3>
<p><strong>封锁</strong>：事务T在对某个数据对象（例如表、记录等）操作之前，先向系统发出请求，对其加锁。</p>
<p>共享锁（读锁，S锁）：可读不可写的锁，再加X锁需要等待释放。</p>
<p>排他锁（写锁，X锁）：可读可写的锁，再加S锁、X锁要等待释放。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703100650707.png" alt="image-20210703100650707" /><img src="https://repo.live.holgerbest.top/img/image-20210703100701903.png" alt="image-20210703100701903" /><img src="https://repo.live.holgerbest.top/img/image-20210703100720259.png" alt="image-20210703100720259" /></p>
<h3 id="活锁和死锁"><a class="markdownIt-Anchor" href="#活锁和死锁"></a> 活锁和死锁</h3>
<p><strong>活锁</strong>：事务T2在一数据对象加锁，事务T1加锁的请求处于等待状态，可能存在一个事务序列，其中每个事务申请对该数据加锁，每个事务在授权加锁后的一小段时间内释放锁，而事务T1对一数据的加锁请求一直处于等待状态，可能永远得不到进展。</p>
<p><strong>解决办法</strong>：先来先服务原则</p>
<p><strong>死锁</strong>【重点】：两个或多个事务都封锁了一些数据对象，然后又请求对已为其他事务封锁的数据对象加锁，从而出现死等待。<br />
存在一个等待事务集{T0，T1，…，Tn}，其中T0正等待被T1锁住的数据项，T1正等待被T2锁住的数据项，Tn-1正等待被Tn锁住的数据项，且Tn正等待被T0锁住的数据项。</p>
<p>例：事务T1对数据A加锁，事务T2对数据B加锁，之后事务T1又请求对数据B加锁，出现等待，事务T2又请求对数据A加锁，也出现等待。</p>
<p><strong>解决</strong>：</p>
<ol>
<li><strong>预防死锁</strong>（DBMS不常用，常用于操作系统）</li>
<li><strong>一次性封锁</strong>（一次性把要使用的数据全部加锁，否则不能继续执行）——降低系统的并发度，难于事先精确确定封锁对象</li>
<li><strong>顺序封锁法</strong>（预先对数据对象规定封锁顺序，所有事务都按照这一顺序封锁数据）——很难确定一个事务要封锁哪些对象</li>
<li><strong>诊断并解除死锁</strong>（DBMS采用）</li>
<li><strong>超时法</strong>（一个事务等待时间超过规定的时限，就认为发生了死锁）——实现简单，但有可能误判死锁，时限定的太长无法及时发现死锁</li>
<li><strong>事务等待图法</strong>（动态反应所有事务的等待情况），系统周期性地（间隔数秒）建图，判断图中是否包含<strong>回路</strong>，解除死锁即选择一个处理死锁代价最小的事务，将其撤销，释放其占有的锁</li>
</ol>
<blockquote>
<p><strong>事务等待图</strong>是一个有向图 <code>G=(T, U)</code> ，T结点集合，每个结点为正在运行的事务；U为有向边的集合，若T1等待事务T2，则存在一条从T1到T2的有向边。<br />
<img src="https://repo.live.holgerbest.top/img/image-20210703100755071.png" alt="image-20210703100755071" /></p>
</blockquote>
<h3 id="并发调度的可串行性"><a class="markdownIt-Anchor" href="#并发调度的可串行性"></a> 并发调度的可串行性</h3>
<p><strong>可串行化调度</strong>：多个事务的并发执行是<strong>正确</strong>的，当且仅当其结果与按某一次序串行地执行这些事务时的结果相同。</p>
<p><strong>可串行性</strong>：是并发事务正确调度的准则。一个给定的并发调度，<u>当且仅当它是可串行化的，才认为是正确调度。</u></p>
<p>可串行化调度的<strong>充分条件</strong>：一个调度是冲突可串行化调度，一定是可串行化调度。</p>
<blockquote>
<p>v冲突可串行化调度是可串行化调度的<strong>充分条件</strong>，不是必要条件。还有不满足冲突可串行化条件的可串行化调度。</p>
</blockquote>
<p><strong>冲突可串行化调度</strong>：一个调度S在保证<strong>冲突操作</strong>的次序不变的情况下，通过交换两个事务不冲突操作的次序得到另一个调度S’，如果S’是可串行化的，称调度S是冲突可串行化的调度。</p>
<p><strong>冲突操作</strong>：分别属于两个事务的两条指令至少有一个write指令。</p>
<hr />
<p>［例］ 今有调度 Sc1=r1(A) w1(A) r2(A) <u>w2(A)</u> r1(B) w1(B) r2(B) w2(B)</p>
<ul>
<li>把w2(A)与r1(B)w1(B)交换，得到：  r1(A) w1(A) <u>r2(A)</u> r1(B) w1(B) <u>w2(A)</u> r2(B) w2(B)</li>
<li>再把r2(A)与r1(B)w1(B)交换：  Sc2＝r1(A) w1(A) r1(B) w1(B) <u>r2(A)</u> w2(A) r2(B) w2(B)</li>
<li>Sc2等价于一个串行调度T1，T2，Sc1冲突可串行化的调度</li>
</ul>
<p>［例］ 有3个事务    T1=W1(Y)W1(X)，T2=W2(Y)W2(X)，T3=W3(X)</p>
<ul>
<li>调度L1=W1(Y) <u>W1(X)</u> W2(Y) W2(X) W3(X)是一个串行调度。</li>
<li>调度L2=W1(Y) W2(Y) W2(X) <u>W1(X)</u> W3(X)不满足冲突可串行化。但是调度L2是可串行化的，因为L2执行的结果与调度L1相同，Y的值都等于T2的值，X的值都等于T3的值</li>
</ul>
<hr />
<h3 id="两段锁协议-two-phase-locking2pl"><a class="markdownIt-Anchor" href="#两段锁协议-two-phase-locking2pl"></a> 两段锁协议 Two-Phase Locking，2PL</h3>
<p>保证可串行性的一个协议，对数据对象封锁约定一些规则。所有事务必须分两个阶段对数据项加锁和解锁。</p>
<ul>
<li><strong>扩展阶段</strong>：（申请封锁）在任何数据读写之前，事务首先要获得对该数据项的封锁，但不能释放锁。</li>
<li><strong>收缩阶段</strong>：（释放封锁）事务只能释放锁，但不能申请和获得新的锁。</li>
</ul>
<p>可串行化调度的<strong>充分条件</strong>：遵守2PL的调度一定是<strong>可串行化</strong>的调度。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703101228763.png" alt="image-20210703101228763" /></p>
<p>若并发事务都遵守2PL，则对这些事务的任何并发调度都是可串行化的。</p>
<blockquote>
<p>一次封锁法 vs 2PL：一次性封锁法要求每个事务必须<u>一次性把所有数据全加锁</u>，否则不能继续执行，是遵守2PL的，但2PL不要求一次性全部加锁，故<strong>遵守2PL的调度有可能发生死锁。</strong></p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703101256627.png" alt="image-20210703101256627" /></p>
</blockquote>
<h3 id="封锁粒度"><a class="markdownIt-Anchor" href="#封锁粒度"></a> 封锁粒度</h3>
<p><strong>封锁粒度</strong>：封锁对象的大小</p>
<p><strong>封锁的对象</strong>：逻辑单元（属性值、属性值集合、元组、关系、索引项、整个索引、整个数据库），物理单元（页/block、物理记录）</p>
<p>封锁粒度越大，数据库能封锁的数据单元越少，并发度越小，系统开销也越小；封锁粒度越小，并发度较高，但系统开销也就越大（因为授权锁时检查的内容也就更多）。</p>
<p><strong>多粒度封锁</strong>：在一个系统中同时支持多种封锁共不同事务选择。</p>
<p>选择封锁粒度需考虑的因素：封锁开销和并发度。</p>
<h4 id="多颗粒树"><a class="markdownIt-Anchor" href="#多颗粒树"></a> 多颗粒树</h4>
<p>允许各种大小的数据项并定于数据粒度的层次结构，小粒度的数据项嵌套在大粒度数据项中。</p>
<p>允许多颗粒树中的每个结点被独立抵加锁，对一个结点加锁意味着这个结点的所有孩子结点都加了同类型的锁。</p>
<p>一个数据对象可能以两种方式封锁：<strong>隐式封锁</strong>（由于上级结点加锁导致结点加锁）、<strong>显式封锁</strong>。两种封锁的效果是一样的。</p>
<p>系统检查封锁冲突时，要检查显式封锁和隐式加锁：该数据对象，所有上级结点，所有下级结点。</p>
<h4 id="意向锁-intention-lock"><a class="markdownIt-Anchor" href="#意向锁-intention-lock"></a> 意向锁 intention lock</h4>
<p><strong>意向锁</strong>：提高对某个数据对象的加锁时系统检查的效率。</p>
<p>如果对一个结点加意向锁，说明该结点的<strong>下层结点</strong>正在被加锁；对任意结点加基本锁，必须对<strong>上层结点</strong>加意向锁。</p>
<blockquote>
<p>即任何结点如果要加锁，则其上层结点要加相应意向锁。</p>
</blockquote>
<ul>
<li><strong>意向共享锁</strong>（IS锁）：（下层结点将要被读取）后继结点拟（意向）加S锁。</li>
<li><strong>意向排它锁</strong>（IX锁）：（下层结点将要被更新）后继结点拟（意向）加X锁。</li>
<li><strong>共享意向排它锁</strong>（SIX锁）：（该数据项正在被读取，其下层结点个别数据即将更新）该数据对象加S锁，再加IX锁。<strong>SIX=S+IX</strong> （如：读整个表，更新个别元组）</li>
</ul>
<p>意向锁的相容性矩阵（Y-相容，N-不相容）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">T1 \ T2</th>
<th style="text-align:center">S</th>
<th style="text-align:center">X</th>
<th style="text-align:center">IS</th>
<th style="text-align:center">IX</th>
<th style="text-align:center">SIX</th>
<th style="text-align:center">-</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">IS</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">IX</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">SIX</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
</tbody>
</table>
<p><strong>锁的强度</strong>：X&gt;SIX&gt;S=IX&gt;IS</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703100416128.png" alt="image-20210703100416128" /></p>
<p>具有意向锁的多粒度封锁方法：申请时<strong>自上而下</strong>，释放锁时<strong>自下而上</strong></p>
<hr />
<p><em>例如</em>：事务T1对关系R1加S锁。</p>
<p>首先，对数据库加IS锁，检查数据库和R1是否加了不兼容的锁（X、IX）</p>
<p>（优点）不在需要搜索和检查R1中的元组是否加了不相容的锁（X）。</p>
<hr />
<p>提供意向锁可以<strong>避免检查其子节点</strong>是否存在不相容的锁，<strong>减少了加锁的开销</strong>，提高了解锁和加锁的开销。</p>
]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 期中 SQL 专项练习</title>
    <url>/2021/04/22/db-mid-sql/</url>
    <content><![CDATA[<p>现有模式定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">student (sno, sname, sage, ssex, sdept)</span><br><span class="line">dourse (cno, cname, ccredit)</span><br><span class="line">sc (sno, cno, grade)</span><br></pre></td></tr></table></figure>
<p>(1) 查询选修了与学号为“1802387”相同课程的学生姓名【签到题1】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname </span><br><span class="line"><span class="keyword">FROM</span> student, sc </span><br><span class="line"><span class="keyword">WHERE</span> student.sno <span class="operator">=</span> sc.sno <span class="keyword">AND</span> sc.cno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cno</span><br><span class="line">                                          <span class="keyword">FROM</span> sc</span><br><span class="line">                                          <span class="keyword">WHERE</span> sc.sno <span class="operator">=</span> <span class="string">&#x27;1802387&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>(2) 查询每个学院的学生平均年龄，按平均年龄降序返回【签到题2】</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sage)</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sdept</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">AVG</span>(sage) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<p>(3) 查询选修了所有课程的学生学号与姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sno, sname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (  <span class="comment">-- 不存在未选课程</span></span><br><span class="line">    (<span class="keyword">SELECT</span> cno</span><br><span class="line">     <span class="keyword">FROM</span> course)  <span class="comment">-- 所有课程</span></span><br><span class="line">    <span class="keyword">EXCEPT</span></span><br><span class="line">    (<span class="keyword">SELECT</span> cno</span><br><span class="line">     <span class="keyword">FROM</span> sc</span><br><span class="line">     <span class="keyword">WHERE</span> sno<span class="operator">=</span>student.sno)  <span class="comment">-- 已选课程</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>(4) 查询超过该门课程平均分的选课记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建临时视图</span></span><br><span class="line"><span class="keyword">WITH</span> avg_view(cno, avg_grade) <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> cno, <span class="built_in">AVG</span>(grade)</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> cno;</span><br><span class="line"><span class="comment">-- 或创建一个视图</span></span><br><span class="line"><span class="keyword">CREATE</span> avg_view(cno, avg_grade) <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> cno, <span class="built_in">AVG</span>(grade)</span><br><span class="line">    <span class="keyword">FROM</span> sc</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> cno;</span><br><span class="line"><span class="comment">-- 查询</span></span><br><span class="line"><span class="keyword">SELECT</span> sno, cno, grage</span><br><span class="line"><span class="keyword">FROM</span> sc, avg_view</span><br><span class="line"><span class="keyword">WHERE</span> sc.cno <span class="operator">=</span> avg_view.cno <span class="keyword">AND</span> grade <span class="operator">&gt;</span> avg_grade;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 期中复习 (2)</title>
    <url>/2021/04/16/db-mid-plus/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 期中复习 (1)</title>
    <url>/2021/04/15/db-mid/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 关系代数与 SQL</title>
    <url>/2021/07/03/db-relation-sql/</url>
    <content><![CDATA[<div class="note success flat"><p><strong>本节内容</strong></p>
<p>第二部分：关系代数与 SQL</p>
<p>对应教材：</p>
<ul>
<li>Chapter 2: Relational Model</li>
<li>Chapter 3: Introduction to SQL</li>
<li>Chapter 4: Intermediate SQL</li>
<li>Chapter 5: Advanced SQL</li>
<li>Chapter 6: Fromal Relational Query Languages</li>
</ul>
</div>
<h2 id="关系模型"><a class="markdownIt-Anchor" href="#关系模型"></a> 关系模型</h2>
<h3 id="数据模型-关系模型"><a class="markdownIt-Anchor" href="#数据模型-关系模型"></a> 数据模型 -&gt; <strong>关系模型</strong></h3>
<ul>
<li>数据结构 -&gt; 关系</li>
<li>数据操作 -&gt; 关系代数</li>
<li>完整性约束条件：
<ul>
<li>实体完整性</li>
<li>参照完整性</li>
<li>用户定义完整性</li>
</ul>
</li>
</ul>
<h2 id="关系数据库的结构"><a class="markdownIt-Anchor" href="#关系数据库的结构"></a> 关系数据库的结构</h2>
<p>关系数据库由<strong>表</strong>的<u>集合</u>构成，每个表有唯一的名字。</p>
<ul>
<li>关系 —— 表</li>
<li>元组 —— 表中的行</li>
<li>属性 —— 表中的列</li>
</ul>
<h3 id="关系"><a class="markdownIt-Anchor" href="#关系"></a> 关系</h3>
<p><strong>关系</strong>：给定集合 D1, D2, ……, Dn，它们的笛卡尔积为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mn>1</mn></msub><mo>×</mo><msub><mi>D</mi><mn>2</mn></msub><mo>×</mo><mo>⋯</mo><mo>×</mo><msub><mi>D</mi><mi>n</mi></msub><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mtext> </mtext><mi mathvariant="normal">∣</mi><mtext> </mtext><msub><mi>a</mi><mi>i</mi></msub><mo>∈</mo><msub><mi>D</mi><mi>i</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">D_1 \times D_2 \times \cdots \times D_n = \{(a_1, a_2, \cdots, a_n)\ |\ a_i \in D_i \}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mord">∣</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></span></p>
<p>a 的关系 r 为笛卡尔积 D1×D2×⋯×Dn 的子集。</p>
<p>即 a 的关系 r 为元组 (a1,a2,⋯,an), ai ∈ Di 的集合。</p>
<ul>
<li><strong>元组</strong>：一组值的序列。
<ul>
<li>每一<strong>属性</strong>都有值<strong>域</strong>（允许取值的集合）。属性是原子的，即不可再分。</li>
</ul>
</li>
<li><strong>空值</strong> <em>null</em> ：表示值未知或不存在。</li>
</ul>
<h3 id="数据库模式"><a class="markdownIt-Anchor" href="#数据库模式"></a> 数据库模式</h3>
<p><strong>模式</strong>（schema）：假设 A1, A2, ……, An 为属性，称 R = (A1, A2, ……, An) 为<strong>关系模式</strong>。</p>
<blockquote>
<p>关系 r(R) 是指定义在关系模式 R 上的关系 r。</p>
</blockquote>
<p><strong>实例</strong>（instance）：给定时刻数据库中数据的快照。</p>
<h3 id="键码key"><a class="markdownIt-Anchor" href="#键码key"></a> 键（码，Key）</h3>
<ul>
<li><strong>超键</strong> （Super Key）：能<strong>唯一标识一个元组</strong>的一个或多个<strong>属性的集合</strong>。</li>
<li><strong>候选键</strong>（Candidate Key）：【最小的超键】K 是候选键当且仅当 K 是<strong>超键</strong>且 K 的<strong>任意子集</strong>不是超键。</li>
<li><strong>主键</strong>（Primary Key）：被数据库设计者选中的，用来在一个关系中区分不同元组的候选键。<br />
主键应该选择值不发生变化或变化极少的属性，且存储空间相对较小。<br />
一个关系中只能有一个主键，但可以有多个候选键。</li>
<li><strong>外键</strong>（Foreign Key）：一个关系模式 r1 在<strong>属性中包括</strong>另一关系模式 r2 的<strong>主键</strong>，则这个属性<strong>在 r1 上称作参照 r2 的主键</strong>。<br />
关系 r1 也称外键依赖的<strong>参照关系</strong>，r2 称为<strong>被参照关系</strong>。</li>
</ul>
<h2 id="sql"><a class="markdownIt-Anchor" href="#sql"></a> SQL</h2>
<ul>
<li>SQL：结构化查询语言</li>
<li>理论基础：关系代数+关系运算</li>
<li>组成：
<ul>
<li>DDL  数据定义语言</li>
<li>DML  数据查询语言</li>
<li>视图定义</li>
<li>完整性约束</li>
<li>事务控制</li>
<li>授权</li>
<li>嵌入式 SQL 与动态 SQL</li>
</ul>
</li>
</ul>
<h2 id="sql-数据定义语言"><a class="markdownIt-Anchor" href="#sql-数据定义语言"></a> SQL 数据定义语言</h2>
<h3 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h3>
<ul>
<li>character / char(n)  固定长度为 n 的字符串</li>
<li>character varying / varchar(n)  最大长度为 n 的可变长度字符串</li>
<li>int / integer  整数</li>
<li>smallint  小整数</li>
<li>numeric(p, d)  定点数（精确数字）p 位数字，d 位小数</li>
<li>real / double precision  浮点数 / 双精度浮点数（机器相关）</li>
<li>float(n)  精度至少为 n 的浮点数</li>
<li>date  日期</li>
<li>time  一天中的时间  time(p)：秒后小数点的数字位数（默认为0）</li>
<li>timestamp  date + time  timestamp(p)：秒后小数点的数字位数（默认为6）
<ul>
<li>case e as t  将 e 转换为 t 类型</li>
<li><em>extract</em> (field from d)：提取单独的域</li>
<li><em>interval</em> (数据类型)：在日期、时间、时间间隔上进行运算</li>
</ul>
</li>
<li>blob  二进制大对象数据类型</li>
<li>clob  大对象数据类型
<ul>
<li>当查询返回大对象时，返回“指针”</li>
</ul>
</li>
</ul>
<h3 id="模式定义"><a class="markdownIt-Anchor" href="#模式定义"></a> 模式定义</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> r (</span><br><span class="line">    A1	D1,</span><br><span class="line">    A2	D2,</span><br><span class="line">    ……,</span><br><span class="line">    An	Dn,</span><br><span class="line">    <span class="operator">&lt;</span>完整性约束条件...<span class="operator">&gt;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>默认值：<code>DEFAULT 默认值</code></p>
<h3 id="模式删除"><a class="markdownIt-Anchor" href="#模式删除"></a> 模式删除</h3>
<p><strong>删除整个表中的所有数据以及表的结构</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> r;</span><br></pre></td></tr></table></figure>
<h3 id="修改模式"><a class="markdownIt-Anchor" href="#修改模式"></a> 修改模式</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> r <span class="operator">&lt;</span>其他操作<span class="operator">&gt;</span>;</span><br><span class="line"><span class="comment">-- 例如删除表 r 中的属性 A</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> r <span class="keyword">DROP</span> A;</span><br></pre></td></tr></table></figure>
<div class="note flat"><p><strong>SQL 中数据库的定义与删除</strong></p>
<p><strong>创建数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db<span class="operator">-</span>name;</span><br></pre></td></tr></table></figure>
<p><strong>删除数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE db<span class="operator">-</span>name;</span><br></pre></td></tr></table></figure></div>
<h2 id="关系代数运算-对应-sql-语句"><a class="markdownIt-Anchor" href="#关系代数运算-对应-sql-语句"></a> 关系代数运算 &amp; 对应 SQL 语句</h2>
<h3 id="选择"><a class="markdownIt-Anchor" href="#选择"></a> 选择</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>σ</mi><mi>P</mi></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mi>t</mi><mi mathvariant="normal">∣</mi><mi>t</mi><mo>∈</mo><mi>r</mi><mo>∧</mo><mi>P</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\sigma_P (r) = \{t | t\in r \wedge P(t)\}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">t</span><span class="mord">∣</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mclose">}</span></span></span></span></span></p>
<p>逐行判断是否满足条件 P。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> r <span class="keyword">WHERE</span> P;</span><br></pre></td></tr></table></figure>
<h3 id="投影"><a class="markdownIt-Anchor" href="#投影"></a> 投影</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">Π</mi><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>A</mi><mi>k</mi></msub></mrow></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi_{A_1, A_2, \cdots, A_k} (r)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="minner mtight">⋯</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span></span></p>
<p>选定 A1,A2,⋯,Ak 列，并去除重复的行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A1,A2,⋯,Ak <span class="keyword">FROM</span> r;</span><br></pre></td></tr></table></figure>
<h3 id="广义投影"><a class="markdownIt-Anchor" href="#广义投影"></a> 广义投影</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">Π</mi><mrow><msub><mi>F</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>F</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>F</mi><mi>k</mi></msub></mrow></msub><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi_{F_1, F_2, \cdots, F_k} (E)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="minner mtight">⋯</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span></span></p>
<p>其中 F1, F2, …, Fk 为算数表达式。</p>
<div class="note info flat"><p><strong>关系运算的组合</strong></p>
<p>前提：关系运算的结果仍然是<strong>关系</strong>。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">Π</mi><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>A</mi><mi>k</mi></msub></mrow></msub><mo stretchy="false">(</mo><mtext> </mtext><msub><mi>σ</mi><mi>P</mi></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi_{A_1, A_2, \cdots, A_k} ( \ \sigma_P (r) \ )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="minner mtight">⋯</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace"> </span><span class="mclose">)</span></span></span></span></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A1,A2,⋯,Ak <span class="keyword">FROM</span> r <span class="keyword">WHERE</span> P;</span><br></pre></td></tr></table></figure></div>
<div class="note flat"><p><strong>SQL 注意事项</strong></p>
<ul>
<li>大小写不敏感</li>
<li>SQL 语句<strong>默认不去重</strong>，即为 <code>SELECT ALL</code> ，其中关键字 ALL 可以省略；而关系代数运算结果去重<br />
SQL 结果如需去重，使用 <strong>DISTINCT 关键字</strong>：<code>SELECT DISTINCT</code></li>
<li>对于条件 P ，在 SQL 中可以使用任意的表达式以及 AND OR NOT 连接<br />
判断在 N1~N2 范围内可以使用 <code>BETWEEN N1 AND N2</code></li>
</ul>
</div>
<h3 id="并-union"><a class="markdownIt-Anchor" href="#并-union"></a> 并 union</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>∪</mo><mi>s</mi><mo>=</mo><mo stretchy="false">{</mo><mi>t</mi><mi mathvariant="normal">∣</mi><mi>t</mi><mo>∈</mo><mi>r</mi><mo>∨</mo><mi>t</mi><mo>∈</mo><mi>s</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">r\cup s = \{ t | t\in r \vee t\in s \}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">t</span><span class="mord">∣</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mclose">}</span></span></span></span></span></p>
<div class="note success flat"><p><strong>相容</strong></p>
<p>并、交、差运算要求 r 和 s 是<strong>相容的</strong>：</p>
<ol>
<li>r 和 s 的元素要相同（同元），即属性相同</li>
<li>r 和 s 的域要相容</li>
</ol>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> r) <span class="keyword">UNION</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s);</span><br></pre></td></tr></table></figure>
<h3 id="差-set-difference"><a class="markdownIt-Anchor" href="#差-set-difference"></a> 差 set-difference</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>−</mo><mi>s</mi><mo>=</mo><mo stretchy="false">{</mo><mi>t</mi><mi mathvariant="normal">∣</mi><mi>t</mi><mo>∈</mo><mi>r</mi><mo>∧</mo><mi>t</mi><mi mathvariant="normal">∉</mi><mi>s</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">r-s = \{ t | t\in r \wedge t\notin s \}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">t</span><span class="mord">∣</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mclose">}</span></span></span></span></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> r) <span class="keyword">EXCEPT</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s);</span><br></pre></td></tr></table></figure>
<h3 id="交-intersection"><a class="markdownIt-Anchor" href="#交-intersection"></a> 交 intersection</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>∩</mo><mi>s</mi><mo>=</mo><mo stretchy="false">{</mo><mi>t</mi><mi mathvariant="normal">∣</mi><mi>t</mi><mo>∈</mo><mi>r</mi><mo>∧</mo><mi>t</mi><mo>∈</mo><mi>s</mi><mo stretchy="false">}</mo><mstyle mathcolor="red"><mo>=</mo><mi>r</mi><mo>−</mo><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>s</mi><mo stretchy="false">)</mo></mstyle></mrow><annotation encoding="application/x-tex">r\cap s = \{ t | t\in r \wedge t\in s \}  \color{red} = r - (r - s)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">t</span><span class="mord">∣</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:red;">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;color:red;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:red;">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen" style="color:red;">(</span><span class="mord mathdefault" style="margin-right:0.02778em;color:red;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:red;">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="color:red;">s</span><span class="mclose" style="color:red;">)</span></span></span></span></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> r) <span class="keyword">INTERSECT</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> s);</span><br></pre></td></tr></table></figure>
<div class="note success flat"><p><strong>SQL 中的集合运算</strong></p>
<ul>
<li>UNION，EXCEPT，INTERSECT 自动<strong>去除重复</strong><br />
如果<strong>不需要去重</strong>，使用 ALL 关键字：UNION ALL，EXCEPT ALL，INTERSECT ALL</li>
<li>一个元组，在 r 中出现 m 次，s 中出现 n 次：
<ul>
<li><code>r UNION ALL s</code> ：该元组出现 m+n 次</li>
<li><code>r INTERSECT ALL s</code> ：该元组出现 min(m, n) 次</li>
<li><code>r EXCEPT ALL s</code> ：该元组出现 max(0, m-n) 次</li>
</ul>
</li>
</ul>
</div>
<h3 id="笛卡尔积"><a class="markdownIt-Anchor" href="#笛卡尔积"></a> 笛卡尔积</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>×</mo><mi>s</mi><mo>=</mo><mo stretchy="false">{</mo><mi>t</mi><mtext> </mtext><mi>q</mi><mi mathvariant="normal">∣</mi><mi>t</mi><mo>∈</mo><mi>r</mi><mo>∧</mo><mi>q</mi><mo>∈</mo><mi>s</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">r\times s = \{ t \ q | t\in r \wedge q\in s \}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">∣</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mclose">}</span></span></span></span></span></p>
<blockquote>
<p>若列名相同则重命名：表名.列名</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> r,s;</span><br></pre></td></tr></table></figure>
<h3 id="重命名"><a class="markdownIt-Anchor" href="#重命名"></a> 重命名</h3>
<p>将表达式 E 重命名为 X：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>ρ</mi><mi>X</mi></msub><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\rho_X (E)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">ρ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span></span></p>
<p>SQL 语句 SELECT-FROM-WHERE 中的 AS 子句可以为属性、关系重命名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">old_name <span class="operator">|</span> attribute_name <span class="operator">|</span> table_name <span class="keyword">AS</span> new_name</span><br></pre></td></tr></table></figure>
<div class="note flat"><p><strong>重命名应用</strong></p>
<p>找到 S 表中属性 A 的最大值：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">Π</mi><mi>A</mi></msub><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi mathvariant="normal">Π</mi><mrow><mi>S</mi><mi mathvariant="normal">.</mi><mi>A</mi></mrow></msub><mo stretchy="false">(</mo><mtext> </mtext><msub><mi>σ</mi><mrow><mi>S</mi><mi mathvariant="normal">.</mi><mi>A</mi><mo>&lt;</mo><mi>R</mi><mi mathvariant="normal">.</mi><mi>A</mi></mrow></msub><mo stretchy="false">(</mo><mi>S</mi><mo>×</mo><msub><mi>ρ</mi><mi>R</mi></msub><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Pi_A(S) - \Pi_{S.A}(\ \sigma_{S.A &lt; R.A}(S\times\rho_R(S))\ )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mtight">.</span><span class="mord mathdefault mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mtight">.</span><span class="mord mathdefault mtight">A</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mtight">.</span><span class="mord mathdefault mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.17737em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">ρ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace"> </span><span class="mclose">)</span></span></span></span></span></p>
</div>
<h3 id="自然连接"><a class="markdownIt-Anchor" href="#自然连接"></a> 自然连接</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>⋈</mo><mi>s</mi></mrow><annotation encoding="application/x-tex">r \bowtie s
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.51em;vertical-align:-0.005em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⋈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span></span></p>
<p>r ⋈ s 是一个在模式 R∪S 上的关系，且满足：对于 r 中的每一个元组 Tr 和 s 中的每一个元组 Ts，Tr 和 Ts 有相同的属性，且它们的取值相同。（即同名属性值相同）</p>
<p>对于模式：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><mi>D</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>S</mi><mo>=</mo><mo stretchy="false">(</mo><mi>B</mi><mo separator="true">,</mo><mi>D</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R=(A,B,C,D) \ S=(B,D,E)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span></span></p>
<p>定义：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>⋈</mo><mi>s</mi><mo>=</mo><msub><mi mathvariant="normal">Π</mi><mrow><mo stretchy="false">(</mo><mi>r</mi><mi mathvariant="normal">.</mi><mi>A</mi><mo separator="true">,</mo><mi>r</mi><mi mathvariant="normal">.</mi><mi>B</mi><mo separator="true">,</mo><mi>r</mi><mi mathvariant="normal">.</mi><mi>C</mi><mo separator="true">,</mo><mi>r</mi><mi mathvariant="normal">.</mi><mi>D</mi><mo separator="true">,</mo><mi>s</mi><mi mathvariant="normal">.</mi><mi>E</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">(</mo><mtext> </mtext><msub><mi>σ</mi><mrow><mi>r</mi><mi mathvariant="normal">.</mi><mi>B</mi><mo>=</mo><mi>s</mi><mi mathvariant="normal">.</mi><mi>B</mi><mo>∧</mo><mi>r</mi><mi mathvariant="normal">.</mi><mi>D</mi><mo>=</mo><mi>s</mi><mi mathvariant="normal">.</mi><mi>D</mi></mrow></msub><mo stretchy="false">(</mo><mi>r</mi><mo>×</mo><mi>s</mi><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r \bowtie s = \Pi_{(r.A, r.B, r.C, r.D, s.E)}(\ \sigma_{r.B=s.B \wedge r.D=s.D}(r\times s) \ )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.51em;vertical-align:-0.005em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⋈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mtight">.</span><span class="mord mathdefault mtight">A</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">s</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">s</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mbin mtight">∧</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">s</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mspace"> </span><span class="mclose">)</span></span></span></span></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> r.A, r.B, r.C, r.D, s.E</span><br><span class="line"><span class="keyword">FROM</span> r, s</span><br><span class="line"><span class="keyword">WHERE</span> r.B <span class="operator">=</span> s.B <span class="keyword">AND</span> r.D <span class="operator">=</span> s.D;</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">SELECT</span> r.A, r.B, r.C, r.D, s.E</span><br><span class="line"><span class="keyword">FROM</span> r <span class="keyword">INNER</span> <span class="keyword">JOIN</span> s</span><br><span class="line"><span class="keyword">ON</span> r.B <span class="operator">=</span> s.B <span class="keyword">AND</span> r.D <span class="operator">=</span> s.D;</span><br></pre></td></tr></table></figure>
<h3 id="外连接"><a class="markdownIt-Anchor" href="#外连接"></a> 外连接</h3>
<p>外连接是连接运算的扩展，可以避免信息的丢失（自然连接：无法连接时会丢掉数据）。</p>
<table>
<thead>
<tr>
<th>解释</th>
<th>图示</th>
<th>SQL</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>内连接</strong></td>
<td><img src="https://repo.live.holgerbest.top/img/c7279db39b7d1ceff826b457d7d4d06f.png"  /></td>
<td><code>A INNER JOIN B</code>  INNER 可以省略</td>
</tr>
<tr>
<td><strong>左外连接</strong>：左表全部出现在结果集中，若右表无对应记录，则相应字段为<code>NULL</code></td>
<td><img src="https://repo.live.holgerbest.top/img/e530ce69902a3d28ede3d299a89a8344.png" /></td>
<td><code>A LEFT OUTER JOIN B</code>  OUTER 可省略</td>
</tr>
<tr>
<td><strong>右外连接</strong>：右表全部出现在结果集中，若左表无对应记录，则相应字段为<code>NULL</code></td>
<td><img src="https://repo.live.holgerbest.top/img/af616f3409fd479fe0bd23a7dc61881e.png" /></td>
<td><code>A RIGHT OUTER JOIN B</code>  OUTER 可省略</td>
</tr>
<tr>
<td><strong>全外连接</strong> = 左外连接 + 右外连接</td>
<td><img src="https://repo.live.holgerbest.top/img/4f7fba9faff0ea7b1c6d52d82a8f2929.png" /></td>
<td><code>A FULL OUTER JOIN B</code>  OUTER 可省略</td>
</tr>
</tbody>
</table>
<h4 id="连接条件"><a class="markdownIt-Anchor" href="#连接条件"></a> 连接条件</h4>
<ul>
<li>NATURAL  自然连接<br />
<code>A INNER JOIN B ON A.attr = B.attr</code> 等价于 <code>A NATURAL JOIN B</code></li>
<li>ON P  指定连接条件</li>
<li>USING (A1, A2, …, An)  指定连接属性</li>
</ul>
<h3 id="除"><a class="markdownIt-Anchor" href="#除"></a> ☆ 除</h3>
<p>给定模式：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>A</mi><mi>m</mi></msub><mo separator="true">,</mo><msub><mi>B</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>B</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext>  </mtext><mi>S</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>A</mi><mi>m</mi></msub><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>t</mi><mi>h</mi><mi>e</mi><mi>n</mi><mo>:</mo><mtext> </mtext><mi>R</mi><mo>−</mo><mi>S</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>B</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>B</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R = (A_1, \cdots, A_m, B_1, \cdots, B_n), \ \ S = (A_1, \cdots, A_m) \\ \\
then: \ R-S = (B_1, \cdots, B_n)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>设 r 是模式 R 上的关系， s 是模式 S 上的关系，r÷s 是模式 R-S 上的关系，且有</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>÷</mo><mi>s</mi><mo>=</mo><mo stretchy="false">{</mo><mi>t</mi><mi mathvariant="normal">∣</mi><mi>t</mi><mo>∈</mo><msub><mi mathvariant="normal">Π</mi><mrow><mi>R</mi><mo>−</mo><mi>S</mi></mrow></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>∧</mo><mo stretchy="false">(</mo><mi mathvariant="normal">∀</mi><mi>u</mi><mo>∈</mo><mi>S</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>t</mi><mtext> </mtext><mi>u</mi><mo>∈</mo><mi>r</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">r \div s = \{t|t\in \Pi_{R-S}(r) \wedge (\forall u \in S) \ t \ u \in r \}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">t</span><span class="mord">∣</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">∀</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">}</span></span></span></span></span></p>
<p>定义：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>÷</mo><mi>s</mi><mo>=</mo><msub><mi mathvariant="normal">Π</mi><mrow><mi>R</mi><mo>−</mo><mi>S</mi></mrow></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi mathvariant="normal">Π</mi><mrow><mi>P</mi><mo>−</mo><mi>S</mi></mrow></msub><mo stretchy="false">(</mo><mtext> </mtext><mo stretchy="false">(</mo><msub><mi mathvariant="normal">Π</mi><mrow><mi>R</mi><mo>−</mo><mi>S</mi></mrow></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>×</mo><mi>s</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi mathvariant="normal">Π</mi><mrow><mi>R</mi><mo>−</mo><mi>S</mi><mo separator="true">,</mo><mi>S</mi></mrow></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r\div s = \Pi_{R-S}(r) - \Pi_{P-S}(\ (\Pi_{R-S}(r)\times s) - \Pi_{R-S, S}(r) \ )
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace"> </span><span class="mclose">)</span></span></span></span></span></p>
<ul><li><span class="MathJax_SVG" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="8.412ex" height="2.791ex" viewBox="0 -857.4 3621.9 1201.6" role="img" focusable="false" style="vertical-align: -0.799ex;"><defs><path stroke-width="0" id="E1084-MJMAIN-3A0" d="M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path><path stroke-width="0" id="E1084-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path><path stroke-width="0" id="E1084-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path stroke-width="0" id="E1084-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path><path stroke-width="0" id="E1084-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path stroke-width="0" id="E1084-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path stroke-width="0" id="E1084-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E1084-MJMAIN-3A0" x="0" y="0"></use><g transform="translate(750,-155)"><use transform="scale(0.707)" xlink:href="#E1084-MJMATHI-52" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E1084-MJMAIN-2212" x="759" y="0"></use><use transform="scale(0.707)" xlink:href="#E1084-MJMATHI-53" x="1537" y="0"></use></g><use xlink:href="#E1084-MJMAIN-28" x="2392" y="0"></use><use xlink:href="#E1084-MJMATHI-72" x="2781" y="0"></use><use xlink:href="#E1084-MJMAIN-29" x="3232" y="0"></use></g></svg></span><script type="math/tex"> \Pi_{R-S}(r) </script> 为候选结果</li><li><span class="MathJax_SVG" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="35.428ex" height="2.923ex" viewBox="0 -857.4 15253.6 1258.6" role="img" focusable="false" style="vertical-align: -0.932ex;"><defs><path stroke-width="0" id="E1093-MJMAIN-3A0" d="M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path><path stroke-width="0" id="E1093-MJMATHI-50" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path><path stroke-width="0" id="E1093-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path stroke-width="0" id="E1093-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path><path stroke-width="0" id="E1093-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path stroke-width="0" id="E1093-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path><path stroke-width="0" id="E1093-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path stroke-width="0" id="E1093-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path stroke-width="0" id="E1093-MJMAIN-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path stroke-width="0" id="E1093-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path stroke-width="0" id="E1093-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E1093-MJMAIN-3A0" x="0" y="0"></use><g transform="translate(750,-155)"><use transform="scale(0.707)" xlink:href="#E1093-MJMATHI-50" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E1093-MJMAIN-2212" x="751" y="0"></use><use transform="scale(0.707)" xlink:href="#E1093-MJMATHI-53" x="1529" y="0"></use></g><use xlink:href="#E1093-MJMAIN-28" x="2387" y="0"></use><use xlink:href="#E1093-MJMAIN-28" x="3026" y="0"></use><g transform="translate(3415,0)"><use xlink:href="#E1093-MJMAIN-3A0" x="0" y="0"></use><g transform="translate(750,-155)"><use transform="scale(0.707)" xlink:href="#E1093-MJMATHI-52" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E1093-MJMAIN-2212" x="759" y="0"></use><use transform="scale(0.707)" xlink:href="#E1093-MJMATHI-53" x="1537" y="0"></use></g></g><use xlink:href="#E1093-MJMAIN-28" x="5808" y="0"></use><use xlink:href="#E1093-MJMATHI-72" x="6197" y="0"></use><use xlink:href="#E1093-MJMAIN-29" x="6648" y="0"></use><use xlink:href="#E1093-MJMAIN-D7" x="7259" y="0"></use><use xlink:href="#E1093-MJMATHI-73" x="8259" y="0"></use><use xlink:href="#E1093-MJMAIN-29" x="8728" y="0"></use><use xlink:href="#E1093-MJMAIN-2212" x="9339" y="0"></use><g transform="translate(10340,0)"><use xlink:href="#E1093-MJMAIN-3A0" x="0" y="0"></use><g transform="translate(750,-155)"><use transform="scale(0.707)" xlink:href="#E1093-MJMATHI-52" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E1093-MJMAIN-2212" x="759" y="0"></use><use transform="scale(0.707)" xlink:href="#E1093-MJMATHI-53" x="1537" y="0"></use><use transform="scale(0.707)" xlink:href="#E1093-MJMAIN-2C" x="2182" y="0"></use><use transform="scale(0.707)" xlink:href="#E1093-MJMATHI-53" x="2459" y="0"></use></g></g><use xlink:href="#E1093-MJMAIN-28" x="13385" y="0"></use><use xlink:href="#E1093-MJMATHI-72" x="13774" y="0"></use><use xlink:href="#E1093-MJMAIN-29" x="14225" y="0"></use><use xlink:href="#E1093-MJMAIN-29" x="14864" y="0"></use></g></svg></span><script type="math/tex"> \Pi_{P-S}(\ (\Pi_{R-S}(r)\times s) - \Pi_{R-S, S}(r) \ ) </script> 为候选结果中不存在的那部分</li><li><span class="MathJax_SVG" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="12.341ex" height="2.791ex" viewBox="0 -857.4 5313.4 1201.6" role="img" focusable="false" style="vertical-align: -0.799ex;"><defs><path stroke-width="0" id="E1099-MJMAIN-3A0" d="M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path><path stroke-width="0" id="E1099-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path><path stroke-width="0" id="E1099-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path stroke-width="0" id="E1099-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path><path stroke-width="0" id="E1099-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path stroke-width="0" id="E1099-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path stroke-width="0" id="E1099-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path stroke-width="0" id="E1099-MJMAIN-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path stroke-width="0" id="E1099-MJMATHI-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E1099-MJMAIN-3A0" x="0" y="0"></use><g transform="translate(750,-155)"><use transform="scale(0.707)" xlink:href="#E1099-MJMATHI-52" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E1099-MJMAIN-2212" x="759" y="0"></use><use transform="scale(0.707)" xlink:href="#E1099-MJMATHI-53" x="1537" y="0"></use></g><use xlink:href="#E1099-MJMAIN-28" x="2392" y="0"></use><use xlink:href="#E1099-MJMATHI-72" x="2781" y="0"></use><use xlink:href="#E1099-MJMAIN-29" x="3232" y="0"></use><use xlink:href="#E1099-MJMAIN-D7" x="3844" y="0"></use><use xlink:href="#E1099-MJMATHI-73" x="4844" y="0"></use></g></svg></span><script type="math/tex"> \Pi_{R-S}(r)\times s </script> 为所有可能的结果</li><li><span class="MathJax_SVG" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="9.928ex" height="2.923ex" viewBox="0 -857.4 4274.6 1258.6" role="img" focusable="false" style="vertical-align: -0.932ex;"><defs><path stroke-width="0" id="E1103-MJMAIN-3A0" d="M128 619Q121 626 117 628T101 631T58 634H25V680H724V634H691Q651 633 640 631T622 619V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V634H232V348L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path><path stroke-width="0" id="E1103-MJMATHI-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path><path stroke-width="0" id="E1103-MJMAIN-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path stroke-width="0" id="E1103-MJMATHI-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path><path stroke-width="0" id="E1103-MJMAIN-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path stroke-width="0" id="E1103-MJMAIN-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path stroke-width="0" id="E1103-MJMATHI-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path stroke-width="0" id="E1103-MJMAIN-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E1103-MJMAIN-3A0" x="0" y="0"></use><g transform="translate(750,-155)"><use transform="scale(0.707)" xlink:href="#E1103-MJMATHI-52" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E1103-MJMAIN-2212" x="759" y="0"></use><use transform="scale(0.707)" xlink:href="#E1103-MJMATHI-53" x="1537" y="0"></use><use transform="scale(0.707)" xlink:href="#E1103-MJMAIN-2C" x="2182" y="0"></use><use transform="scale(0.707)" xlink:href="#E1103-MJMATHI-53" x="2459" y="0"></use></g><use xlink:href="#E1103-MJMAIN-28" x="3045" y="0"></use><use xlink:href="#E1103-MJMATHI-72" x="3434" y="0"></use><use xlink:href="#E1103-MJMAIN-29" x="3885" y="0"></use></g></svg></span><script type="math/tex"> \Pi_{R-S, S}(r) </script> 为实际选择的结果</li></ul>
<img src="https://repo.live.holgerbest.top/img/image-20210417003753015.png" style="zoom:80%;" />
<h3 id="聚集"><a class="markdownIt-Anchor" href="#聚集"></a> 聚集</h3>
<p>聚集函数：AVG MIN MAX SUM COUNT</p>
<blockquote>
<p>除 COUNT 外，<strong>聚集函数均忽略空值 NULL</strong>。</p>
<p><code>COUNT(*)</code>：统计元组（行）的个数，不去除重复（如需去重使用 <strong>DISTINCT 关键字</strong>，<code>COUNT(DISTINCT attribute-name)</code>）</p>
</blockquote>
<p>定义：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow></mrow><mrow><msub><mi>G</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>G</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>G</mi><mi>n</mi></msub></mrow></msub><msub><mi mathvariant="script">G</mi><mrow><msub><mi>F</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>F</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>A</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>F</mi><mi>m</mi></msub><mo stretchy="false">(</mo><msub><mi>A</mi><mi>m</mi></msub><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">_{G_1, G_2, \cdots, G_n } \mathcal{G}_{F_1(A_1), F_2(A_2), \cdots, F_m(A_m)} (E)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="minner mtight">⋯</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathcal" style="margin-right:0.0593em;">G</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mpunct mtight">,</span><span class="minner mtight">⋯</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span></span></p>
<ul>
<li>Gi 为用于分组的一系列属性；</li>
<li>每个 Fi 为一个聚集函数；</li>
<li>Ai 为属性名。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> F1(A1),F2(A2),⋯ ,Fm(Am)</span><br><span class="line"><span class="keyword">FROM</span> E</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> G1,G2,⋯ ,Gn</span><br><span class="line"><span class="keyword">HAVING</span> ...;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果不给出分组属性，默认将<strong>整个关系作为一个分组</strong></li>
<li>Ai 必须出现在 Gi 当中，即<strong>没有出现在 GROUP BY 子句中的属性不能在 SELECT 子句中使用</strong></li>
<li>WHRER 子句是对<strong>行</strong>进行选择；如需<strong>对各个分组进行选择</strong>需要使用 HAVING 子句：<br />
<code>HAVING P</code> 谓词 P 对 GROUP BY 子句中各属性构成的分组起作用，可以使用聚集函数</li>
<li>对于聚集函数得到的结果可以使用 AS 子句重命名</li>
</ul>
<h3 id="赋值"><a class="markdownIt-Anchor" href="#赋值"></a> 赋值</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>←</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">name \leftarrow E
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span></span></p>
<p>将结果赋值给变量，便于复杂计算。</p>
<h2 id="sql-中附加的基本运算"><a class="markdownIt-Anchor" href="#sql-中附加的基本运算"></a> SQL 中附加的基本运算</h2>
<h3 id="字符串通配符"><a class="markdownIt-Anchor" href="#字符串通配符"></a> 字符串通配符</h3>
<ul>
<li><code>%</code> 匹配<strong>任意子串</strong>（长度任意）</li>
<li><code>_</code> 匹配任意<strong>单个字符</strong>（1个字符）</li>
</ul>
<p>使用：<code>LIKE &quot;模式字符串&quot;</code> 或 搜索不匹配项 <code>NOT LIKE &quot;模式字符串&quot;</code></p>
<p>指定转义字符：<code>ESCAPE '\'</code></p>
<h3 id="结果排序"><a class="markdownIt-Anchor" href="#结果排序"></a> 结果排序</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>attributes<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>默认升序排列</strong>（ASC），使用 <strong>DESC</strong> 表示降序排列。</p>
<h2 id="空值"><a class="markdownIt-Anchor" href="#空值"></a> 空值</h2>
<ul>
<li>含义：值不存在或不知道。</li>
<li>任何算数表达式中，若包含 <em>null</em> 结果一定为 <em>null</em> ；通常聚集函数求值会忽略 <em>null</em>。</li>
<li>在 SQL 中，认为 <em>null</em> 是相等的，判断是否为空需要使用 <code>IS NULL</code>。</li>
<li>空值参与比较运算，结果返回 <em>unknown</em> ： <code>unknown = not unkonwn</code> ；<code>P is unknown = true if P = unknown</code></li>
</ul>
<h2 id="数据库的修改"><a class="markdownIt-Anchor" href="#数据库的修改"></a> 数据库的修改</h2>
<h3 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>←</mo><mi>r</mi><mo>−</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">r \leftarrow r - E
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span></span></p>
<p>其中 r 为关系，E 为一些元组的集合。</p>
<p>删除的单位是<strong>一行</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> r</span><br><span class="line"><span class="keyword">WHERE</span> P;</span><br></pre></td></tr></table></figure>
<ul>
<li>WHERE 子句可以为空：删除整张表中所有的元组（但不删除表的结构）</li>
</ul>
<h3 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>←</mo><mi>r</mi><mo>∪</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">r \leftarrow r \cup E
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span></span></p>
<p>单位为一行（也可以同时插入多条数据）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> r [(属性名...)]</span><br><span class="line"><span class="keyword">VALUES</span> (数据...)</span><br></pre></td></tr></table></figure>
<p>若不给出属性名，则按照表的属性数量和顺序<strong>一一对应</strong>插入；否则数据与属性名对应。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> r [(属性名)]</span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span><span class="operator">-</span><span class="keyword">from</span><span class="operator">-</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<p>将查询结果批量插入表中。</p>
<h3 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>←</mo><msub><mi mathvariant="normal">Π</mi><mrow><msub><mi>F</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>F</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>F</mi><mi>n</mi></msub></mrow></msub><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r \leftarrow \Pi_{F_1, F_2, \cdots, F_n}(r)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="minner mtight">⋯</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span></span></p>
<p>更新最小单位为一个属性值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> r</span><br><span class="line"><span class="keyword">SET</span> 属性 <span class="operator">=</span> 数值</span><br><span class="line"><span class="keyword">WHERE</span> P;</span><br></pre></td></tr></table></figure>
<p>其中数值可以使用 CASE 语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> </span><br><span class="line">	<span class="keyword">WHEN</span> P1 <span class="keyword">THEN</span> ...</span><br><span class="line">	<span class="keyword">WHEN</span> P2 <span class="keyword">THEN</span> ...</span><br><span class="line">	<span class="keyword">ELSE</span> ...</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
<h2 id="sql-嵌套查询"><a class="markdownIt-Anchor" href="#sql-嵌套查询"></a> SQL 嵌套查询</h2>
<h3 id="集合成员资格判断"><a class="markdownIt-Anchor" href="#集合成员资格判断"></a> 集合成员资格判断</h3>
<p><strong>IN / NOT IN</strong> =&gt; TRUE / FALSE</p>
<p>IN：测试<strong>元组</strong>是否是集合中的成员，也可用于枚举集合</p>
<h3 id="集合的比较"><a class="markdownIt-Anchor" href="#集合的比较"></a> 集合的比较</h3>
<ul>
<li><strong>SOME  至少有一个满足</strong></li>
<li><strong>ALL  对于所有都满足</strong></li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mtext> &lt;comp&gt; </mtext><mi>S</mi><mi>O</mi><mi>M</mi><mi>E</mi><mtext> </mtext><mi>r</mi><mtext> </mtext><mo>⇔</mo><mtext> </mtext><mi mathvariant="normal">∃</mi><mtext> </mtext><mi>t</mi><mo>∈</mo><mi>r</mi><mo separator="true">,</mo><mtext> </mtext><mi>s</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi mathvariant="normal">.</mi><mtext> </mtext><mi>F</mi><mtext> &lt;comp&gt; </mtext><mi>t</mi></mrow><annotation encoding="application/x-tex">F \ \text{&lt;comp&gt;} \ SOME \ r \ \Leftrightarrow \ \exist \ t \in r, \ s.t. \ F \ \text{&lt;comp&gt;}\ t
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace"> </span><span class="mord text"><span class="mord">&lt;comp&gt;</span></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mrel">⇔</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∃</span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mord">.</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace"> </span><span class="mord text"><span class="mord">&lt;comp&gt;</span></span><span class="mspace"> </span><span class="mord mathdefault">t</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mtext> &lt;comp&gt; </mtext><mi>A</mi><mi>L</mi><mi>L</mi><mtext> </mtext><mi>r</mi><mtext> </mtext><mo>⇔</mo><mtext> </mtext><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>t</mi><mo>∈</mo><mi>r</mi><mo separator="true">,</mo><mtext> </mtext><mi>F</mi><mtext> &lt;comp&gt; </mtext><mi>t</mi></mrow><annotation encoding="application/x-tex">F \ \text{&lt;comp&gt;} \ ALL \ r \ \Leftrightarrow \ \forall \ t \in r,  \ F \ \text{&lt;comp&gt;}\ t
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace"> </span><span class="mord text"><span class="mord">&lt;comp&gt;</span></span><span class="mspace"> </span><span class="mord mathdefault">A</span><span class="mord mathdefault">L</span><span class="mord mathdefault">L</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mrel">⇔</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace"> </span><span class="mord text"><span class="mord">&lt;comp&gt;</span></span><span class="mspace"> </span><span class="mord mathdefault">t</span></span></span></span></span></p>
<p>其中，<code>&lt;comp&gt;</code> 可以为 <code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>=</code>、<code>&lt;&gt;</code> 。</p>
<ul>
<li><code>= SOME</code> 等价于 <code>IN</code>，但是 <code>&lt;&gt; SOME</code> 不等价于 <code>NOT IN</code></li>
<li><code>&lt;&gt; ALL</code> 等价于 <code>NOT IN</code>，但是 <code>= ALL</code> 不等价于 <code>IN</code></li>
</ul>
<p><img src="https://repo.live.holgerbest.top/img/image-20210417154532731.png"/> <img src="https://repo.live.holgerbest.top/img/image-20210417154557569.png" /></p>
<h3 id="空关系测试"><a class="markdownIt-Anchor" href="#空关系测试"></a> 空关系测试</h3>
<p>判断集合中是否包含元组。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mi>X</mi><mi>I</mi><mi>S</mi><mi>T</mi><mtext> </mtext><mi>r</mi><mtext> </mtext><mo>⇔</mo><mtext> </mtext><mi>r</mi><mi mathvariant="normal">≠</mi><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">EXIST \ r \ \Leftrightarrow \ r \ne \empty
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mrel">⇔</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">∅</span></span></span></span></span></p>
<div class="note info flat"><p><strong>例题：实现除法</strong></p>
<p>Find all customers who have an account at all branches located in Brooklyn.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> S.customer_name</span><br><span class="line"><span class="keyword">from</span> depositor <span class="keyword">as</span> S</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    (<span class="keyword">select</span> branch_name</span><br><span class="line">     <span class="keyword">from</span> branch</span><br><span class="line">     <span class="keyword">where</span> branch_city <span class="operator">=</span> <span class="string">&#x27;Brooklyn&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span></span><br><span class="line">    (<span class="keyword">select</span> R.branch_name</span><br><span class="line">     <span class="keyword">from</span> depositor <span class="keyword">as</span> T, account <span class="keyword">as</span> R</span><br><span class="line">     <span class="keyword">where</span> T.account_number <span class="operator">=</span> R.account_number <span class="keyword">and</span></span><br><span class="line">           S.customer_name <span class="operator">=</span> T.customer_name ));</span><br></pre></td></tr></table></figure>
<p>注意到：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>−</mo><mi>Y</mi><mo>=</mo><mi mathvariant="normal">∅</mi><mtext> </mtext><mo>⇔</mo><mtext> </mtext><mi>X</mi><mo>⊆</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X-Y=\empty \ \Leftrightarrow \ X \sube Y 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">∅</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mrel">⇔</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span></span></p>
</div>
<h3 id="重复元组存在性测试"><a class="markdownIt-Anchor" href="#重复元组存在性测试"></a> 重复元组存在性测试</h3>
<p>UNIQUE  测试一个集合中是否存在重复元组。</p>
<h2 id="视图"><a class="markdownIt-Anchor" href="#视图"></a> 视图</h2>
<p><strong>视图</strong>：虚拟的表、<strong>不存储数据</strong>（而是基于原始表中的数据），隐藏部分数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="keyword">view</span><span class="operator">-</span>name <span class="keyword">AS</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>存储：不存储数据，只存储定义（在数据字典中），可以来源于一张或多张表。</p>
<h3 id="视图的更新"><a class="markdownIt-Anchor" href="#视图的更新"></a> 视图的更新</h3>
<ul>
<li>当使用 INSERT、UPDATE、DELETE 来对视图数据进行更新时，将会转换为<strong>基表</strong>的更新动作。</li>
<li>一些复杂的视图（如视图中某些列为聚集结果）。由于操作无法转换到基表，故更删改无法成功。</li>
</ul>
<h3 id="衍生关系"><a class="markdownIt-Anchor" href="#衍生关系"></a> 衍生关系</h3>
<p>在<strong>查询的结果</strong>上进行查询，相当于构造一个临时的视图并进行查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span><span class="operator">-</span><span class="keyword">from</span><span class="operator">-</span><span class="keyword">where</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">AS</span> name (attributes...)</span><br></pre></td></tr></table></figure>
<h3 id="with-子句"><a class="markdownIt-Anchor" href="#with-子句"></a> with 子句</h3>
<blockquote>
<p>使用 <code>CREATE VIEW</code> 创建的视图是<strong>永久性的</strong>。</p>
</blockquote>
<p>使用 with 子句可以创建一个<strong>临时的视图</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> name (attributes...) <span class="keyword">AS</span></span><br><span class="line">...  <span class="comment">-- 其他操作</span></span><br></pre></td></tr></table></figure>
<h2 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务</h2>
<p><strong>事务</strong>：数据库应用中完成<strong>单一逻辑功能</strong>的操作集合。由查询/更新语句的序列构成。</p>
<blockquote>
<p>一条 SQL 语句执行，隐式地开始一个事务。</p>
</blockquote>
<ul>
<li>COMMIT WORK  提交当前事务 -&gt; 持久保存</li>
<li>ROLLBACK WORK  回滚当前事务 -&gt; 撤销</li>
</ul>
<p>构成单一事务：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">ATOMIC</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
<h2 id="完整性约束"><a class="markdownIt-Anchor" href="#完整性约束"></a> 完整性约束</h2>
<p>作用：<strong>保证数据的正确性和统一性</strong>。</p>
<h3 id="实体完整性"><a class="markdownIt-Anchor" href="#实体完整性"></a> 实体完整性</h3>
<ul>
<li>NOT NULL  不允许为空值</li>
<li>UNIQUE  取值唯一</li>
<li>CHECK(P)  满足 P 条件</li>
</ul>
<h3 id="参照完整性"><a class="markdownIt-Anchor" href="#参照完整性"></a> 参照完整性</h3>
<p><strong>参照完整性</strong>：一个关系中给定属性集的取值也在另一关系的特定属性集的取值中出现。</p>
<ul>
<li>主键约束：PRIMARY KEY 属性</li>
<li>外键约束：FOREIGN KEY 属性 REFERENCES 对应关系</li>
</ul>
<div class="note success flat"><p><strong>当参照表数据变化时</strong></p>
<p><strong>级联</strong>：</p>
<ul>
<li>修改：FOREIGN KEY 属性 REFERENCES 对应关系 <text style="color: orange; font-weight: bold">ON UPDATE <u>CASCADE</u></text></li>
<li>删除：FOREIGN KEY 属性 REFERENCES 对应关系 <text style="color: orange; font-weight: bold">ON DELETE <u>CASCADE</u></text></li>
</ul>
<p><strong>置空/默认值</strong> (以删除为例)：</p>
<ul>
<li>置空：FOREIGN KEY 属性 REFERENCES 对应关系 <text style="color: orange; font-weight: bold">ON DELETE <u>SET NULL</u></text></li>
<li>使用默认值：FOREIGN KEY 属性 REFERENCES 对应关系 <text style="color: orange; font-weight: bold">ON DELETE <u>SET DEFAULT</u></text></li>
</ul>
</div>
<h3 id="断言"><a class="markdownIt-Anchor" href="#断言"></a> 断言</h3>
<blockquote>
<p>相关数据变化时都会检查，影响性能。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ASSERTION name </span><br><span class="line"><span class="keyword">CHECK</span> p;</span><br></pre></td></tr></table></figure>
<h2 id="授权"><a class="markdownIt-Anchor" href="#授权"></a> 授权</h2>
<h3 id="授权-2"><a class="markdownIt-Anchor" href="#授权-2"></a> 授权</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="operator">&lt;</span>权限列表<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>关系<span class="operator">/</span>视图<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">TO</span> <span class="operator">&lt;</span>用户<span class="operator">/</span>角色列表<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="收回"><a class="markdownIt-Anchor" href="#收回"></a> 收回</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="operator">&lt;</span>权限列表<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>关系<span class="operator">/</span>视图<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>用户<span class="operator">/</span>角色列表<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<p>默认级联收回（关键字 <strong>CASCADE</strong>，可省略），可以申明 <strong>RESTRICT</strong> 防止级联收回（存在级联收回权限会返回错误）。</p>
<h3 id="权限的转移"><a class="markdownIt-Anchor" href="#权限的转移"></a> 权限的转移</h3>
<p>SQL 默认不允许被授予权限的用户/角色将权限授予他人，如果需要，在相应的 GRANT 命令后添加：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure>
<h3 id="权限列表"><a class="markdownIt-Anchor" href="#权限列表"></a> 权限列表</h3>
<ul>
<li>对数据的授权（可后接属性名）
<ul>
<li>SELECT</li>
<li>UPDATE</li>
<li>INSERT</li>
<li>DELETE</li>
</ul>
</li>
<li>对模式的授权：创建、修改、删除</li>
</ul>
<h2 id="嵌入式-sql"><a class="markdownIt-Anchor" href="#嵌入式-sql"></a> 嵌入式 SQL</h2>
<ul>
<li>将 SQL 嵌入到高级程序语言（称为宿主语言）中。</li>
<li><strong>预处理</strong> 主语言 + SQL =&gt; 主语言 + 函数调用</li>
</ul>
<h2 id="odbc-jdbc"><a class="markdownIt-Anchor" href="#odbc-jdbc"></a> ODBC JDBC</h2>
<ul>
<li>ODBC（开放数据库互联）：定义一组 API ，使应用程序可以使用相同的 ODBC API 来访问数据库。</li>
<li>JDBC：Java 数据库连接</li>
</ul>
]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 恢复技术</title>
    <url>/2021/07/03/db-recovery/</url>
    <content><![CDATA[<div class="note success flat"><p><strong>本节内容</strong></p>
<p>数据库的恢复技术</p>
</div>
<h3 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务</h3>
<p><strong>事务</strong>：访问并可能更新各种数据项的一个程序执行单元。</p>
<p>事务的<strong>ACID特性</strong>：</p>
<ul>
<li>原子性（Atomicity）</li>
<li>一致性（Consistency）</li>
<li>隔离性（Isolation）</li>
<li>持续性（Durability ）</li>
</ul>
<h3 id="数据库的故障"><a class="markdownIt-Anchor" href="#数据库的故障"></a> 数据库的故障</h3>
<p>数据库<strong>恢复</strong>：把数据库从错误状态恢复到某一已知的正确状态。</p>
<h4 id="事务故障"><a class="markdownIt-Anchor" href="#事务故障"></a> 事务故障</h4>
<p>事务在<strong>运行至正常终止点前被终止</strong>。分为预期、非预期。</p>
<p><strong>恢复</strong>：<strong>撤销事务</strong>（UNDO）</p>
<h4 id="系统故障"><a class="markdownIt-Anchor" href="#系统故障"></a> 系统故障</h4>
<p>称为软故障，是指造成<strong>系统停止运转</strong>的任何事件，使得系统要重新启动。</p>
<ul>
<li>整个系统的正常运行突然被破坏</li>
<li>所有正在运行的事务都非正常终止</li>
<li>不破坏数据库</li>
<li>内存中数据库缓冲区的信息全部丢失</li>
</ul>
<p>常见原因：系统断电、硬件错误</p>
<p><strong>恢复</strong>：</p>
<ul>
<li>事务<strong>未提交</strong>：强行<strong>撤销</strong>（UNDO）所有<strong>未完成的事务</strong></li>
<li>事务<strong>已提交</strong>，但缓冲区中的信息尚未完全写回到磁盘上：<strong>重做</strong>（REDO）所有<strong>已提交的事务</strong></li>
</ul>
<h4 id="介质故障"><a class="markdownIt-Anchor" href="#介质故障"></a> 介质故障</h4>
<p>称为硬故障，指<strong>外存故障</strong>。</p>
<p><strong>恢复</strong>：<strong>装入</strong>故障前的某时刻的数据<strong>副本</strong>，<strong>重做</strong>此时刻到当前所有成功的事务，将这些事务已提交的结果重新记入数据库。</p>
<blockquote>
<p>各类故障对数据库的影响：数据库本身被破坏；或数据库没有被破坏，但数据可能不正确。</p>
</blockquote>
<h3 id="数据库恢复的实现技术"><a class="markdownIt-Anchor" href="#数据库恢复的实现技术"></a> 数据库恢复的实现技术</h3>
<p>基本原理：<strong>冗余</strong></p>
<ul>
<li><strong>数据转储</strong>（备份，backup）</li>
<li>登记<strong>日志</strong>文件（logging）</li>
</ul>
<h4 id="数据转储备份"><a class="markdownIt-Anchor" href="#数据转储备份"></a> 数据转储（备份）</h4>
<p>转储（<strong>备份</strong>）：DBA将整个数据库复制到磁带或另一个磁盘上保存起来的过程。</p>
<ul>
<li><strong>静态转储</strong>：系统<strong>无运行事务时</strong>进行的转储操作。转储开始时数据库处于一致性状态，转储期间不允许数据库的存取、修改。</li>
<li><strong>动态转储</strong>：允许与用户事务<strong>并发</strong>进行。优点是不需等待正在运行的用户事务结束，不影响新事务的运行；缺点是不能保证一致性。需要将动态转储期间的<strong>活动记录</strong>记录下来，建立日志文件。</li>
<li><strong>海量转储</strong>（全量备份）：每次转储<strong>全部</strong>数据库。</li>
<li><strong>增量转储</strong>：只转储上次转储后<strong>更新的</strong>数据。</li>
</ul>
<h4 id="登记日志文件"><a class="markdownIt-Anchor" href="#登记日志文件"></a> 登记日志文件</h4>
<p><strong>日志文件</strong>：记录事务对数据库的<strong>更新</strong>操作的文件。</p>
<p><strong>格式</strong>：以<strong>记录</strong>为单位的日志文件日志；以<strong>数据块</strong>为单位的日志文件。</p>
<p>以记录为单位的日志文件内容：</p>
<ul>
<li>各个事务的开始标志 BEGIN TRANSACTION</li>
<li>各个事务的结束标记 COMMIT 或 ROLLBACK</li>
<li>各个日志的所有更新操作</li>
</ul>
<p>以记录为单位的日志文件，每条<strong>日志记录</strong>内容包括：</p>
<ul>
<li><strong>事务标识</strong></li>
<li>操作<strong>类型</strong>（更、删、改）</li>
<li><strong>操作对象</strong>（记录内部标识）</li>
<li>更新前的数据的<strong>旧值</strong>（插入时为空值）</li>
<li>更新后的数据的<strong>新值</strong>（删除时为空值）</li>
</ul>
<p>日志记录<strong>基本原则</strong>：</p>
<ul>
<li>登记次序严格按照<strong>事务执行时间次序</strong></li>
<li>先写<strong>日志</strong>，再写<strong>数据库</strong>（原因：两个操作是不同的操作，且之间可能会发生故障）</li>
</ul>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703093137495.png" alt="image-20210703093137495" /></p>
<p>上图中：</p>
<ul>
<li>系统在Ta时刻停止运行事务，进行数据库转储</li>
<li>在Tb时刻转储完毕，得到Tb时刻的数据库一致性副本</li>
<li>系统运行到<em>T</em>f时刻发生故障</li>
<li>为恢复数据库，首先由DBA重装数据库后备副本，将数据库恢复至Tb时刻的状态</li>
<li>重新运行自Tb～Tf时刻的所有更新事务，把数据库恢复到故障发生前的一致状态</li>
</ul>
<h3 id="数据库恢复的步骤"><a class="markdownIt-Anchor" href="#数据库恢复的步骤"></a> 数据库恢复的步骤</h3>
<p>1 <strong>进行事务故障恢复</strong></p>
<p><strong>方法</strong>：<strong>撤销</strong>（UNDO）事务对数据库的修改。</p>
<p><strong>时机</strong>：由系统自动完成，对用户透明，无需用户干预。</p>
<p><strong>流程</strong>：<strong>反向</strong>扫描日志文件，查找事务的更新操作，对更新操作执行<strong>逆操作</strong>，直至回到事务开始的状态。</p>
<p>2 <strong>进行系统故障恢复</strong></p>
<p>原因：未完成的事务对数据库的更新<strong>已经写入数据库</strong>（缓冲区满）；已提交的事务对数据库更新<strong>还留在缓冲区</strong>，没来的及写入数据库。</p>
<p><strong>方法</strong>：<strong>UNDO</strong>——故障发生时<strong>没完成的</strong>事务，<strong>REDO</strong>——<strong>已完成的</strong>事务（不论是否写入）。</p>
<p><strong>时机</strong>：在系统重启时自动完成，不需用户干预。</p>
<p><strong>流程</strong>：<strong>正向</strong>扫描日志文件，建立<strong>UNDO</strong>队列（故障发生时没完成的事务）和<strong>REDO</strong>队列（已完成的事务），UNDO队列事务<strong>反向</strong>扫描log，执行<strong>逆操作</strong>，REDO队列事务<strong>正向</strong>扫描log，<strong>重新执行</strong>操作。</p>
<p>3 <strong>协助后备副本进行介质故障恢复</strong></p>
<p><strong>方法</strong>：装入备份文件，装入日志文件副本。</p>
<p>时机：需要DBA的介入。</p>
<p><strong>流程</strong>：<strong>装入</strong>最新的后备数据库<strong>副本</strong>，使数据库恢复到最近一次的备份；装载转储结束时的<strong>日志</strong>文件，重做已完成的事务。</p>
<h3 id="具有检查点的恢复技术"><a class="markdownIt-Anchor" href="#具有检查点的恢复技术"></a> 具有检查点的恢复技术</h3>
<p>目的：减少<strong>搜索整个日志文件</strong>的代价</p>
<h4 id="检查点技术"><a class="markdownIt-Anchor" href="#检查点技术"></a> 检查点技术</h4>
<p><strong>检查点记录的内容</strong>：</p>
<ol>
<li>建立检查点的时刻所有<strong>正在执行的事务清单</strong></li>
<li>这些<strong>事务</strong>最近一个<strong>日志记录的地址</strong></li>
</ol>
<p>“<strong>重新开始文件</strong>”：§记录各个<strong>检查点记录</strong>在<strong>日志文件中的地址</strong></p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703094036279.png" alt="image-20210703094036279" /></p>
<p><strong>动态维护日志文件</strong>的方法：周期性地建立<strong>检查点</strong>、<strong>保存数据库状态</strong>。<br />
当前<strong>日志缓冲区</strong>写磁盘，新建<strong>检查点记录</strong>，<strong>数据缓冲区</strong>写磁盘，检查点记录在日志文件中的地址写入<strong>重新开始文件</strong>。</p>
<p><strong>改善效率</strong>：若事务在<strong>检查点前</strong>提交，其修改一定会写入数据库。恢复处理时不需要处理该事务。</p>
<p>系统出现故障时，恢复子系统将根据事务的不同状态采取不同的恢复策略：</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703094312234.png" alt="image-20210703094312234" /></p>
<h4 id="恢复策略"><a class="markdownIt-Anchor" href="#恢复策略"></a> 恢复策略</h4>
<p>UNDO队列和REDO队列</p>
<p>新开始的UNDO，已提交的REDO</p>
<h3 id="数据库镜像"><a class="markdownIt-Anchor" href="#数据库镜像"></a> 数据库镜像</h3>
<p>DBMS自动把整个数据库或其中的关键数据复制到另一个磁盘上，提高数据库的可用性。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703094411709.png" alt="image-20210703094411709" /></p>
<p>出现介质故障时，可由镜像磁盘继续提供使用。同时DBMS自动利用镜像磁盘数据进行数据库的恢复，不需要关闭系统和重装数据库副本。</p>
<p><img src="https://repo.live.holgerbest.top/img/image-20210703094456193.png" alt="image-20210703094456193" /></p>
]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概念 - 关系数据库理论</title>
    <url>/2021/07/03/db-relation/</url>
    <content><![CDATA[<div class="note success flat"><p><strong>本节内容</strong></p>
<ul>
<li>关系模式</li>
<li>函数依赖</li>
<li>范式</li>
<li>逻辑蕴含与armstrong公理</li>
<li>属性集闭包</li>
<li>函数依赖的最小覆盖</li>
<li>无损连接分解与保持函数依赖的分解</li>
</ul>
</div>
<h3 id="关系模式"><a class="markdownIt-Anchor" href="#关系模式"></a> 关系模式</h3>
<p><strong>关系模式</strong>：关系模式是一个五元组 R（U，D，DOM，F），简记为 R&lt;U, F&gt;。</p>
<ul>
<li>R：关系名</li>
<li>U：组成该关系的属性名集合</li>
<li>D：属性组U中属性所来自的域</li>
<li>DOM：属性到域的映射</li>
<li>F：属性间的<strong>依赖集合</strong>。它限定了组成关系的各个元组必须满足的<strong>完整性约束条件</strong>。</li>
</ul>
<p>当且仅当U上的一个关系r满足F，r称为关系模式R&lt;U, F&gt;的一个<strong>关系</strong>。</p>
<p><strong>关系模式的设计问题</strong>：</p>
<ol>
<li><strong>信息的不可表示问题</strong>：插入异常、删除异常</li>
<li><strong>信息的冗余问题</strong>：数据冗余、更新异常</li>
</ol>
<h3 id="函数依赖"><a class="markdownIt-Anchor" href="#函数依赖"></a> 函数依赖 ★</h3>
<p>设R(U)是属性集U上的关系模式，X , Y 为 U 的子集，r是R(U)上的任意一个关系，如果总有：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>t</mi><mo separator="true">,</mo><mi>s</mi><mo>∈</mo><mi>r</mi><mo separator="true">,</mo><mtext> </mtext><mi>t</mi><mo stretchy="false">[</mo><mi>X</mi><mo stretchy="false">]</mo><mo>=</mo><mi>s</mi><mo stretchy="false">[</mo><mi>X</mi><mo stretchy="false">]</mo><mo>⇒</mo><mtext> </mtext><mi>t</mi><mo stretchy="false">[</mo><mi>Y</mi><mo stretchy="false">]</mo><mo>=</mo><mi>s</mi><mo stretchy="false">[</mo><mi>Y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\forall \ t,s \in r, \ t[X] = s[X] \Rightarrow \ t[Y] = s[Y]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mclose">]</span></span></span></span></span></p>
<p>那么称“X<strong>函数决定</strong>Y”，或“Y<strong>函数依赖于</strong>X”，记作</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span></span></p>
<div class="note success flat"><p><strong>说明</strong></p>
<ul>
<li>任意两元组，若在X属性上取值相同，则Y属性上取值也一定相同。</li>
<li>不存在两个X属性值相同但Y属性值不同的两个元组。</li>
</ul>
</div>
<h4 id="平凡函数依赖"><a class="markdownIt-Anchor" href="#平凡函数依赖"></a> 平凡函数依赖</h4>
<p>在R(U)中，若</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi><mo separator="true">,</mo><mi>Y</mi><mo>⊆</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y,  Y \subseteq X
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span></span></p>
<p>则称Y<strong>平凡函数依赖</strong>于X</p>
<h4 id="部分函数依赖"><a class="markdownIt-Anchor" href="#部分函数依赖"></a> 部分函数依赖</h4>
<p>在R(U)中，若</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi><mo separator="true">,</mo><mtext> </mtext><mi mathvariant="normal">∀</mi><msup><mi>X</mi><mo mathvariant="normal">′</mo></msup><mo>⊆</mo><mi>X</mi><mtext> </mtext><mo stretchy="false">(</mo><msup><mi>X</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">≠</mi><mi>X</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><msup><mi>X</mi><mo mathvariant="normal">′</mo></msup><mo>↛</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y, \ \forall X&#x27; \subseteq X \ (X&#x27; \neq X), \ X&#x27; \nrightarrow Y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord">∀</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">↛</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span></span></p>
<p>则称Y<strong>完全函数依赖</strong>于X，记为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mover><mo><mo>⟶</mo></mo><mi>f</mi></mover><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \stackrel{f}{\longrightarrow} Y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3552159999999998em;vertical-align:-0.011em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3442159999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.758108em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span></span></p>
<p>否则称Y<strong>部分函数依赖</strong>于X，记为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mover><mo><mo>⟶</mo></mo><mi>p</mi></mover><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \stackrel{p}{\longrightarrow} Y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1704999999999999em;vertical-align:-0.011em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1595em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.758108em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span></span></p>
<h4 id="传递函数依赖"><a class="markdownIt-Anchor" href="#传递函数依赖"></a> 传递函数依赖</h4>
<p>在R(U)中，若</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi><mo separator="true">,</mo><mi>Y</mi><mo>→</mo><mi>Z</mi><mo separator="true">,</mo><mi>Y</mi><mo>↛</mo><mi>X</mi><mo separator="true">,</mo><mi>Z</mi><mo>⊄</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \rightarrow Y, Y \rightarrow Z, Y \nrightarrow X, Z \not\sub Y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">↛</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span></span></p>
<p>则称Z<strong>传递函数依赖</strong>于X</p>
<h3 id="码"><a class="markdownIt-Anchor" href="#码"></a> 码</h3>
<ul><li><strong><span>候选码</span></strong><span>：K为 R&lt;U, F&gt; 的属性组，若 </span><span class="MathJax_SVG" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="8.941ex" height="3.628ex" viewBox="0 -1459.5 3849.6 1562" role="img" focusable="false" style="vertical-align: -0.238ex;"><defs><path stroke-width="0" id="E1-MJMATHI-4B" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path><path stroke-width="0" id="E1-MJMAIN-27F6" d="M84 237T84 250T98 270H1444Q1328 357 1301 493Q1301 494 1301 496T1300 499Q1300 511 1317 511H1320Q1329 511 1332 510T1338 506T1341 497T1344 481T1352 456Q1374 389 1425 336T1544 261Q1553 258 1553 250Q1553 244 1548 241T1524 231T1486 212Q1445 186 1415 152T1370 85T1349 35T1341 4Q1339 -6 1336 -8T1320 -11Q1300 -11 1300 0Q1300 7 1305 25Q1337 151 1444 230H98Q84 237 84 250Z"></path><path stroke-width="0" id="E1-MJMATHI-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path stroke-width="0" id="E1-MJMATHI-55" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E1-MJMATHI-4B" x="0" y="0"></use><g transform="translate(1166,0)"><use xlink:href="#E1-MJMAIN-27F6" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E1-MJMATHI-66" x="883" y="1084"></use></g><use xlink:href="#E1-MJMATHI-55" x="3082" y="0"></use></g></svg></span><script type="math/tex"> K \stackrel{f}{\longrightarrow} U </script><span>，则称K为R的</span><strong><span>候选码</span></strong></li><li><strong><span>超码</span></strong><span>：K为 R&lt;U, F&gt; 的候选码，X为 R&lt;U, F&gt; 的属性组，若 </span><span class="MathJax_SVG" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="7.141ex" height="1.994ex" viewBox="0 -755.9 3074.6 858.4" role="img" focusable="false" style="vertical-align: -0.238ex;"><defs><path stroke-width="0" id="E2-MJMATHI-4B" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path><path stroke-width="0" id="E2-MJMAIN-2282" d="M84 250Q84 372 166 450T360 539Q361 539 370 539T395 539T430 540T475 540T524 540H679Q694 532 694 520Q694 511 681 501L522 500H470H441Q366 500 338 496T266 472Q244 461 224 446T179 404T139 337T124 250V245Q124 157 185 89Q244 25 328 7Q348 2 366 2T522 0H681Q694 -10 694 -20Q694 -32 679 -40H526Q510 -40 480 -40T434 -41Q350 -41 289 -25T172 45Q84 127 84 250Z"></path><path stroke-width="0" id="E2-MJMATHI-58" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E2-MJMATHI-4B" x="0" y="0"></use><use xlink:href="#E2-MJMAIN-2282" x="1166" y="0"></use><use xlink:href="#E2-MJMATHI-58" x="2222" y="0"></use></g></svg></span><script type="math/tex"> K \sub X </script><span>，则称X为R的</span><strong><span>超码</span></strong></li><li><strong><span>主码</span></strong><span>：选定的候选码</span></li><li><strong><span>主属性</span></strong><span>：包含在每一个</span><strong><span>候选码</span></strong><span>中的</span><strong><span>属性</span></strong></li><li><strong><span>全码</span></strong><span>：整个属性组U</span></li></ul>
<h3 id="范式"><a class="markdownIt-Anchor" href="#范式"></a> 范式 ★</h3>
<p><strong>1NF</strong>：关系中每一<strong>分量不可再分</strong></p>
<div class="note warning flat"><p><strong>不良特性</strong></p>
<p>有关系模式 S(<u>S#</u> , SN , SD , DEAN , <u>C#</u> , G)</p>
<ul>
<li><strong>插入异常</strong>：如果学生没有选课，关于他的个人信息及所在系的信息就无法插入</li>
<li><strong>删除异常</strong>：如果删除学生的选课信息，则有关他的个人信息及所在系的信息也随之删除了</li>
<li><strong>更新异常</strong>：如果学生转系，若他选修了k门课，则需要修改k次</li>
<li><strong>数据冗余</strong>：如果一个学生选修了k门课，则有关他的所在系的信息重复</li>
</ul>
</div>
<p><strong>2NF</strong>：R属于1NF，且每个<strong>非主属性完全依赖于码</strong></p>
<blockquote>
<p>2NF消除了非主属性对码的<strong>部分依赖</strong>。</p>
</blockquote>
<p><strong>单主属性不存在部分函数依赖</strong>，即一个属性组成的属性集X，若Y依赖于X，则一定为<strong>完全函数依赖</strong>。</p>
<div class="note warning flat"><p><strong>不良特性</strong></p>
<p>有关系模式 S_SD(<u>S#</u> , SN , SD , DEAN)</p>
<ul>
<li>插入异常：若系中没有学生，则与系有关的信息就无法插入</li>
<li>删除异常：如果学生全部毕业了，则在删除学生信息的同时与系有关的信息也随之删除了</li>
<li>更新异常：如果学生转系，不但要修改SD，还要修改DEAN，如果换系主任，则该系每个学生元组都要做相应修改</li>
<li>数据冗余：每个学生都存储了所在系的系主任的信息</li>
</ul>
</div>
<p><strong>3NF</strong>：在满足2NF的条件下<strong>消除非主属性对码的传递函数依赖</strong>。</p>
<div class="note warning flat"><p><strong>不良特性</strong></p>
<p>STC(S# , T# , C#)，T# -&gt; C#，每位老师只教授一门课;<br />
（S#，C#）-&gt; T#， 某学生选定一门课，就对应一位老师;<br />
（S#，T#）-&gt; C#;<br />
（S#，T#），（S#，C#）为候选码。</p>
<ul>
<li><strong>插入异常</strong>：如果没有学生选修某位老师的任课，则该老师担任课程的信息就无法插入</li>
<li><strong>删除异常</strong>：删除学生选课信息，会删除掉老师的任课信息</li>
<li><strong>更新异常</strong>：如果老师所教授的课程有所改动，则所有选修该老师课程的学生元组都要做改动</li>
<li><strong>数据冗余</strong>：每位学生都存储了有关老师所教授的课程的信息</li>
</ul>
</div>
<p><strong>BCNF</strong>：关系模式R&lt;U, F&gt;中，对于属性组X、Y，当</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi><mo separator="true">,</mo><mtext> </mtext><mi>Y</mi><mo>⊄</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">X \to Y, \ Y \not\sub X
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span></span></p>
<p>时（即存在X到Y的非平凡函数依赖），X <strong>必含有码</strong>（即X是<strong>超码</strong>）。</p>
<blockquote>
<p>属于<strong>BCNF</strong>的关系一定属于<strong>3NF</strong>，反之不一定成立；若R属于<strong>3NF</strong>，且R<strong>只有一个候选码</strong>，则R属于<strong>BCNF</strong>。</p>
</blockquote>
<h3 id="armstrong-公理系统"><a class="markdownIt-Anchor" href="#armstrong-公理系统"></a> Armstrong 公理系统</h3>
<h4 id="逻辑蕴含"><a class="markdownIt-Anchor" href="#逻辑蕴含"></a> 逻辑蕴含</h4>
<p>关系模式R，F是其函数依赖，X，Y是其属性子集，如果从F的<strong>函数依赖</strong>能够推出X -&gt; Y，则称F<strong>逻辑蕴涵</strong>X -&gt; Y，记作F├ X -&gt; Y 。</p>
<p><strong>F的闭包</strong>：被F所<strong>逻辑蕴涵</strong>的<strong>函数依赖的全体</strong>所构成的集合称作F的闭包，记作F<sup>+</sup> = {X -&gt; Y | F├ X -&gt; Y}</p>
<h4 id="armstrong-公理"><a class="markdownIt-Anchor" href="#armstrong-公理"></a> Armstrong 公理</h4>
<p>若X，Y，Z是属性集，则下列规则成立：</p>
<p><strong>自反律</strong>(reflexivity)：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi><mo>⊆</mo><mi>X</mi><mo>⇒</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y \sube X \Rightarrow X \to Y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span></span></p>
<p><strong>增广律</strong>(augmentation)：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi><mo>⇒</mo><mi>X</mi><mi>Z</mi><mo>→</mo><mi>Y</mi><mi>Z</mi></mrow><annotation encoding="application/x-tex">X \to Y \Rightarrow XZ \to YZ
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span></span></p>
<p><strong>传递律</strong>(transitivity)：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi><mo separator="true">,</mo><mtext> </mtext><mi>Y</mi><mo>→</mo><mi>Z</mi><mo>⇒</mo><mi>X</mi><mo>→</mo><mi>Z</mi></mrow><annotation encoding="application/x-tex">X \to Y, \ Y \to Z \Rightarrow X \to Z
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span></span></p>
<p>推理规则：</p>
<p><strong>合并律</strong>：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi><mo separator="true">,</mo><mtext> </mtext><mi>Y</mi><mo>→</mo><mi>Z</mi><mo>⇒</mo><mi>X</mi><mo>→</mo><mi>Y</mi><mi>Z</mi></mrow><annotation encoding="application/x-tex">X \to Y, \ Y \to Z \Rightarrow X \to YZ
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span></span></p>
<p><strong>分解律</strong>：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi><mi>Z</mi><mo>⇒</mo><mi>X</mi><mo>→</mo><mi>Y</mi><mo separator="true">,</mo><mtext> </mtext><mi>Y</mi><mo>→</mo><mi>Z</mi></mrow><annotation encoding="application/x-tex">X \to YZ \Rightarrow X \to Y, \ Y \to Z
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span></span></p>
<p><strong>伪传递律</strong>：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi><mo separator="true">,</mo><mtext> </mtext><mi>W</mi><mi>Y</mi><mo>→</mo><mi>Z</mi><mo>⇒</mo><mi>W</mi><mi>X</mi><mo>→</mo><mi>Z</mi></mrow><annotation encoding="application/x-tex">X \to Y, \ WY \to Z \Rightarrow WX \to Z
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span></span></p>
<p><strong>引理一</strong>：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>2</mn></msub><mo>⋯</mo><msub><mi>A</mi><mi>k</mi></msub><mo>⇒</mo><mi>X</mi><mo>→</mo><msub><mi>A</mi><mi>i</mi></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X \to A_1A_2\cdots A_k  \Rightarrow X\to A_i \ (i=1, 2,\cdots ,k)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></span></p>
<p><strong>属性集的闭包</strong>★：X<sub>F</sub><sup>+</sup> 为属性集X关于F函数依赖集的闭包</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>X</mi><mi>F</mi><mo>+</mo></msubsup><mo>=</mo><mo stretchy="false">{</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo>→</mo><mi>A</mi><mtext> </mtext><mi mathvariant="normal">能</mi><mi mathvariant="normal">由</mi><mi>A</mi><mi>r</mi><mi>m</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">公</mi><mi mathvariant="normal">理</mi><mi mathvariant="normal">导</mi><mi mathvariant="normal">出</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">X^+_F = \{ A | X \to A \ 能由 Armstrong 公理导出 \}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104993em;vertical-align:-0.28366199999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.416338em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.28366199999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mspace"> </span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">由</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">导</span><span class="mord cjk_fallback">出</span><span class="mclose">}</span></span></span></span></span></p>
<p>计算属性集的闭包：<br />
<img src="https://repo.live.holgerbest.top/img/image-20210703182809986.png" alt="image-20210703182809986" /></p>
<p><strong>引理二</strong>★：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>A</mi><mtext> </mtext><mi mathvariant="normal">能</mi><mi mathvariant="normal">由</mi><mi>A</mi><mi>r</mi><mi>m</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">公</mi><mi mathvariant="normal">理</mi><mi mathvariant="normal">导</mi><mi mathvariant="normal">出</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>A</mi><mo>⊆</mo><msubsup><mi>X</mi><mi>F</mi><mo>+</mo></msubsup></mrow><annotation encoding="application/x-tex">X \to A \ 能由 Armstrong 公理导出  \iff  A \sube X_F^+
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mspace"> </span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">由</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">导</span><span class="mord cjk_fallback">出</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104993em;vertical-align:-0.28366199999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.416338em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.28366199999999997em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p><strong>用途</strong>：</p>
<ul>
<li>判断X是否为<strong>超码/候选码</strong>：X-&gt;U是否成立（超码），X的真子集是否决定U（候选码）</li>
<li>★ 判断 F是否<strong>逻辑蕴涵</strong> X-&gt;Y ：即判断 Y 是否包含于 X<sub>F</sub><sup>+</sup></li>
</ul>
<h3 id="函数依赖的等价与最小覆盖"><a class="markdownIt-Anchor" href="#函数依赖的等价与最小覆盖"></a> 函数依赖的等价与最小覆盖 ▲</h3>
<p><strong>等价性</strong>：函数依赖集F，G，若F<sup>+</sup>=G<sup>+</sup>，则称F和G等价。</p>
<p><span class="MathJax_SVG" id="MathJax-Element-3-Frame" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="35.653ex" height="2.565ex" viewBox="0 -892.8 15350.4 1104.4" role="img" focusable="false" style="vertical-align: -0.491ex; max-width: 100%;"><defs><path stroke-width="0" id="E6-MJMATHI-46" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path stroke-width="0" id="E6-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path stroke-width="0" id="E6-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path stroke-width="0" id="E6-MJMATHI-47" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path><path stroke-width="0" id="E6-MJMAIN-27FA" d="M1438 514Q1438 525 1454 525Q1459 525 1462 525T1467 525T1471 524T1473 523T1475 520T1477 517T1480 512Q1517 438 1578 381T1689 300T1785 263Q1802 258 1802 250T1793 239T1756 228T1698 204Q1554 134 1480 -12Q1476 -21 1473 -22T1458 -24Q1438 -24 1438 -17Q1438 -13 1443 0Q1478 69 1529 123L1539 133H318L328 123Q379 69 414 0Q419 -13 419 -17Q419 -24 399 -24Q388 -24 385 -23T377 -12Q332 77 253 144T72 237Q62 240 59 242T56 250T59 257T70 262T89 268T119 278T160 296Q303 366 377 512Q382 522 385 523T401 525Q419 524 419 515Q419 510 414 500Q379 431 328 377L318 367H1539L1529 377Q1496 412 1467 458T1438 514ZM274 173H1583L1593 181Q1632 211 1710 250Q1709 251 1692 259T1647 283T1593 319L1583 327H930L927 328L602 327H274L264 319Q225 289 147 250Q148 249 165 241T210 217T264 181L274 173Z"></path><path stroke-width="0" id="E6-MJMAIN-2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"></path><path stroke-width="0" id="E6-MJMAIN-2227" d="M318 591Q325 598 333 598Q344 598 348 591Q349 590 414 445T545 151T611 -4Q609 -22 591 -22Q588 -22 586 -21T581 -20T577 -17T575 -13T572 -9T570 -4L333 528L96 -4Q87 -20 80 -21Q78 -22 75 -22Q57 -22 55 -4Q55 2 120 150T251 444T318 591Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E6-MJMATHI-46" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E6-MJMAIN-2B" x="1104" y="583"></use><use xlink:href="#E6-MJMAIN-3D" x="1708" y="0"></use><g transform="translate(2764,0)"><use xlink:href="#E6-MJMATHI-47" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E6-MJMAIN-2B" x="1111" y="583"></use></g><use xlink:href="#E6-MJMAIN-27FA" x="4756" y="0"></use><use xlink:href="#E6-MJMATHI-46" x="7169" y="0"></use><use xlink:href="#E6-MJMAIN-2286" x="8196" y="0"></use><g transform="translate(9252,0)"><use xlink:href="#E6-MJMATHI-47" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E6-MJMAIN-2B" x="1111" y="583"></use></g><use xlink:href="#E6-MJMAIN-2227" x="10910" y="0"></use><use xlink:href="#E6-MJMATHI-47" x="11799" y="0"></use><use xlink:href="#E6-MJMAIN-2286" x="12863" y="0"></use><g transform="translate(13919,0)"><use xlink:href="#E6-MJMATHI-46" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E6-MJMAIN-2B" x="1104" y="583"></use></g></g></svg></span></p>
<p><strong>最小覆盖</strong>Fmin：</p>
<ol>
<li>（右侧）单属性化</li>
<li>（左侧）既约化</li>
<li>无冗余化</li>
</ol>
<h3 id="模式分解"><a class="markdownIt-Anchor" href="#模式分解"></a> 模式分解</h3>
<p>关系<strong>模式</strong>R&lt;U , F&gt;的一个<strong>分解</strong>是指</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ρ</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>R</mi><mn>1</mn></msub><mo>&lt;</mo><msub><mi>U</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>F</mi><mn>1</mn></msub><mo>&gt;</mo><mo separator="true">,</mo><msub><mi>R</mi><mn>2</mn></msub><mo>&lt;</mo><msub><mi>U</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>F</mi><mn>2</mn></msub><mo>&gt;</mo><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>R</mi><mi>n</mi></msub><mo>&lt;</mo><msub><mi>U</mi><mi>n</mi></msub><mo separator="true">,</mo><msub><mi>F</mi><mi>n</mi></msub><mo>&gt;</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\rho = \{ R_1&lt;U_1, F_1&gt;, R_2&lt;U_2, F_2&gt;, \cdots, R_n&lt;U_n, F_n&gt; \}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ρ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span></span></span></span></span></p>
<p>其中：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mo>=</mo><munderover><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>U</mi><mi>i</mi></msub><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mi mathvariant="normal">没</mi><mi mathvariant="normal">有</mi><mtext> </mtext><msub><mi>U</mi><mi>i</mi></msub><mo>⊆</mo><msub><mi>U</mi><mi>j</mi></msub><mtext> </mtext><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>≤</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">U=\bigcup_{i=1}^n U_i \ , \ 没有 \ U_i \sube U_j \ (1 \leq i,j \leq n)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">⋃</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord cjk_fallback">没</span><span class="mord cjk_fallback">有</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p>
<p>F<sub>i</sub>是F在U<sub>i</sub>上的<strong>投影</strong></p>
<p><span class="MathJax_SVG" id="MathJax-Element-7-Frame" tabindex="-1" style="font-size: 100%; display: inline-block;"><svg xmlns:xlink="http://www.w3.org/1999/xlink" width="41.064ex" height="2.808ex" viewBox="0 -892.8 17680.1 1209.2" role="img" focusable="false" style="vertical-align: -0.735ex; max-width: 100%;"><defs><path stroke-width="0" id="E11-MJMATHI-46" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path stroke-width="0" id="E11-MJMATHI-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path stroke-width="0" id="E11-MJMAIN-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path stroke-width="0" id="E11-MJMAIN-7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path><path stroke-width="0" id="E11-MJMATHI-58" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path><path stroke-width="0" id="E11-MJMAIN-2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path><path stroke-width="0" id="E11-MJMATHI-59" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path><path stroke-width="0" id="E11-MJMAIN-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path stroke-width="0" id="E11-MJMAIN-2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path><path stroke-width="0" id="E11-MJMAIN-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path stroke-width="0" id="E11-MJMAIN-2227" d="M318 591Q325 598 333 598Q344 598 348 591Q349 590 414 445T545 151T611 -4Q609 -22 591 -22Q588 -22 586 -21T581 -20T577 -17T575 -13T572 -9T570 -4L333 528L96 -4Q87 -20 80 -21Q78 -22 75 -22Q57 -22 55 -4Q55 2 120 150T251 444T318 591Z"></path><path stroke-width="0" id="E11-MJMAIN-2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"></path><path stroke-width="0" id="E11-MJMATHI-55" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path><path stroke-width="0" id="E11-MJMAIN-7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><use xlink:href="#E11-MJMATHI-46" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E11-MJMATHI-69" x="909" y="-213"></use><use xlink:href="#E11-MJMAIN-3D" x="1264" y="0"></use><use xlink:href="#E11-MJMAIN-7B" x="2320" y="0"></use><use xlink:href="#E11-MJMATHI-58" x="2820" y="0"></use><use xlink:href="#E11-MJMAIN-2192" x="3950" y="0"></use><use xlink:href="#E11-MJMATHI-59" x="5228" y="0"></use><use xlink:href="#E11-MJMAIN-7C" x="5991" y="0"></use><use xlink:href="#E11-MJMATHI-58" x="6269" y="0"></use><use xlink:href="#E11-MJMAIN-2192" x="7398" y="0"></use><use xlink:href="#E11-MJMATHI-59" x="8676" y="0"></use><use xlink:href="#E11-MJMAIN-2208" x="9717" y="0"></use><g transform="translate(10662,0)"><use xlink:href="#E11-MJMATHI-46" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E11-MJMAIN-2B" x="1104" y="583"></use></g><use xlink:href="#E11-MJMAIN-2227" x="12315" y="0"></use><use xlink:href="#E11-MJMATHI-58" x="13204" y="0"></use><use xlink:href="#E11-MJMATHI-59" x="14056" y="0"></use><use xlink:href="#E11-MJMAIN-2286" x="15097" y="0"></use><g transform="translate(16153,0)"><use xlink:href="#E11-MJMATHI-55" x="0" y="0"></use><use transform="scale(0.707)" xlink:href="#E11-MJMATHI-69" x="965" y="-213"></use></g><use xlink:href="#E11-MJMAIN-7D" x="17180" y="0"></use></g></svg></span></p>
<p>分解的<strong>基本代数运算</strong>：投影，自然连接</p>
<p>分解的<strong>目标</strong>：无损连接分解，保持函数依赖，达到更高级范式</p>
<h4 id="无损连接分解"><a class="markdownIt-Anchor" href="#无损连接分解"></a> 无损连接分解</h4>
<p>无损连接分解的<strong>充要条件</strong>：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ρ</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>R</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>R</mi><mn>2</mn></msub><mo stretchy="false">}</mo><mtext> </mtext><mi mathvariant="normal">为</mi><mi mathvariant="normal">无</mi><mi mathvariant="normal">损</mi><mi mathvariant="normal">连</mi><mi mathvariant="normal">接</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">解</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><msub><mi>R</mi><mn>1</mn></msub><mo>∩</mo><mi>R</mi><mn>2</mn><mo>→</mo><msub><mi>R</mi><mn>1</mn></msub><mo>−</mo><msub><mi>R</mi><mn>2</mn></msub><mtext> </mtext><mi>o</mi><mi>r</mi><mtext> </mtext><msub><mi>R</mi><mn>2</mn></msub><mo>−</mo><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\rho = \{R_1, R_2\} \ 为无损连接分解 \iff R_1 \cap R2 \to R_1 - R_2 \ or \ R_2 - R_1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ρ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace"> </span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">无</span><span class="mord cjk_fallback">损</span><span class="mord cjk_fallback">连</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">解</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<h4 id="保持函数依赖的分解"><a class="markdownIt-Anchor" href="#保持函数依赖的分解"></a> 保持函数依赖的分解</h4>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ρ</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>R</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>R</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>R</mi><mi>n</mi></msub><mo stretchy="false">}</mo><mtext> </mtext><mi mathvariant="normal">为</mi><mi mathvariant="normal">保</mi><mi mathvariant="normal">持</mi><mi mathvariant="normal">函</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">依</mi><mi mathvariant="normal">赖</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">解</mi></mrow><annotation encoding="application/x-tex">\rho = \{R_1, R_2, \cdots , R_n\} \ 为保持函数依赖的分解
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ρ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace"> </span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">保</span><span class="mord cjk_fallback">持</span><span class="mord cjk_fallback">函</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">依</span><span class="mord cjk_fallback">赖</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">解</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><msup><mi>F</mi><mo>+</mo></msup><mo>=</mo><mo stretchy="false">(</mo><munderover><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi mathvariant="normal">Π</mi><msub><mi>R</mi><mi>i</mi></msub></msub><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">\iff F^+ = (\bigcup_{i=1}^n \Pi_{R_i} (F))^+
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.821331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">⋃</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.00773em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>F</mi><mo>⊆</mo><mo stretchy="false">(</mo><munderover><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>F</mi><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">\iff F \sube (\bigcup_{i=1}^n F_i)^+
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">⋃</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><strong>判定方法</strong>：如果没有给定F1，F2，……，Fn，先求之。求<strong>所有模式的依赖集的并集</strong></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><munderover><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>F</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">G = \bigcup_{i=1}^n F_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">⋃</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>对F中<strong>所有函数依赖</strong>X -&gt; Y，检查是否在G<sup>+</sup>中，即判断Y是否在X<sub>G</sub><sup>+</sup>中。</p>
<hr />
<p>[例] 设关系模式R(ABCD)，在R上有两个相应的函数依赖集及分解：F =｛A→B，B→C, C→D｝，ρ=｛AB，ACD｝回答下列问题：</p>
<ol>
<li>确定R的码</li>
<li>ρ是否无损分解；</li>
<li>ρ是否保持函数依赖；</li>
<li>确定ρ中每一模式的范式级别</li>
</ol>
<p>[解]</p>
<p>（1） A<sub>F</sub><sup>+</sup>=ABCD，  B<sub>F</sub><sup>+</sup>=CD，  C<sub>F</sub><sup>+</sup>=BCD，  D<sub>F</sub><sup>+</sup>=D。故A是码。</p>
<p>（2）ρ是无损分解</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>B</mi><mo>∩</mo><mi>A</mi><mi>C</mi><mi>D</mi><mo>=</mo><mi>A</mi><mo separator="true">,</mo><mtext> </mtext><mi>A</mi><mi>B</mi><mo>−</mo><mi>A</mi><mi>C</mi><mi>D</mi><mo>=</mo><mi>B</mi><mo separator="true">,</mo><mi>A</mi><mo>→</mo><mi>B</mi><mi mathvariant="normal">成</mi><mi mathvariant="normal">立</mi></mrow><annotation encoding="application/x-tex">AB \cap ACD = A,\ AB-ACD = B, A\to B 成立
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">立</span></span></span></span></span></p>
<p>（3）ρ不保持函数依赖</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">{</mo><mi>A</mi><mo>→</mo><mi>B</mi><mo stretchy="false">}</mo><mo separator="true">,</mo><mtext> </mtext><msub><mi>F</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">{</mo><mi>A</mi><mo>→</mo><mi>C</mi><mo separator="true">,</mo><mi>A</mi><mo>→</mo><mi>D</mi><mo separator="true">,</mo><mi>C</mi><mo>→</mo><mi>D</mi><mo stretchy="false">}</mo><mo separator="true">,</mo><mtext> </mtext><mi>G</mi><mo>=</mo><msub><mi>F</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F_1 = \{ A\to B \}, \ F_2 = \{ A\to C, A\to D, C\to D \}, \ G = F_1 \cup F_2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∵</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>∈</mo><mi>F</mi><mo separator="true">,</mo><msubsup><mi>B</mi><mi>G</mi><mo>+</mo></msubsup><mo>=</mo><mi>B</mi><mo separator="true">,</mo><mi>C</mi><mo>∉</mo><msubsup><mi>B</mi><mi>G</mi><mo>+</mo></msubsup><mo separator="true">,</mo><mtext> </mtext><mo>∴</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>∉</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">\because B\to C \in F, B_G^+=B, C\not\in B_G^+, \ \therefore B\to C \not\in G
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104993em;vertical-align:-0.28366199999999997em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.416338em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">G</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.28366199999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104993em;vertical-align:-0.28366199999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.416338em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">G</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.28366199999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span></span></p>
<p>（4）</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub><mo>∈</mo><mi>B</mi><mi>C</mi><mi>N</mi><mi>F</mi><mo separator="true">,</mo><mtext> </mtext><msub><mi>R</mi><mn>2</mn></msub><mo>∈</mo><mn>2</mn><mi>N</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">R_1 \in BCNF , \ R_2 \in 2NF
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span></span></p>
<p>R<sub>2</sub>中 D 传递依赖于 A。</p>
<hr />
<p><strong>模式分解算法</strong>（略）</p>
]]></content>
      <categories>
        <category>数据库系统概念</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>数字电路（第一部分）</title>
    <url>/2021/01/01/digital-circuit-1/</url>
    <content><![CDATA[<h1 id="数字电路第一部分基础知识组合电路"><a class="markdownIt-Anchor" href="#数字电路第一部分基础知识组合电路"></a> 数字电路（第一部分：基础知识+组合电路）</h1>
<h2 id="进制转换"><a class="markdownIt-Anchor" href="#进制转换"></a> 进制转换</h2>
<ul>
<li>R进制数 -&gt; 十进制数：加权求和</li>
<li>十进制数 -&gt; R进制数：整数除以R取余数（<strong>商为0为止</strong>，<strong>倒序</strong>排列），小数乘以R取整数（直到<strong>小数为0或达到精度要求</strong>，<strong>正序</strong>排列）</li>
<li>二进制数 -&gt; 八进制数：以小数点为界，分别往高、往低每3位为一组，最后不足3位时用0补充然后写出每组对应的八进制字符，即为对应八进制数。</li>
<li>八进制数 -&gt; 二进制数：1位变3位</li>
<li>二进制数 -&gt; 十六进制数：以小数点为界，分别往高、往低每4位为一组，最后不足4位时用0补充然后写出每组对应的十六进制字符，即为对应十六进制数。</li>
<li>十六进制数 -&gt; 二进制数：1位变4位</li>
</ul>
<h2 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h2>
<h3 id="bcd编码"><a class="markdownIt-Anchor" href="#bcd编码"></a> BCD编码</h3>
<img src="https://repo.live.holgerbest.top/img/fwGEqVObXati8Cv.png" alt="BCD编码" style="zoom:80%;" />
<h3 id="格雷gray码"><a class="markdownIt-Anchor" href="#格雷gray码"></a> 格雷（Gray）码</h3>
<p>任意两个相邻码之间只有一个位不同，这一特点可以减少码在形成、变换和传输时引起的错误。</p>
<p>Gn=Bn,  Gi=Bi+1⊕Bi, (其中 i != n <em>感谢<a href="https://blog.nowcoder.net/cnttdragon">@CN.TTDragon</a></em> )</p>
<h2 id="数的表示"><a class="markdownIt-Anchor" href="#数的表示"></a> 数的表示</h2>
<ul>
<li>正数的原码、反码、补码的表示方法相同</li>
<li>负数的原码(数值位取反，符号位不变)-&gt;反码; 反码+1-&gt;补码</li>
</ul>
<p>补码与原码相互转换，其运算过程是相同的，不需要额外的硬件电路。</p>
<ul>
<li>原码取反+1-&gt;补码</li>
<li>补码取反+1-&gt;原码</li>
</ul>
<p><strong>溢出</strong>：运算结果超出机器数所能表示的范围</p>
<p><strong>溢出判断</strong>：“变形补码”(双符号位是模4补码)，采用多符号位的补码。运算结果的双符号位可能是：</p>
<ul>
<li>00：结果为正，无溢出</li>
<li>01：正溢（大于机器所能表示的最大正数）</li>
<li>10：负溢（小于机器所能表示的最小负数）</li>
<li>11：结果为负，无溢出</li>
</ul>
<h2 id="逻辑函数及化建化简"><a class="markdownIt-Anchor" href="#逻辑函数及化建化简"></a> 逻辑函数及化建化简</h2>
<p>n个变量的逻辑函数中，包含全部变量的乘积项称为<strong>最小项</strong>。n变量逻辑函数的全部最小项共有2n个。（与之相对的是最大项）</p>
<h3 id="卡诺图化简"><a class="markdownIt-Anchor" href="#卡诺图化简"></a> 卡诺图化简</h3>
<p>卡诺图：用小方格来表示最小项，一个小方格代表一个最小项，然后将这些最小项按照相邻性排列起来（00 01 11 10）。</p>
<p>2^n个相邻的最小项结合，可以消去n个取值不同的变量而合并为1项。</p>
<h4 id="卡诺图合并的原则画圈的原则"><a class="markdownIt-Anchor" href="#卡诺图合并的原则画圈的原则"></a> 卡诺图合并的原则（画圈的原则）</h4>
<p>（1）尽量画大圈，但每个圈内只能2^n（n=0,1,2,3……）个相邻项。要特别注意对边相邻性和四角相邻性。</p>
<p>（2）圈的<strong>个数尽量少</strong>。</p>
<p>（3）卡诺图中所有取值为1的方格均要被圈过，即<strong>不能漏下</strong>取值为1的最小项。</p>
<p>（4）在新画的包围圈中至少要含有1个<strong>末被圈过</strong>的1方格，否则该包围圈是多余的。</p>
<p>（5）圈组时应从合并奇异“1”单元开始，先找奇异“1”单元，圈质主蕴涵项，再圈其它项。</p>
<p>（6）能扩大卡诺圈时，把无关项包含进来，否则舍弃无关项。</p>
<h2 id="组合逻辑电路"><a class="markdownIt-Anchor" href="#组合逻辑电路"></a> 组合逻辑电路</h2>
<h3 id="逻辑门电路"><a class="markdownIt-Anchor" href="#逻辑门电路"></a> 逻辑门电路</h3>
<p>与门，或门，非门，与非门，或非门，异或门</p>
<p>混合逻辑中逻辑符号的变换：</p>
<ol>
<li>逻辑图中任一条线的两端同时加上或消去小圆圈，其逻辑关系不变。</li>
<li>任一条线一端上的小圆圈移到另一端，其逻辑关系不变。</li>
<li>一端消去或加上小圆圈，同时将相应变量取反，其逻辑关系不变。</li>
</ol>
<h3 id="电路分析"><a class="markdownIt-Anchor" href="#电路分析"></a> 电路分析</h3>
<p><strong>组合逻辑电路</strong>：电路任一时刻的输出状态只决定于该时刻各输入状态的组合，而与电路的原状态无关。</p>
<p><strong>步骤</strong></p>
<ol>
<li>由逻辑图写出输出端的逻辑表达式；</li>
<li>化简逻辑表达式；</li>
<li>列出真值表；</li>
<li>根据真值表或逻辑表达式，确定其功能。</li>
</ol>
<h3 id="电路设计"><a class="markdownIt-Anchor" href="#电路设计"></a> 电路设计</h3>
<p><strong>1 列逻辑真值表</strong></p>
<ul>
<li>选取输入变量和输出变量</li>
<li>逻辑赋值：用0和1分别代表不同状态</li>
<li>根据实际逻辑问题的因果关系列出逻辑真值表</li>
</ul>
<p><strong>2  写出逻辑函数表达式</strong>：由真值表写出逻辑函数表达式</p>
<p><strong>3 对逻辑函数式进行化简和变换</strong>：根据逻辑门类型，将函数式化简或变换为最简式（与非/或非/其他）</p>
<p><strong>4 画出逻辑电路图</strong>：根据/选择器件型号，由逻辑函数式，画出门级逻辑电路图</p>
<h3 id="组合逻辑模块"><a class="markdownIt-Anchor" href="#组合逻辑模块"></a> 组合逻辑模块</h3>
<h4 id="编码器"><a class="markdownIt-Anchor" href="#编码器"></a> 编码器</h4>
<p><strong>编码器</strong>：将特定的逻辑信号编为一组二进制代码的逻辑部件。（如：输入I0…I7 输出A0…A3）</p>
<p><strong>二进制编码器</strong>：任何时刻只允许输入一个有效信号，不允许同时出现两个或两个以上的有效信号，因而其输入是一组有约束(互相排斥)的变量。</p>
<p><strong>优先编码器</strong>：允许同时输入两个以上信号，并按优先级输出。例如：10-4线(如74LS147)、 8-3线(如74LS148)。</p>
<h4 id="译码器"><a class="markdownIt-Anchor" href="#译码器"></a> 译码器</h4>
<p><strong>译码器</strong>：将输入代码转换成特定的输出信号。（将二进制码翻译成一定的数字、字符或信息）</p>
<p><strong>3-8译码器—74LS138</strong></p>
<img src="https://repo.live.holgerbest.top/img/fyMXeGraTizmxlK.png" alt="74LS138" style="zoom:60%;" />
<ul>
<li>当G1=0时，无论其他输入信号是什么，输出都是高电平，即无效信号。</li>
<li>G2A或G2B 为高电平时，输出也都是无效信号。</li>
<li>在G1=1， G2A + G2B =0时，输出信号才取决于输入信号A2、A1、A0的组合。(<em>感谢<a href="https://blog.nowcoder.net/cnttdragon">@CN.TTDragon</a></em>)</li>
</ul>
<p>74LS138<strong>应用1 实现逻辑函数</strong>：将逻辑函数转换成最小项表达式，再转换成与非—与非形式。用一片74138加与非门就可实现三变量逻辑函数。</p>
<p>74LS138<strong>应用2 构成数据分配器</strong>：将一路输入数据根据地址选择码分配给多路数据输出中的某一路输出。</p>
<img src="https://repo.live.holgerbest.top/img/8mFNpPsYonwa2cu.png" alt="构成数据分配器" style="zoom:50%;" />
<h4 id="数据选择器"><a class="markdownIt-Anchor" href="#数据选择器"></a> 数据选择器</h4>
<p><strong>数据选择器</strong>：根据地址选择码从多路输入数据中选择一路，送到输出。</p>
<p><strong>8选1数据选择器74151</strong></p>
<img src="https://repo.live.holgerbest.top/img/R18Y9mlbF5rQ7Oo.png" alt="74151" style="zoom:50%;" />
<p>用两片74151组成 “16选1”数据选择器</p>
<img src="https://repo.live.holgerbest.top/img/CP69jouBO1SFlzb.png" alt="16选1" style="zoom:50%;" />
<p>数据选择器<strong>实现组合逻辑函数</strong></p>
<ul>
<li>
<p>三变量 74151：将逻辑函数转换成最小项表达式，输入变量接地址端，数据输入端按最小项接1</p>
</li>
<li>
<p>三变量 4选1 或 四变量 74151：输入变量接地址端，多出来的用卡诺图合并，选择接到合适的数据输入端</p>
</li>
<li>
<p>三变量 双4选1 74153：（实现1位全加器）CI为数据收入端接入的变量，A,B作为数据选择器的地址端，由卡诺图得到数据输入</p>
<img src="https://repo.live.holgerbest.top/img/huYQAS1JNlIOWdG.png" alt="实现1位全加器" style="zoom: 80%;" />
</li>
</ul>
]]></content>
      <categories>
        <category>数字电路</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>数字电路</tag>
        <tag>组合电路</tag>
      </tags>
  </entry>
  <entry>
    <title>数字电路（第二部分）</title>
    <url>/2021/01/01/digital-circuit-2/</url>
    <content><![CDATA[<h1 id="数字电路第二部分时序电路"><a class="markdownIt-Anchor" href="#数字电路第二部分时序电路"></a> 数字电路（第二部分：时序电路）</h1>
<h2 id="触发器种类总结"><a class="markdownIt-Anchor" href="#触发器种类总结"></a> 触发器种类总结</h2>
<h3 id="rs触发器"><a class="markdownIt-Anchor" href="#rs触发器"></a> RS触发器</h3>
<p>【重要】</p>
<ul>
<li><strong>特性方程</strong>：<img src="https://repo.live.holgerbest.top/img/SQ3ACdbkvPrsVBz.png" style="zoom:80%;" /></li>
<li><strong>驱动表</strong>：<img src="https://repo.live.holgerbest.top/img/H4JihGZeCSF7uA9.png" style="zoom:0%;" /></li>
</ul>
<h4 id="基本rs触发器"><a class="markdownIt-Anchor" href="#基本rs触发器"></a> 基本RS触发器</h4>
<ol>
<li>有两个互补的输出端，有两个稳定的状态。</li>
<li>有复位（Q=0）、置位（Q=1）、保持原状态三种功能。</li>
<li>R为复位输入端，S为置位输入端，可以是低电平有效，也可以是高电平有效，取决于触发器的结构。</li>
<li>由于反馈线的存在，无论是复位还是置位，有效信号只需要作用很短的一段时间，即“一触即发”。</li>
</ol>
<img src="https://repo.live.holgerbest.top/img/MILSHEjW5xCdNou.png" alt="基本RS触发器功能表" style="zoom:80%;" />
<h4 id="同步rs触发器"><a class="markdownIt-Anchor" href="#同步rs触发器"></a> 同步RS触发器</h4>
<p>给触发器加一个时钟控制端CP，只有在CP端上出现时钟脉冲时，触发器的状态才能变化。</p>
<p>同步RS触发器的状态转换分别由R、S和CP控制，其中，R、S控制状态转换的方向；CP控制状态转换的时刻（上升沿-CP高有效 or 下降沿-CP低有效）。</p>
<p>问题：<strong>空翻</strong> 在一个时钟脉冲周期中，触发器发生多次翻转的现象</p>
<h4 id="主从rs触发器"><a class="markdownIt-Anchor" href="#主从rs触发器"></a> 主从RS触发器</h4>
<img src="https://repo.live.holgerbest.top/img/fhxFdobtaMp3WgD.png" alt="主从RS触发器" style="zoom:80%;" />
<p>特点：</p>
<ol>
<li>主从触发器的翻转是在CP由1变0时刻（CP下降沿）发生的。</li>
<li>CP一旦变为0后，主触发器被封锁，其状态不再受R、S影响，因此不会有空翻现象。</li>
</ol>
<h3 id="jk触发器-重要"><a class="markdownIt-Anchor" href="#jk触发器-重要"></a> JK触发器 【重要】</h3>
<ul>
<li><strong>特性方程</strong>：<img src="https://repo.live.holgerbest.top/img/nyEHmc3PxdBgk5T.png" style="zoom:80%;" /></li>
<li><strong>驱动表</strong>：<img src="https://repo.live.holgerbest.top/img/LymDJ9BitqY2AFg.png" style="zoom:80%;" /></li>
</ul>
<h3 id="d触发器-重要"><a class="markdownIt-Anchor" href="#d触发器-重要"></a> D触发器 【重要】</h3>
<p><strong>特性方程</strong>：<img src="https://repo.live.holgerbest.top/img/ynDgfWOMzUcA1B5.png" style="zoom:50%;" /></p>
<h3 id="t触发器"><a class="markdownIt-Anchor" href="#t触发器"></a> T触发器</h3>
<p><strong>特性方程</strong>：<img src="https://repo.live.holgerbest.top/img/EJTLOymIpvPd3hC.png" style="zoom:80%;" /></p>
<h3 id="t触发器-2"><a class="markdownIt-Anchor" href="#t触发器-2"></a> T’触发器</h3>
<p><strong>特性方程</strong>：Q*=非Q</p>
<h2 id="触发器的转换"><a class="markdownIt-Anchor" href="#触发器的转换"></a> 触发器的转换</h2>
<p>将两种触发器的特性方程进行比较，得出结果。</p>
<h3 id="jk-d"><a class="markdownIt-Anchor" href="#jk-d"></a> JK-&gt;D</h3>
<img src="https://repo.live.holgerbest.top/img/VRsyxivXWPcTz8A.png" alt="JK->D" style="zoom:50%;" />
<h3 id="jk-t-t"><a class="markdownIt-Anchor" href="#jk-t-t"></a> JK-&gt;T T’</h3>
<img src="https://repo.live.holgerbest.top/img/pPn4J1xrqW7FVCk.png" alt="JK->T T’" style="zoom:50%;" />
<h3 id="d-jk"><a class="markdownIt-Anchor" href="#d-jk"></a> D-&gt;JK</h3>
<img src="https://repo.live.holgerbest.top/img/PsZQeV2dIKflAMR.png" alt="D->JK" style="zoom:50%;" />
<h3 id="其他之间互转"><a class="markdownIt-Anchor" href="#其他之间互转"></a> <em>其他之间互转</em></h3>
<p>将状态转换图写成卡诺图的形式，然后求特性方程；将两种触发器的特性方程进行比较，得出结果。</p>
<h2 id="时序逻辑电路"><a class="markdownIt-Anchor" href="#时序逻辑电路"></a> 时序逻辑电路</h2>
<p>时序逻辑电路：任何一个时刻的输出状态不仅取决于当时的输入信号，还与电路的<strong>原状态</strong>有关。</p>
<ul>
<li>输出方程（输出函数）</li>
<li>驱动方程（激励函数）（与触发器输入相连）</li>
<li>状态方程</li>
</ul>
<img src="https://repo.live.holgerbest.top/img/DXsKVcSwBfp6LZ3.png" style="zoom:70%;" />
<p>根据输出信号的特点时序逻辑电路可分为米利（Mealy）型和穆尔（Moore）型。</p>
<ul>
<li>Mealy类型与<strong>输入、现态</strong>有关</li>
<li>Moore类型仅于<strong>现态</strong>有关</li>
</ul>
<h3 id="分析-重要"><a class="markdownIt-Anchor" href="#分析-重要"></a> 分析 【重要】</h3>
<img src="https://repo.live.holgerbest.top/img/qTWh2CGmkxfSNtA.png" alt="时序电路分析" style="zoom:60%;" />
<ol>
<li>写出<strong>输出方程</strong>，<strong>驱动方程</strong>；</li>
<li>将驱动方程代入触发器的<strong>特性方程</strong>中，得出电路的<strong>状态方程</strong>；</li>
<li>画出<strong>状态转换表</strong>，<strong>状态转换图</strong>；</li>
<li>画出时序图（不必要）；</li>
<li>分析<strong>逻辑功能</strong>。</li>
</ol>
<h3 id="同步时序逻辑电路的设计-重要"><a class="markdownIt-Anchor" href="#同步时序逻辑电路的设计-重要"></a> 同步时序逻辑电路的设计 【重要】</h3>
<img src="https://repo.live.holgerbest.top/img/UHjXqnFKgi4Qs36.png" style="zoom:60%;" />
<ol>
<li>根据设计要求，设定状态，画出<strong>状态转换图</strong>；</li>
<li><strong>状态分配</strong>，列状态转换编码表；</li>
<li>画出电路的<strong>次态卡诺图</strong>；由触发器的驱动表得各触发器的<strong>驱动卡诺图</strong>，再画出<strong>输出卡诺图</strong>，求各触发器的<strong>驱动方程</strong>和<strong>输出方程</strong>；</li>
<li>如果状态个数不为2^n，将驱动方程代入触发器的<strong>特性方程</strong>中，得出电路的<strong>状态方程</strong>，检查能否<strong>自启动</strong>（无关项能否进入有效状态）（如果不能，重新设计状态转换图）；</li>
<li>画出逻辑电路图。</li>
</ol>
<h4 id="建立原始状态图和状态表"><a class="markdownIt-Anchor" href="#建立原始状态图和状态表"></a> 建立原始状态图和状态表</h4>
<ol>
<li>确定电路模型：Mealy型 or Moore型；</li>
<li>设立初始状态；</li>
<li>从初始状态出发，逐个增加和完善，并确定各时刻电路的输出。</li>
</ol>
<ul>
<li>Mealy型：<img src="https://repo.live.holgerbest.top/img/qNSz3BuC8JHeRQp.png" alt="Mealy型" style="zoom: 50%;" /></li>
<li>Moore型：<img src="https://repo.live.holgerbest.top/img/AFfBjaRiwuYgMGO.png" alt="Moore型" style="zoom: 50%;" /></li>
</ul>
<h4 id="状态化简"><a class="markdownIt-Anchor" href="#状态化简"></a> 状态化简 ▲</h4>
<p>从原始状态表中消去多余状态，得到一个既能正确地描述给定的逻辑功能，又能使所包含的状态数目达到最少的状态表，通常称这种状态表为最小化状态表。</p>
<p>等效状态：如果对于所有可能的输入序列，分别从Si和Sj出发，所得到的输出响应序列完全相同。等效状态具有传递性。</p>
<p>等效条件：满足如下两条。</p>
<ul>
<li>第一，它们的输出相同。</li>
<li>第二，它们的次态属于下列情况之一：
<ul>
<li>a．次态相同；</li>
<li>b．次态交错或为各自的现态；</li>
<li>c．次态循环或为等效对。</li>
</ul>
</li>
</ul>
<p>最大等效类：如果一个等效类不是任何其他等效类的子集，则该等效类称为最大等效类。</p>
<p><strong>隐含表进行状态化简</strong></p>
<p>例如：</p>
<img src="https://repo.live.holgerbest.top/img/HvKmNAOCESoBs5V.png" style="zoom:50%;" />
<img src="https://repo.live.holgerbest.top/img/IVkETAq3DLaBjCU.png" style="zoom:50%;" />
<h4 id="状态编码"><a class="markdownIt-Anchor" href="#状态编码"></a> 状态编码</h4>
<p><strong>相邻法的状态编码原则</strong>：按从1至3的优先顺序考虑，一般将初始状态分配为“0”状态。</p>
<ol>
<li>在相同输入条件下，具有相同次态的现态应尽可能分配相邻的二进制代码；</li>
<li>在相邻输入条件下，同一现态的次态应尽可能分配相邻的 二进制代码；</li>
<li>输出完全相同的现态应尽可能分配相邻的二进制代码。</li>
</ol>
<h3 id="设计举例"><a class="markdownIt-Anchor" href="#设计举例"></a> 设计举例</h3>
<hr />
<p>设计一个串行<strong>数据检测器</strong>。该检测器有一个输入端X，它的功能是对输入信号进行检测。当连续输入三个1（以及三个以上1）时，该电路输出Y=1，否则输出Y=0。</p>
<p>（1）根据设计要求，设定状态：</p>
<ul>
<li>S0——初始状态或没有收到1时的状态；</li>
<li>S1——收到一个1后的状态；</li>
<li>S2——连续收到两个1后的状态；</li>
<li>S3——连续收到三个1（以及三个以上1）后的状态。</li>
</ul>
<p>（2）根据题意可画出原始状态图：</p>
<img src="https://repo.live.holgerbest.top/img/SgboNP2rh9QvsuR.png" style="zoom:50%;" />
<p>画出原始状态表：<br />
<img src="https://repo.live.holgerbest.top/img/YsyxrOzSpqvPHtN.png" style="zoom:40%;" /></p>
<p>（3）状态化简。观察上图可知，S2和S3是等价状态，所以将S2和S3合并，并用S2表示，得简化状态表：<img src="https://repo.live.holgerbest.top/img/DbPkYuRGK8tNiX1.png" style="zoom:40%;" /></p>
<p>（4）状态分配。该电路有3个状态，可以用2位二进制代码组合（00、01、10、11）中的 三个代码表示。本例取S0=00、S1=01、S2=11。</p>
<p>（5）选择触发器：选用2个D触发器。</p>
<p>（6）求出状态方程、驱动方程和输出方程。</p>
<p>列出D触发器的驱动表、画出电路的次态和输出卡诺图。</p>
<img src="https://repo.live.holgerbest.top/img/XeMNCcjb71p3sVB.png" style="zoom:60%;" />
<img src="https://repo.live.holgerbest.top/img/hm1wc2xptvJCzMG.png"  style="zoom:60%;" />
<p>（7）检查能否自启动。</p>
<img src="https://repo.live.holgerbest.top/img/dkJ8fBGz7rXbKTy.png" style="zoom:60%;" />
<p>（8）画逻辑图。根据驱动方程和输出方程，画出逻辑图。</p>
<img src="https://repo.live.holgerbest.top/img/wWnQA5k2YpPmfgB.png" style="zoom:60%;" />
<hr />
<h2 id="集成电路的应用"><a class="markdownIt-Anchor" href="#集成电路的应用"></a> 集成电路的应用</h2>
<h3 id="计数器"><a class="markdownIt-Anchor" href="#计数器"></a> 计数器</h3>
<p>4位同步二进制计数器74161 【重要】：异步清零；同步并行预置数；计数；保持。</p>
<img src="https://repo.live.holgerbest.top/img/Gnu8cB7VtafWYm2.png" alt="4位同步二进制计数器74161" style="zoom:35%;" />
<p>十进制计数器74160 【重要】：</p>
<img src="https://repo.live.holgerbest.top/img/GbIAQXx91gY67sE.png" alt="十进制计数器74160" style="zoom:50%;" />
<p>可逆计数器74191：</p>
<img src="https://repo.live.holgerbest.top/img/xCq56nBE3PoibuW.png" alt="可逆计数器74191" style="zoom:35%;" />
<h4 id="同步级联"><a class="markdownIt-Anchor" href="#同步级联"></a> 同步级联</h4>
<p>例如：用两片4位二进制加法计数器74161采用同步级联方式构成的8位二进制同步加法计数器，模为16×16=256。</p>
<img src="https://repo.live.holgerbest.top/img/tyzsLki3JlfFGeH.png"  alt="同步级联" style="zoom:60%;" />
<h4 id="组成任意进制计数器-重要"><a class="markdownIt-Anchor" href="#组成任意进制计数器-重要"></a> 组成任意进制计数器  【重要】</h4>
<p>例如：用集成计数器74160和与非门组成的6进制计数器。</p>
<p>异步清零法（RD=Q2Q1）（注意要设计到进位的下一个状态）：</p>
<img src="https://repo.live.holgerbest.top/img/ywtd67b2XuCoYDH.png" alt="组成6进制计数器 异步清零" style="zoom:60%;" />
<p>同步置数法（LD=Q2Q0）：</p>
<img src="https://repo.live.holgerbest.top/img/7WqDjESVrIs5O9Q.png" alt="组成6进制计数器 同步置数" style="zoom:60%;" />
<h4 id="组成序列信号发生器-重要"><a class="markdownIt-Anchor" href="#组成序列信号发生器-重要"></a> <strong>组成序列信号发生器</strong>  【重要】</h4>
<p>例如：试用计数器74161和数据选择器设计一个01100011序列发生器。</p>
<p>由于<strong>序列长度</strong>P=8，故将74161构成模8计数器，并选用<strong>数据选择器</strong>74151产生所需序列，从而得电路如图所示。</p>
<img src="https://repo.live.holgerbest.top/img/ub7FIh4oqfB5ijk.png" alt="01100011序列发生器" style="zoom:70%;" />
<h3 id="寄存器"><a class="markdownIt-Anchor" href="#寄存器"></a> 寄存器</h3>
<p>寄存器：可寄存一组二进制数码的逻辑部件</p>
<p>74175为由边沿触发器构成的4位寄存器，为并行输入/并行输出方式。在CLK上升沿时，将D0…D3数据存入；由RD异步清零。</p>
<img src="https://repo.live.holgerbest.top/img/3ktCEScWf5Qzuh2.png" alt="74175" style="zoom:60%;" />
<h3 id="移位寄存器"><a class="markdownIt-Anchor" href="#移位寄存器"></a> 移位寄存器</h3>
<p>移位寄存器不仅具有数码存储功能，还具有移位的功能，即在移位脉冲的作用下，依次左移或右移。</p>
<h4 id="右移寄存器"><a class="markdownIt-Anchor" href="#右移寄存器"></a> 右移寄存器</h4>
<p>结构特点：左边触发器的输出端接右邻触发器的输入端。</p>
<img src="https://repo.live.holgerbest.top/img/Oat9wCb53nhofRP.png" alt="右移移位寄存器" style="zoom:60%;" />
<h4 id="左移寄存器"><a class="markdownIt-Anchor" href="#左移寄存器"></a> 左移寄存器</h4>
<p>结构特点：右边触发器的输出端接左邻触发器的输入端。</p>
<img src="https://repo.live.holgerbest.top/img/pM4eoslSK57V8fh.png" alt="左移移位寄存器" style="zoom:60%;" />
<h4 id="双向移位寄存器74194-重要"><a class="markdownIt-Anchor" href="#双向移位寄存器74194-重要"></a> 双向移位寄存器74194  【重要】</h4>
<img src="https://repo.live.holgerbest.top/img/5Q2fyHnSIG17LsO.png" alt="双向移位寄存器74194" style="zoom:60%;" />
<ul>
<li>DIR－数据右移串行输入端</li>
<li>DIL－数据左移串行输入端</li>
<li>D0…D3－数据并行输入端</li>
<li>Q0…Q3－数据并行输出端</li>
<li>S1、S0－工作状态控制端</li>
</ul>
<h4 id="74194-序列检测器-重要"><a class="markdownIt-Anchor" href="#74194-序列检测器-重要"></a> 74194-&gt;<strong>序列检测器</strong>  【重要】</h4>
<p>例如：用74194实现“1011”数据检测器</p>
<ol>
<li>待检测序列长度为4，所以选择4位移位寄存器；</li>
<li>将待检测序列从状态输出中解读出来（组合逻辑）。</li>
</ol>
<img src="https://repo.live.holgerbest.top/img/2oSHQt85rsmXhVK.png" alt="" style="zoom:80%;" />
<h4 id="移位寄存器-移位型计数器"><a class="markdownIt-Anchor" href="#移位寄存器-移位型计数器"></a> 移位寄存器-&gt;<strong>移位型计数器</strong></h4>
<ul>
<li>环形计数器：N位移位寄存器可以计N个数，实现模N计数器。状态为1的输出端的序号等于计数脉冲的个数。<img src="https://repo.live.holgerbest.top/img/hpXoC68r92GZtTf.png" ></li>
<li>扭环形计数器：N位移位寄存器可以组成模2N的扭环形计数器，只需将末级输出反相后，接到串行输入端。<img src="https://repo.live.holgerbest.top/img/94xjwgiuo2HCPYO.png" alt="扭形计数器" style="zoom:80%;" /></li>
</ul>
<p>用反馈移位寄存器实现<strong>环行计数器</strong>的方法：</p>
<ol>
<li>看环行计数器的状态机，是不是具有移位特性</li>
<li>选择n位的移位寄存器，并求其反馈函数：<strong>反馈函数的输出值其实就是次态串行输入值</strong>；</li>
<li>通过<strong>卡诺图</strong>求反馈函数表达式；</li>
<li>电路实现。</li>
</ol>
<p>例如：用194实现3位环行计数器</p>
<img src="https://repo.live.holgerbest.top/img/dlT5KjYsufXSFA8.png" alt="3位环行计数器" style="zoom:50%;" />
<p>该状态机的移位方向为Q2Q1Q0（右移）；其中D2为串行输入端；而Q0为串行输出端。</p>
<h4 id="移位寄存器-序列发生器-重要"><a class="markdownIt-Anchor" href="#移位寄存器-序列发生器-重要"></a> 移位寄存器-&gt;<strong>序列发生器</strong>  【重要】</h4>
<p>例如：请用移位寄存器设计一个序列发生器，能够输出串行序列“101110”</p>
<p>步骤一：通过移位特性构建状态图（要求状态图中<strong>不能出现重复状态</strong>）：<img src="https://repo.live.holgerbest.top/img/DJrf69LWcS4eHgv.png" style="zoom:67%;"  ></p>
<p>步骤二：上面状态图存在移位特性，根据其移位特性求其<strong>反馈函数</strong>；Q3为串出；Q0为串入；反馈函数的输出即<strong>次态的串入</strong>。<img src="https://repo.live.holgerbest.top/img/Jj6evzNTsP8YlQW.png" style="zoom: 67%;"  ></p>
<img src="https://repo.live.holgerbest.top/img/X1oOLcJbU5M7qiw.png" style="zoom:67%;" />
]]></content>
      <categories>
        <category>数字电路</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>数字电路</tag>
        <tag>时序电路</tag>
      </tags>
  </entry>
  <entry>
    <title>数字孪生文献速读</title>
    <url>/2021/07/19/digital-twin-introduction/</url>
    <content><![CDATA[<h2 id="什么是数字孪生"><a class="markdownIt-Anchor" href="#什么是数字孪生"></a> 什么是数字孪生</h2>
<p>数字孪生将物理世界的各种属性映射到虚拟空间中，形成可复制、可修改、可重复操作的数字镜像，让受限于物理条件以及实体而无法重复完成的操作得以复现并预测。在生产过程中密切跟踪产品（数字孪生），并进行（实时或接近实时）模拟，根据这些模拟的结果调整生产。</p>
<a id="more"></a>
<h2 id="大致研究方向"><a class="markdownIt-Anchor" href="#大致研究方向"></a> 大致研究方向</h2>
<h3 id="综述"><a class="markdownIt-Anchor" href="#综述"></a> 综述</h3>
<blockquote>
<p>工业数字孪生都研究了什么，有哪些研究方向，未来的突破点</p>
</blockquote>
<ul>
<li>F. Tao, H. Zhang, A. Liu and A. Y. C. Nee, “Digital Twin in Industry: State-of-the-Art,” in <em>IEEE Transactions on Industrial Informatics</em>, vol. 15, no. 4, pp. 2405-2415, April 2019, doi: 10.1109/TII.2018.2873186. 引用次数：407</li>
<li>R. Minerva, G. M. Lee and N. Crespi, “Digital Twin in the IoT Context: A Survey on Technical Features, Scenarios, and Architectural Models,” in <em>Proceedings of the IEEE</em>, vol. 108, no. 10, pp. 1785-1824, Oct. 2020, doi: 10.1109/JPROC.2020.2998530. 引用次数：36</li>
<li>Y. Wu, K. Zhang and Y. Zhang, “Digital Twin Networks: a Survey,” in <em>IEEE Internet of Things Journal</em>, doi: 10.1109/JIOT.2021.3079510. 引用次数：2</li>
</ul>
<h4 id="数字孪生是什么"><a class="markdownIt-Anchor" href="#数字孪生是什么"></a> 数字孪生是什么</h4>
<p>数字孪生的定义：</p>
<ul>
<li>三种定义：
<ul>
<li>物理物体的镜像模型；</li>
<li>计算机模型、模拟或软件；</li>
<li>集成系统。</li>
</ul>
</li>
<li>综合定义：数字孪生是一个智能的、不断发展的系统，它在整个生命周期监控、控制和优化物理对象。</li>
</ul>
<p>数字孪生网络（DTN）定义：使用多个一对一数字孪生构建的多对多映射网络，通过使用精确的数字孪生模型、通信、计算和物理数据处理技术，实现多物理对象和数字孪生的动态交互和同步演化。</p>
<p><img src="https://i.loli.net/2021/07/18/9mhOfX7ZwCJrazV.png" alt="image.png" /></p>
<p>数字孪生的概念模型：<br />
<img src="https://i.loli.net/2021/07/18/t2d4PTQevVOrCya.png" alt="image.png" /></p>
<ul>
<li>三个部分：物理产品、虚拟产品及其连接</li>
<li>五个部分：物理部分、虚拟部分、连接、数据和服务</li>
</ul>
<p>数字孪生网络的理论基础：</p>
<ul>
<li>数字孪生建模、模拟、验证、验证和认证（VV&amp;A）；</li>
<li>数据融合；交互和协作；</li>
<li>服务。</li>
</ul>
<p>关键技术：通信（P2P，P2V，V2V）、物理数据处理、数字孪生建模（特定模型，多尺寸模型，通用模型）、云计算和边缘计算。</p>
<h4 id="目前的发展情况"><a class="markdownIt-Anchor" href="#目前的发展情况"></a> 目前的发展情况</h4>
<p>发展历史：<br />
<img src="https://i.loli.net/2021/07/18/Amrg9VcKWQTBlFY.png" alt="image.png" /><br />
<img src="https://i.loli.net/2021/07/18/5RbMU7O8PhBapuV.png" alt="image.png" /></p>
<p>适用领域</p>
<ul>
<li>工业领域：<br />
<img src="https://i.loli.net/2021/07/18/P3G5Lcdige1SDaV.png" alt="image.png" />
<ul>
<li>design：更快速、高效设计新产品，在设计早期即可评估设计好坏</li>
<li>production：监控复杂的生产过程，实时调整优化</li>
<li>prognostics, and health management (PHM)：预测和健康管理</li>
</ul>
</li>
<li>数字孪生网络在智能城市制造、航空、医疗保健、6G 网络、智能交通系统和城市智能领域的应用。<br />
<img src="https://i.loli.net/2021/07/18/mnAEBC1rZdMxPjk.png" alt="image.png" /></li>
</ul>
<h4 id="实现与主要挑战"><a class="markdownIt-Anchor" href="#实现与主要挑战"></a> 实现与主要挑战</h4>
<ol>
<li>数字孪生驱动的 PHM 可以集成建模的四个维度（即几何学、物理、行为和规则建模），从而更准确地描绘实际情况。数字孪生驱动的PHM整体融合了物理数据和虚拟数据、实时数据和历史数据以及数据融合。可以集成历史数据和实时数据，以构建增强的预测模型。</li>
<li>关于数字孪生的实现，关键问题是如何建立一个切实可行的数字孪生模型。<br />
几乎每篇论文都承认建模的重要性，但尚未就如何以通用方式建立数字孪生模型达成共识。<br />
迫切需要一个统一的数字孪生建模框架。此外，为数字孪生开发更多建模工具同样重要。<br />
因此，数字孪生建模是研究的一个很有前途的方向。</li>
<li>信息物理融合的数字孪生。改进融合算法。采用并行计算来提高计算效率。数字孪生的安全性。连接和通信协议。</li>
<li>未来的新趋势和开放性研究问题：安全和隐私问题，基于全面传感器部署的数据收集成本问题，双向实时通信延迟问题。</li>
</ol>
<h3 id="1-对数字孪生进行建模建模方法"><a class="markdownIt-Anchor" href="#1-对数字孪生进行建模建模方法"></a> 1 对数字孪生进行建模，建模方法</h3>
<h4 id="a-methodology-for-digital-twin-modeling-and-deployment-for-industry-40"><a class="markdownIt-Anchor" href="#a-methodology-for-digital-twin-modeling-and-deployment-for-industry-40"></a> A Methodology for Digital Twin Modeling and Deployment for Industry 4.0</h4>
<p><strong>工业化4.0数字孪生建模与部署方法</strong> <strong>DOI:</strong> <a href="https://doi.org/10.1109/JPROC.2020.3032444">10.1109/JPROC.2020.3032444</a></p>
<p>【通用的工业领域，数字孪生的建模方法】</p>
<p>提出了使用模型驱动工程（MDE）进行数字孪生（DT）设计的方法，灵活、通用。</p>
<h5 id="数字孪生参考模型的组成"><a class="markdownIt-Anchor" href="#数字孪生参考模型的组成"></a> 数字孪生参考模型的组成</h5>
<p>通用体系结构，数字孪生与设备、应用程序和用户之间的关系</p>
<p><img src="https://i.loli.net/2021/07/19/qdkvsj1SINxeK9F.png" alt="image.png" /></p>
<p>必要组件：物理模型（使用AutomationML为数字孪生建模）和API（通过外部应用程序访问数字孪生实例）</p>
<p>可选组件：</p>
<ol>
<li>Storage</li>
<li>Events Source：满足特定条件触发事件</li>
<li>Methods：可调用、执行的一组指令，用于控制设备、执行模拟、运行诊断</li>
<li>Access control：用户身份验证</li>
<li>Human–machine interface，HMI</li>
<li>Common Interface</li>
</ol>
<p><img src="https://i.loli.net/2021/07/19/F9owcbxeTWsD8Ed.png" alt="image.png" /></p>
<p>另外还提出了数字孪生中多个实体（例如多个设备、传感器等）之间连接关系的拓扑结构：</p>
<ol>
<li>产品的数字孪生：与产品本身无直接连接，信息由其他实体提供，数字孪生负责整合、存储和呈现数据。</li>
<li>连接的数字孪生：存在通信链路。</li>
<li>嵌入式数字孪生：数字孪生嵌入在设备中。</li>
<li>聚合的数字孪生：物理设备可由几个部件组成，因此数字孪生也可以通过聚合创建，保持一对一关系，可能反映复杂系统的组成性质。</li>
</ol>
<h5 id="建模与部署方法"><a class="markdownIt-Anchor" href="#建模与部署方法"></a> 建模与部署方法</h5>
<p>使用AutomationML（AML）的数字孪生建模方法</p>
<p><img src="https://i.loli.net/2021/07/19/27EBgxmeDPhcWpd.png" alt="image.png" /></p>
<p>AML（Automation Markup Language），是一种用于工程数据的基于XML的数据交换格式。它包括：</p>
<ul>
<li>内部元素——树型结构的组件</li>
<li>system unit class (SUC)，系统单元类——树型结构组件中可复用模型</li>
</ul>
<p>基于AML建模步骤：</p>
<ol>
<li>定义描述通用语义信息的角色：Storage、Methods……</li>
<li>定义接口来显式地对元素之间的交互建模：API</li>
<li>创建SUC对可重用组件进行建模：SUC 支持 角色（步骤1），角色 指定 语义。</li>
<li>创建数字孪生实例层次结构</li>
<li>配置数字孪生属性：IP，端口</li>
</ol>
<h5 id="使用web服务器部署"><a class="markdownIt-Anchor" href="#使用web服务器部署"></a> 使用Web服务器部署</h5>
<p><img src="https://i.loli.net/2021/07/19/RtTbg43Zjv9HoVQ.png" alt="image.png" /></p>
<p>使用 Python 脚本实现部署过程自动化，创建与 Web 服务器和物理设备的通信接口，以及执行数字孪生实例的所有必要组件。具体工作包括：</p>
<ol>
<li>访问控制，合法性检查。</li>
<li>更新物理模型（修改AML，自动建模）。</li>
<li>数据库中注册更改。</li>
<li>必要时触发事件。</li>
</ol>
<p>一个具有四个自动操作阀门的炼油厂自动化系统的案例，并讨论了集中式和分布式（聚合的数字孪生）的拓扑结构对MDE方法建模并部署的影响，结论是分布式更灵活，更具优势。</p>
<h5 id="不足与改进之处"><a class="markdownIt-Anchor" href="#不足与改进之处"></a> 不足与改进之处</h5>
<p>在贯穿设备生命周期的案例中评估这种方法，其中设备及其数字孪生都可能随着时间的推移而改变。在这种情况下，提供向数字孪生动态添加新特性，并允许对其模型结构进行更新。</p>
<h4 id="cyber-physical-cloud-manufacturing-systems-with-digital-twins"><a class="markdownIt-Anchor" href="#cyber-physical-cloud-manufacturing-systems-with-digital-twins"></a> Cyber-Physical Cloud Manufacturing Systems with Digital-Twins</h4>
<p><strong>带有数字孪生的信息物理云制造（CPCM）系统</strong> <strong>DOI:</strong> <a href="https://doi.org/10.1109/MIC.2021.3058921">10.1109/MIC.2021.3058921</a></p>
<p>【工业领域，使用专用协议构建数字孪生的方法】</p>
<p>设计了一个框架，使用MTconnect检索数据，以构建数字孪生体。设计信息模型来表示结构并反映物理机器的实时状态。</p>
<p><img src="https://i.loli.net/2021/07/19/aSIqUD5OlQoeGry.png" alt="image.png" /></p>
<p>Cloud Manufacturing based on Digital Twins（CMDT），为CPCM系统中的物理机器构建数字孪生（这里直接把数字孪生看作是虚拟机器）。</p>
<p>设计了一个 Web门户网站，用户可以访问数字孪生，远程监控物理机器。用户的访问请求被发送到私有云。<br />
Knowledge Resources Center（KRC）将所有私有云连接在一起。</p>
<p>系统执行MTconnect协议和由MTconnect协议更新的物理机器数据。</p>
<h4 id="experimentable-digital-twinsstreamlining-simulation-based-systems-engineering-for-industry-40"><a class="markdownIt-Anchor" href="#experimentable-digital-twinsstreamlining-simulation-based-systems-engineering-for-industry-40"></a> Experimentable Digital Twins—Streamlining Simulation-Based Systems Engineering for Industry 4.0</h4>
<p><strong>可实验的数字孪生——为工业4.0简化基于仿真的系统工程</strong> <strong>DOI:</strong> <a href="https://doi.org/10.1109/TII.2018.2804917">10.1109/TII.2018.2804917</a></p>
<p>【工业仿真领域，基于模拟技术构建数字孪生】</p>
<ol>
<li>提出了一种称为&quot;可实验数字孪生&quot;（EDT），基于仿真的系统工程：<br />
<img src="https://i.loli.net/2021/07/19/G9WRXMz3e8HP4AQ.png" alt="image.png" /><br />
EDTs combine the ideas of digital twins with model-based systems engineering (MBSE) and simulation technology.</li>
<li>一种将EDT变为现实的新方法，称为&quot;虚拟测试台（VTB）&quot;</li>
</ol>
<h3 id="2-使用其他的方法机器学习等来优化数字孪生模型"><a class="markdownIt-Anchor" href="#2-使用其他的方法机器学习等来优化数字孪生模型"></a> 2 使用其他的方法（机器学习等）来优化数字孪生模型</h3>
<h4 id="sensor-fault-detection-isolation-and-accommodation-for-digital-twins-via-modular-data-driven-architecture"><a class="markdownIt-Anchor" href="#sensor-fault-detection-isolation-and-accommodation-for-digital-twins-via-modular-data-driven-architecture"></a> ✨ Sensor-Fault Detection, Isolation and Accommodation for Digital Twins via Modular Data-Driven Architecture</h4>
<p><strong>通过模块化数据驱动架构实现数字双胞胎的传感器故障检测、隔离和适应</strong> <strong>DOI:</strong> <a href="https://doi.org/10.1109/JSEN.2020.3029459">10.1109/JSEN.2020.3029459</a></p>
<p>【机器学习方法优化数字孪生模型】</p>
<p>检测传感器测量中的异常，识别出有缺陷的异常，并将其与适当的估计数据进行匹配，从而为实现可靠的数字孪生铺平道路。</p>
<ul>
<li>通用的</li>
<li>基于机器学习的体系结构（SFDIA）的</li>
<li>建立在一系列神经网络估计器和分类器上的</li>
<li>传感器验证体系</li>
</ul>
<p>估计器对应于所有不可靠传感器的虚拟传感器(以重构正常行为并替换系统内孤立的故障传感器)，而分类器用于检测和隔离任务。</p>
<p>对三种不同的真实数据集（Air Quality (AQ) Data-Set；Wireless Sensor Network (WSN) Data-Set；Permanent Magnet Synchronous Motor (PMSM) Data-Set）进行了全面的统计分析，并在软硬合成故障下验证了所提体系结构的性能。</p>
<h4 id="intelligent-small-object-detection-for-digital-twin-in-smart-manufacturing-with-industrial-cyber-physical-systems"><a class="markdownIt-Anchor" href="#intelligent-small-object-detection-for-digital-twin-in-smart-manufacturing-with-industrial-cyber-physical-systems"></a> ✨ Intelligent Small Object Detection for Digital Twin in Smart Manufacturing with Industrial Cyber-Physical Systems</h4>
<p><strong>基于工业信息物理系统的智能制造中数字孪生体的智能小目标检测</strong></p>
<p>【使用机器学习方法优化特定的数字孪生模型】</p>
<p>专注于小型物体检测的数字孪生模型（a small object detection model for DT，SOD-DT），旨在实现物理制造系统与其虚拟表示之间的动态同步。基于MobileNetv2, YOLOv4, Openpose的混合深度神经网络模型，以识别从物理制造环境到虚拟空间的实时状态。然后开发一种学习算法，实现基于浅层和深层特征集成和融合的高效多类型小对象检测，以促进数字孪生系统整个制造过程的建模、监控和优化。</p>
<h3 id="3-利用数字孪生服务于其他的模型场景进行优化"><a class="markdownIt-Anchor" href="#3-利用数字孪生服务于其他的模型场景进行优化"></a> 3 利用数字孪生服务于其他的模型/场景进行优化</h3>
<p>数字孪生是在这一模型中的一个组件，提供一种保持数据同步或便捷获取可靠的数据的方法。</p>
<h4 id="application-driven-network-aware-digital-twin-management-in-industrial-edge-environments"><a class="markdownIt-Anchor" href="#application-driven-network-aware-digital-twin-management-in-industrial-edge-environments"></a> Application-driven Network-aware Digital Twin Management in Industrial Edge Environments</h4>
<p><strong>工业边缘环境中应用驱动的网络感知数字孪生管理</strong> <strong>DOI:</strong> <a href="https://doi.org/10.1109/TII.2021.3067447">10.1109/TII.2021.3067447</a></p>
<p>【网络领域，数字孪生的网络通信方法】</p>
<p>提出了应用驱动的数字孪生网络(Application-driven Digital Twin Networking，ADTN)中间件，该中间件的<strong>目标</strong>是：(1)通过允许数字孪生利用基于IP的协议而不是专业的工业协议，简化异构设备之间的交互，并通过定义良好的标准丰富数据，增强数据包内容的表达能力。(2)动态管理边缘工业环境中的网络资源，应用 软件定义网络(Software Defined Networking，SDN)开发最适合应用需求的通信机制，从本机IP到更基于数据包内容的通信机制。</p>
<p>分布式工业物联网部署的结构：</p>
<p><img src="https://i.loli.net/2021/07/19/pPanu1tr5vmfiVU.png" alt="image.png" /></p>
<p><img src="https://i.loli.net/2021/07/19/b4V6otkmhERFS1Z.png" alt="image.png" /></p>
<p>ADTN 中间件负责处理协调物理设备、数字孪生和模块之间的可扩展和可靠通信，以及来自外部授权服务的一组动态应用程序驱动规则和指示。特别是，主要的ADTN组件是Edge layer的简单数字孪生（SDT）和Control Room的组合数字孪生（CDT）（见图2）。</p>
<p>SDT提供物联网设备的一对一镜像。</p>
<p>CDT同时聚合多个 SDT，以模拟复杂的分布式应用和行为。</p>
<p>SDN Control Agent与Control Room进行远程交互，发送关于边缘节点计算、内存、网络特征及其当前状态的信息，并接收来自Control Room的流量规则应用于本地边缘节点，以应用驱动的方式优化数据包管理。</p>
<p><strong>案例</strong>：智能手机组件的使用场景，从通信延迟和处理开销的角度衡量和分析ADTN的性能</p>
<p>ADTN 中间件能够以非常有效的方式丰富数据包，同时提供统一的标准数据层，另一方面，考虑到网络的当前状态，能够以应用程序驱动的方式动态管理流量。</p>
<p><strong>未来研究点</strong>：通过采用语法丰富（semantically-enriched）的解决方案，使开发（半）自动。此外，当几个相互竞争的工业应用可能共存（出现相互冲突的要求）时，网络规则可能难以以安全的方式执行。</p>
<h4 id="digital-twin-enabled-intelligent-distributed-clock-synchronization-in-industrial-iot-systems"><a class="markdownIt-Anchor" href="#digital-twin-enabled-intelligent-distributed-clock-synchronization-in-industrial-iot-systems"></a> Digital-Twin-Enabled Intelligent Distributed Clock Synchronization in Industrial IoT Systems</h4>
<p><strong>工业物联网系统中的支持数字孪生的智能分布式时钟同步 </strong> <strong>DOI:</strong> <a href="https://doi.org/10.1109/JIOT.2020.3029131">10.1109/JIOT.2020.3029131</a></p>
<p>【物联网领域，使用数字孪生改进时钟同步问题】</p>
<p>基于支持数字孪生的模型来实现智能时钟同步，以减少快速变化的工业物联网环境中分布式同步相关的资源消耗。</p>
<p>新的同步挑战：使用各种通信标准的分布式节点的不确定延迟（nondeterministic latencies）和跨标准同步（cross-standard synchronization）。</p>
<p>传统同步技术（PTP、FTSP）：频繁校准目标时钟，完全依赖于时间戳的定期交换，需要更高的同步频率来保持时钟的一致性，从而随着网络资源消耗的增加而降低同步效率。</p>
<p>数字孪生：基于情况的分布式时钟同步。</p>
<ol>
<li>建立边缘云协作系统架构（edge-cloud collaborative system architecture），以建立数字孪生模型（Digital-Twin-Enabled clock synchronization (DTCS)）。每个本地设备生成的数据在边缘设备上处理，极大程度减少网络延迟对实时分析的影响。<br />
<img src="https://i.loli.net/2021/07/19/qAwhnPbcK7sZ3yO.png" alt="image.png" /></li>
<li>通过研究从分布式设备上传的连续时间信息，对每个时钟的特征进行建模，在此基础上建立数字孪生副本（counterpart），以预测不同操作环境下每个节点的时钟偏差（the clock skew），在分布式时钟同步过程中减少网络资源的消耗，提高了时钟的精度。</li>
</ol>
<h4 id="adaptive-federated-learning-and-digital-twin-for-industrial-internet-of-things"><a class="markdownIt-Anchor" href="#adaptive-federated-learning-and-digital-twin-for-industrial-internet-of-things"></a> ✨ Adaptive Federated Learning and Digital Twin for Industrial Internet of Things</h4>
<p><strong>工业物联网的自适应性联邦学习和数字孪生 </strong><strong>DOI:</strong> <a href="https://doi.org/10.1109/TII.2020.3034674">10.1109/TII.2020.3034674</a></p>
<p>【机器学习领域，数字孪生作为数据获取，服务于机器学习性能优化，机器学习框架提出】</p>
<p>用一种赋能工业物联网的数字孪生的新体系结构，其中数字孪生捕获工业设备的特征，以帮助联邦学习。注意到数字孪生可能会带来偏离设备状态实际值的估计，联邦学习中提出了基于信任的聚合来缓解这种偏离的影响。我们基于Lyapunov动态赤字队列和深度强化学习(DRL)自适应调整联邦学习的聚集频率，以提高资源约束下的学习性能。为了进一步适应工业物联网的异构性，提出了一种基于聚类的异步联邦学习框架。数值结果表明，该框架在学习精度、收敛性和节能方面均优于基准。</p>
<h4 id="a-digital-twin-based-industrial-automation-and-control-system-security-architecture"><a class="markdownIt-Anchor" href="#a-digital-twin-based-industrial-automation-and-control-system-security-architecture"></a> A Digital Twin Based Industrial Automation and Control System Security Architecture</h4>
<p><strong>基于数字孪生的工业自动化和控制系统安全架构 </strong><strong>DOI:</strong> <a href="https://doi.org/10.1109/TII.2019.2938885">10.1109/TII.2019.2938885</a></p>
<p>【网络安全领域，工业控制中的基于数字孪生的网络安全架构】</p>
<p>讨论了如何使用数字孪生模型和相应的安全架构来允许数据共享和控制的关键流程。<br />
1)介绍了一个数字孪生IACS对手模型，并确定了该模型的安全需求。<br />
2)提出了一种新的基于数字孪生的安全体系结构，包括一种新的状态复制模型。<br />
3)我们评估了所提出的状态复制模型的安全性，并提出了一个概念验证实现的可编程逻辑控制器(PLC)软件升级案例，包括性能数字。</p>
<p>后续工作：性能评估，入侵检测，访问控制，对完整系统设计的安全性进行正式分析，安全分析服务。</p>
<h3 id="4-数字孪生模型的实际应用智慧城市-物联网项目"><a class="markdownIt-Anchor" href="#4-数字孪生模型的实际应用智慧城市-物联网项目"></a> 4 数字孪生模型的实际应用（智慧城市、物联网项目）</h3>
<h4 id="construction-of-a-digital-twin-framework-using-free-and-open-source-software-programs"><a class="markdownIt-Anchor" href="#construction-of-a-digital-twin-framework-using-free-and-open-source-software-programs"></a> Construction of a Digital Twin Framework using Free and Open-Source Software Programs</h4>
<p><strong>使用免费和开源软件构建数字孪生框架</strong> <strong>DOI:</strong> <a href="https://doi.org/10.1109/MIC.2021.3051798">10.1109/MIC.2021.3051798</a></p>
<p>【工业领域，偏实战，数字孪生建模与实现】</p>
<p>完全使用免费和开源软件程序构建的便携式桌面尺寸温度控制系统。</p>
<ol>
<li>通过使用RPA和 PLC 程序等工具，整个过程实现了自动化。</li>
</ol>
<ul>
<li>带有树莓派模块的OpenPLC 硬件</li>
<li>Eclipse Ditto，通过提供 Web API 来简化与连接设备的工作</li>
<li>自动化框架：
<ul>
<li>模拟模型<br />
<img src="https://i.loli.net/2021/07/19/nEk8ml6DyXxoKzR.png" alt="image.png" /></li>
<li>物理模型和数字模型之间的通信: 将 Eclipse Ditto 服务器的实时数据下载到本地 PC</li>
<li>从数字系统将数据发送回物理系统</li>
</ul>
</li>
<li>系统架构：<br />
<img src="https://i.loli.net/2021/07/19/VPALweBTc9ODnvX.png" alt="image.png" /></li>
</ul>
<ol start="2">
<li>为温度控制系统构建了数学模型。</li>
<li>比较物理模型和数学模型的数据，并分析假设方案，来预测和防止物理系统的潜在故障。</li>
<li>还创建了一个模拟模型来可视化结果。</li>
</ol>
<h4 id="duet-a-framework-for-building-secure-and-trusted-digital-twins-of-smart-cities"><a class="markdownIt-Anchor" href="#duet-a-framework-for-building-secure-and-trusted-digital-twins-of-smart-cities"></a> DUET: A Framework for Building Secure and Trusted Digital Twins of Smart Cities</h4>
<p><strong>DUET：构建智能城市的安全可靠的数字孪生框架</strong> <strong>DOI:</strong> <a href="https://doi.org/10.1109/MIC.2021.3060962">10.1109/MIC.2021.3060962</a></p>
<p>【实际应用，智慧城市领域】</p>
<p>一个模型、数据和模拟的容器，便于从各种静态、历史、开放和实时数据源传输信息，将其转化为智能城市决策者易于消化的输出和见解。</p>
<p><img src="https://i.loli.net/2021/07/19/1dXevpOisu7KbQC.png" alt="image.png" /></p>
]]></content>
      <categories>
        <category>文献阅读</category>
      </categories>
      <tags>
        <tag>数字孪生</tag>
        <tag>文献阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>华为云AI俱乐部行政部2021招新任务书</title>
    <url>/2021/05/14/hwclub2021AD/</url>
    <content><![CDATA[<a id="more"></a>
<p><img src="https://repo.live.holgerbest.top/img/hwxz2021.png" alt="招新文案" /></p>
<blockquote>
<p>感谢你参与华为云AI俱乐部行政部成员选拔，在开始之前，请先阅读以下注意事项：</p>
<ol>
<li>题目限单人完成，可以任意查阅资料，<strong>但是如果你借鉴了他人的智慧，请给出参考</strong>。</li>
<li>如果你对题目内容有任何疑惑，敬请发邮件咨询：<a href="mailto:hzhang19@stu.suda.edu.cn">hzhang19@stu.suda.edu.cn</a>。</li>
<li>解决方案中请指明选定的场景。如果多做，<strong>我们只关注你解决的第一个场景</strong>。</li>
<li>解决方案不限字数与形式，完成任务的方式不会区分正确与否。</li>
<li>解决方案提交截至时间：<strong>2021年5月19日20:00（以邮件时间戳为准）</strong>。</li>
<li>提交答卷前，请在《申请表》（链接：<a href="https://www.wjx.top/vm/PuAH9HF.aspx">https://www.wjx.top/vm/PuAH9HF.aspx</a>，或扫描下方二维码）中<strong>填写并提交你的个人信息</strong>。<br />
<img src="https://repo.live.holgerbest.top/img/hw2021sqb.png" alt="二维码" /></li>
<li>请将你的解决方案形成一份<strong>书面文档</strong>（Word或PDF），并于截止日期前以<strong>附件</strong>的形式提交至邮箱<a href="mailto:hzhang19@stu.suda.edu.cn">hzhang19@stu.suda.edu.cn</a>，主题请注明“<strong>华为云AI俱乐部行政部任务解决方案</strong>”，正文需包含你的<strong>姓名、学号、专业、联系方式（手机、QQ等）</strong>。</li>
</ol>
</blockquote>
<p>欢迎你加入苏州大学华为云AI俱乐部并选择了行政部。<strong>首先，简单地介绍一下你自己吧！</strong></p>
<p>行政部是协调沟通俱乐部内各部门，调动社团成员积极性和活跃度，制定规章制度，收集整理档案，负责组织人员培训与考核工作的“小管家”。一个俱乐部的发展离不开各个部门的通力合作，每个部门都在不同的岗位上为俱乐部的发展贡献自己的力量，行政部则充当着联系者和组织者的身份。</p>
<p>接下来有三个场景，请从中选择<strong>一个</strong>并完成相应的任务。</p>
<p><strong>场景A</strong>  今年是苏州大学华为云AI俱乐部的创始年，俱乐部的筹备与建立需要完善的制度作为基础。在俱乐部筹备讨论会中，我们就俱乐部成员管理方面进行了讨论，并对于调动社团成员积极性和活跃度方面提出了积分制，即参与活动累计积分的方式作为激励手段。你是如何看待这种激励方式的？如果是你来设计一种调动社团成员参与活动的积极性和活跃度的方式，你会如何设计？如果你有调动社团成员积极性和活跃度以及组织人员培训与考核工作这方面的经验，你也可以分享一下你的解决方案。</p>
<p><strong>场景B</strong>  俱乐部成立后将举办一系列的活动，其中有一场技术沙龙，我们可能会邀请到华为技术大牛、技术组的同学做技术分享。作为行政部的一员，我们需要负责与俱乐部各部门进行沟通和对接，以确定时间、地点、与会人员等信息，并协调各部门促进这场活动的圆满完成。请参照附录（详见<a href="https://get.holgerbest.top/data/hw2021ad.pdf">PDF版任务书</a>中附录部分）中给出的俱乐部的组织架构与职能，简单阐述一下你是如何与俱乐部各部门沟通对接的，以及这一过程中需要注意的问题。（与华为方面的对接假设由俱乐部核心成员完成，假设这方面的消息你可以从部长那里获取到。）如果你有协调沟通这一方面的经验，你也可以分享一下你的解决方案。</p>
<p><strong>场景C</strong>  行政部还有一个工作是档案的收集管理，来记录俱乐部的发展轨迹，保存好俱乐部的成长材料，留下每位成员的成长印记。请简单谈一谈你是如何看待无纸化办公与办公自动化的使用。如果有大量文件需要收集归类整理，你如何来简化办公流程，提高办公效率？如果你使用或设计/开发过一些办公自动化的工具，你也可以谈一谈你的经验。</p>
<p>期待着在华为云AI俱乐部行政部与你相见！</p>
<p>命题人：华为云AI俱乐部行政部 部门负责人 张昊</p>
<p>2021年5月14日</p>
<p>附件：</p>
<ul>
<li><a href="https://get.holgerbest.top/data/hw2021ad.pdf">PDF版任务书</a></li>
</ul>
]]></content>
      <categories>
        <category>华为云AI俱乐部</category>
      </categories>
      <tags>
        <tag>华为云AI俱乐部行政部</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】详解联邦学习</title>
    <url>/2021/07/12/federated-learning/</url>
    <content><![CDATA[<p>本质：联邦学习本质上是一种分布式机器学习技术，或机器学习框架。</p>
<p>目标：联邦学习的目标是在保证数据隐私安全及合法合规的基础上，实现共同建模，提升AI模型的效果。</p>
<p>前身：联邦学习最早在 2016 年由谷歌提出，原本用于解决安卓手机终端用户在本地更新模型的问题；</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>联邦学习</tag>
      </tags>
  </entry>
  <entry>
    <title>如何评价2021.06.28 Java选修课期末上机试题？</title>
    <url>/2021/06/29/java2021ks/</url>
    <content><![CDATA[<p>先放个题目哈：<a href="https://get.holgerbest.top/data/java2021programming.pdf">java2021programming.pdf</a></p>
<blockquote>
<p>首先要吐槽两个点：一个是机房的eclipse太难用了（为什么会有这么鸡肋的 Code Assistant），还有一个就是都1202年了还有人在学swing。</p>
</blockquote>
<p>怎么说呢，期末第一门考试就来了个下马威（X）</p>
<p>直到11点机房里还是一片敲击键盘的声音…… 总体来说比去年要的工作量大一点，两个小时紧打紧敲完了，不过有不少同学都没写完。</p>
<p>凑巧的是文本域和下拉列表之前大作业里面用过（没错，大作业也是写swing），开卷考试准备的代码模板有个大概，算是没啥阻碍地写了过来~~，除了时间有点不够用~~。</p>
<p><s>还有是10分钟做完选择题之后一直没发题目，坐那干等；最后我都提交了才通知延长15分钟，有点搞人心态（</s></p>
<p>最后附上将近俩小时的成果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 文件路径</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String inFile = System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + File.separator + <span class="string">&quot;product.txt&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String outFile = System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + File.separator + <span class="string">&quot;result.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 创建文件对象</span></span><br><span class="line">		File in = <span class="keyword">new</span> File(inFile);</span><br><span class="line">		File out = <span class="keyword">new</span> File(outFile);</span><br><span class="line">		<span class="keyword">new</span> FrmProduct(in, out);  <span class="comment">// 启动GUI</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FrmProduct.java</span></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemListener;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrmProduct</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> JRadioButton pidBtn; <span class="comment">// 产品编号</span></span><br><span class="line">	<span class="keyword">private</span> JRadioButton numBtn; <span class="comment">// 产品库存</span></span><br><span class="line">	<span class="keyword">private</span> ButtonGroup select; <span class="comment">// 产品编号 or 产品库存</span></span><br><span class="line">	<span class="keyword">private</span> JComboBox&lt;String&gt; typeBox; <span class="comment">// 类型</span></span><br><span class="line">	<span class="keyword">private</span> JTextArea jta;  <span class="comment">// 文本域</span></span><br><span class="line">	<span class="keyword">private</span> JButton saveBtn;  <span class="comment">// 保存</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> ArrayList&lt;Product&gt; list, show;  <span class="comment">// 数据</span></span><br><span class="line">	<span class="keyword">private</span> File saveTo;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FrmProduct</span><span class="params">(File from, File to)</span> </span>&#123;</span><br><span class="line">		pidBtn = <span class="keyword">new</span> JRadioButton(<span class="string">&quot;产品编号&quot;</span>);</span><br><span class="line">		numBtn = <span class="keyword">new</span> JRadioButton(<span class="string">&quot;产品库存&quot;</span>);</span><br><span class="line">		select = <span class="keyword">new</span> ButtonGroup();</span><br><span class="line">		select.add(pidBtn);</span><br><span class="line">		select.add(numBtn);</span><br><span class="line">		typeBox = <span class="keyword">new</span> JComboBox&lt;&gt;(Product.TYPES);</span><br><span class="line">		jta = <span class="keyword">new</span> JTextArea();</span><br><span class="line">		saveBtn = <span class="keyword">new</span> JButton(<span class="string">&quot;保存&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		saveTo = to;		</span><br><span class="line">		list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		show = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		Container content = getContentPane();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 顶部</span></span><br><span class="line">		Box topLine = Box.createHorizontalBox();</span><br><span class="line">		topLine.add(Box.createHorizontalStrut(<span class="number">10</span>));</span><br><span class="line">		JLabel label1 = <span class="keyword">new</span> JLabel(<span class="string">&quot;排序方式:&quot;</span>);</span><br><span class="line">		topLine.add(label1);</span><br><span class="line">		topLine.add(Box.createHorizontalStrut(<span class="number">10</span>));</span><br><span class="line">		topLine.add(pidBtn);</span><br><span class="line">		topLine.add(Box.createHorizontalStrut(<span class="number">10</span>));</span><br><span class="line">		topLine.add(numBtn);</span><br><span class="line">		topLine.add(Box.createHorizontalGlue());</span><br><span class="line">		JLabel label2 = <span class="keyword">new</span> JLabel(<span class="string">&quot;选择类型:&quot;</span>);</span><br><span class="line">		topLine.add(label2);</span><br><span class="line">		topLine.add(Box.createHorizontalStrut(<span class="number">10</span>));</span><br><span class="line">		topLine.add(typeBox);</span><br><span class="line">		topLine.add(Box.createHorizontalStrut(<span class="number">10</span>));</span><br><span class="line">		content.add(topLine, BorderLayout.NORTH);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 显示滚动条的文本域</span></span><br><span class="line">		JScrollPane jsp = <span class="keyword">new</span> JScrollPane(jta);</span><br><span class="line">		jsp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);</span><br><span class="line">		content.add(jsp, BorderLayout.CENTER);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 确认按钮</span></span><br><span class="line">		Box buttomLine = Box.createHorizontalBox();</span><br><span class="line">		buttomLine.add(Box.createHorizontalGlue());</span><br><span class="line">		buttomLine.add(saveBtn);</span><br><span class="line">		buttomLine.add(Box.createHorizontalGlue());</span><br><span class="line">		content.add(buttomLine, BorderLayout.SOUTH);</span><br><span class="line">		</span><br><span class="line">		setSize(<span class="number">500</span>, <span class="number">400</span>);</span><br><span class="line">		setTitle(<span class="string">&quot;查看产品&quot;</span>);</span><br><span class="line">		setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">		</span><br><span class="line">		loadData(from);  <span class="comment">// 加载数据</span></span><br><span class="line">		initListener();  <span class="comment">// 初始化监听器</span></span><br><span class="line">		</span><br><span class="line">		pidBtn.setSelected(<span class="keyword">true</span>);</span><br><span class="line">		typeBox.setSelectedIndex(<span class="number">0</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 显示数据</span></span><br><span class="line">		sortShown();</span><br><span class="line">		setToShow();</span><br><span class="line">		</span><br><span class="line">		setVisible(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加载数据</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">			String aline = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">null</span> != (aline = br.readLine())) &#123;</span><br><span class="line">				<span class="keyword">if</span> (aline.trim().isEmpty()) &#123;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				Product p = <span class="keyword">new</span> Product(aline);</span><br><span class="line">				list.add(p);</span><br><span class="line">				show.add(p);</span><br><span class="line">			&#125;</span><br><span class="line">			br.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">			System.err.println(e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化监听器</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		ItemListener litener1 = <span class="keyword">new</span> SortListener();</span><br><span class="line">		pidBtn.addItemListener(litener1);</span><br><span class="line">		numBtn.addItemListener(litener1);</span><br><span class="line">		ItemListener listener2 = <span class="keyword">new</span> FilterListener();</span><br><span class="line">		typeBox.addItemListener(listener2);</span><br><span class="line">		saveBtn.addActionListener(<span class="keyword">new</span> ClickListener());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 显示</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setToShow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		<span class="keyword">for</span> (Product p : show) &#123;</span><br><span class="line">			str.append(p.toString());</span><br><span class="line">			str.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		jta.setText(str.toString());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 显示数据</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortShown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (pidBtn.isSelected()) &#123;</span><br><span class="line">			Collections.sort(show, <span class="keyword">new</span> ProductIdComparator());<span class="comment">// 按照id排序的比较器</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (numBtn.isSelected()) &#123;</span><br><span class="line">			Collections.sort(show, <span class="keyword">new</span> ProductNumberComparator());<span class="comment">// 按照库存排序的比较器</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 排序选项监听器</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">SortListener</span> <span class="keyword">implements</span> <span class="title">ItemListener</span> </span>&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemStateChanged</span><span class="params">(ItemEvent e)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (e.getSource() == pidBtn) &#123;</span><br><span class="line">				sortShown();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getSource() == numBtn) &#123;</span><br><span class="line">				sortShown();</span><br><span class="line">			&#125;</span><br><span class="line">			setToShow();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 类型监听</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">FilterListener</span> <span class="keyword">implements</span> <span class="title">ItemListener</span> </span>&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemStateChanged</span><span class="params">(ItemEvent e)</span> </span>&#123;</span><br><span class="line">			String selected = (String) typeBox.getSelectedItem();</span><br><span class="line">			show.clear();</span><br><span class="line">			<span class="keyword">for</span> (Product p : list) &#123;</span><br><span class="line">				<span class="keyword">if</span> (selected.equals(<span class="string">&quot;全部&quot;</span>) || p.getType().equals(selected)) &#123;</span><br><span class="line">					show.add(p);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			sortShown();</span><br><span class="line">			setToShow();			</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 点击监听</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">ClickListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent arg0)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				BufferedWriter br = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(saveTo), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">				<span class="keyword">for</span> (Product p : show) &#123;</span><br><span class="line">					br.write(p.toString());</span><br><span class="line">					br.newLine();</span><br><span class="line">				&#125;</span><br><span class="line">				br.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">				System.err.println(e.getMessage());</span><br><span class="line">			&#125;</span><br><span class="line">			JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">&quot;文件成功保存&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Product.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String[] TYPES = &#123; <span class="string">&quot;全部&quot;</span>, <span class="string">&quot;电脑&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;书籍&quot;</span> &#125;; <span class="comment">// 所有类型</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String id;  <span class="comment">//产品编号</span></span><br><span class="line">	<span class="keyword">private</span> String name; <span class="comment">// 名称</span></span><br><span class="line">	<span class="keyword">private</span> String type; <span class="comment">// 类型</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> price; <span class="comment">// 价格</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> number; <span class="comment">// 库存</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">		String[] args = line.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">		id = args[<span class="number">0</span>];</span><br><span class="line">		name = args[<span class="number">1</span>];</span><br><span class="line">		type = args[<span class="number">2</span>];</span><br><span class="line">		price = Double.parseDouble(args[<span class="number">3</span>]);</span><br><span class="line">		number = Integer.parseInt(args[<span class="number">4</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id + <span class="string">&quot;;&quot;</span> + name + <span class="string">&quot;;&quot;</span> + type + <span class="string">&quot;;&quot;</span> + price + <span class="string">&quot;;&quot;</span> + number;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> type;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> number;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProductIdComparator.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照id排序的比较器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductIdComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Product</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Product arg0, Product arg1)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> arg0.getId().compareTo(arg1.getId());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProductNumberComparator.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照库存排序的比较器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductNumberComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Product</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Product arg0, Product arg1)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> arg0.getNumber() - arg1.getNumber();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果和题目要求差不多，就不放出来了。</p>
<blockquote>
<p>最后一条建议，Java这门课的重点可以调整一下，以适应当前主流的开发。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络-期末复习提纲</title>
    <url>/2022/01/10/jiwang/</url>
    <content><![CDATA[

	<div class="row">
    <embed src="https://repo.live.holgerbest.top/pdf/jwtg.pdf" width="100%" height="550" type="application/pdf">
	</div>



<blockquote>
<p>仅供参考。如有错误欢迎指出。</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记02：用户登录和联机手册的查阅</title>
    <url>/2021/01/18/linux-02-user-man/</url>
    <content><![CDATA[<h1 id="普通用户和超级用户"><a class="markdownIt-Anchor" href="#普通用户和超级用户"></a> 普通用户和超级用户</h1>
<p><strong>root用户（超级用户）</strong>：root<strong>不受权限的制约</strong>，可随意修改和删除文件；误删重要文件可能带来严重后果。</p>
<div class="note warning flat"><p>通常不要在root下操作，一般应该创建普通用户来操作，需要做特殊管理才回到root用户。</p>
</div>
<h2 id="创建新用户"><a class="markdownIt-Anchor" href="#创建新用户"></a> 创建新用户</h2>
<p>由root用户创建（<strong>useradd</strong>命令），用户信息存放在<code>/etc/passwd</code>文件中，包括<strong>用户名</strong>和<strong>用户ID</strong>(整数)，以及<strong>Home目录</strong>，<strong>登录shell</strong>。</p>
<p><strong>登录shell</strong>：一般为bash，也可以选其他shell，其他系统程序，甚至自设计的程序。</p>
<ul>
<li>用户可以从普通终端或者网络虚拟终端登录进入系统</li>
</ul>
<h3 id="useradd-命令"><a class="markdownIt-Anchor" href="#useradd-命令"></a> useradd 命令</h3>
<p>Linux useradd 命令用于建立用户帐号。</p>
<p>useradd 可用来建立用户帐号。帐号建好之后，再用 passwd 设定帐号的密码。</p>
<p>可用 userdel 删除帐号。</p>
<p><strong>语法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd [-mMnr][-c &lt;备注&gt;][-d &lt;登入目录&gt;][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-s &lt;shell&gt;][-u &lt;uid&gt;][用户帐号]</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -D [-b][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-s &lt;shell&gt;]</span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul>
<li><code>-c&lt;备注&gt;</code> 　加上备注文字。备注文字会保存在passwd的备注栏位中。</li>
<li><code>-d&lt;登入目录&gt;</code> 　指定用户登入时的起始目录。</li>
<li><code>-D</code>　变更预设值。</li>
<li><code>-e&lt;有效期限&gt;</code> 　指定帐号的有效期限。</li>
<li><code>-f&lt;缓冲天数&gt;</code> 　指定在密码过期后多少天即关闭该帐号。</li>
<li><code>-g&lt;群组&gt;</code> 　指定用户所属的群组。</li>
<li><code>-G&lt;群组&gt;</code> 　指定用户所属的附加群组。</li>
<li><code>-m</code> 　自动建立用户的登入目录。</li>
<li><code>-M</code>　 不要自动建立用户的登入目录。</li>
<li><code>-n</code> 　取消建立以用户名称为名的群组．</li>
<li><code>-r</code>　建立系统帐号。</li>
<li><code>-s&lt;shell&gt;</code>　 　指定用户登入后所使用的shell。</li>
<li><code>-u&lt;uid&gt;</code> 　指定用户ID。</li>
</ul>
<h1 id="使用linux"><a class="markdownIt-Anchor" href="#使用linux"></a> 使用Linux</h1>
<h2 id="shell的提示符"><a class="markdownIt-Anchor" href="#shell的提示符"></a> Shell的提示符</h2>
<ul>
<li>登录成功后出现shell提示符</li>
<li><code>$</code> Bourne Shell系列(sh，ksh，bash)</li>
<li><code>#</code> 当前用户为超级用户root**（操作时要小心）**</li>
</ul>
<p>出现shell提示符以后就可输入系统命令</p>
<blockquote>
<p>与Windows不同的是组成命令的<strong>英文字母大小写敏感</strong></p>
</blockquote>
<h2 id="基本的linux命令"><a class="markdownIt-Anchor" href="#基本的linux命令"></a> 基本的Linux命令</h2>
<blockquote>
<p>Linux命令往往有很多选项和复杂的功能，通过man查阅联机手册</p>
</blockquote>
<h3 id="man查阅联机手册"><a class="markdownIt-Anchor" href="#man查阅联机手册"></a> man：查阅联机手册</h3>
<blockquote>
<p>取自manual的前三个字母，最常用命令一般由两到三个字母构成</p>
</blockquote>
<p><strong>联机手册内容</strong></p>
<ul>
<li>各种命令的说明书</li>
<li>系统调用的使用手册</li>
<li>C语言和其它语言的库函数手册</li>
<li>系统配置文件格式</li>
</ul>
<ol>
<li>分页器：q-退出，空格-下一页，上下箭头-上移下移</li>
<li>用法：
<ol>
<li><code>man name</code></li>
<li><code>man section name</code>  其中<code>section</code>为章节编号：1命令 2系统调用 3库函数 5配置文件</li>
<li><code>man -k regexp</code>  列出关键字(keyword)与正则表达式<code>regexp</code>匹配的手册项目录</li>
</ol>
</li>
</ol>
<p>手册页内容</p>
<ul>
<li>列出基本功能和语法</li>
<li>对于C语言的函数调用，列出头文件和链接函数库</li>
<li>功能说明</li>
<li>SEE ALSO（交叉参考）：有关的其它项目的名字和章节号</li>
</ul>
<h3 id="date日期和时间"><a class="markdownIt-Anchor" href="#date日期和时间"></a> date：日期和时间</h3>
<p>Linux date命令可以用来显示或设定系统的日期与时间，在显示方面，使用者可以设定欲显示的格式，格式设定为<strong>一个加号后接数个标记</strong>，其中可用的标记列表如下：</p>
<p>时间方面：</p>
<ul>
<li><code>%</code>: 印出 %</li>
<li><code>%n</code>: 下一行</li>
<li><code>%t</code>: 跳格</li>
<li><code>%H</code>: 小时(00…23)</li>
<li><code>%I</code>: 小时(01…12)</li>
<li><code>%k</code>: 小时(0…23)</li>
<li><code>%l</code>: 小时(1…12)</li>
<li><code>%M</code>: 分钟(00…59)</li>
<li><code>%p</code>: 显示本地 AM 或 PM</li>
<li><code>%r</code>: 直接显示时间 (12 小时制，格式为 <code>hh:mm:ss [AP]M</code>)</li>
<li><code>%s</code>: 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数</li>
<li><code>%S</code>: 秒(00…61)</li>
<li><code>%T</code>: 直接显示时间 (24 小时制)</li>
<li><code>%X</code>: 相当于 %H:%M:%S</li>
<li><code>%Z</code>: 显示时区</li>
</ul>
<p>日期方面：</p>
<ul>
<li><code>%a</code>: 星期几 (Sun…Sat)</li>
<li><code>%A</code>: 星期几 (Sunday…Saturday)</li>
<li><code>%b</code> <code>%h</code>: 月份 (Jan…Dec)</li>
<li><code>%B</code>: 月份 (January…December)</li>
<li><code>%c</code>: 直接显示日期与时间</li>
<li><code>%d</code>: 日 (01…31)</li>
<li><code>%D</code>: 直接显示日期 (mm/dd/yy)</li>
<li><code>%j</code>: 一年中的第几天 (001…366)</li>
<li><code>%m</code>: 月份 (01…12)</li>
<li><code>%U</code>: 一年中的第几周 (00…53) (以 Sunday 为一周的第一天的情形)</li>
<li><code>%w</code>: 一周中的第几天 (0…6)</li>
<li><code>%W</code>: 一年中的第几周 (00…53) (以 Monday 为一周的第一天的情形)</li>
<li><code>%x</code>: 直接显示日期 (mm/dd/yy)</li>
<li><code>%y</code>: 年份的最后两位数字 (00.99)</li>
<li><code>%Y</code>: 完整年份 (0000…9999)</li>
</ul>
<p>若是不以加号作为开头，则表示要设定时间，而时间格式为 <code>MMDDhhmm[[CC]YY][.ss]</code>，其中 MM 为月份，DD 为日，hh 为小时，mm 为分钟，CC 为年份前两位数字，YY 为年份后两位数字，ss 为秒数。</p>
<p>当您不希望出现无意义的 0 时(比如说 1999/03/07)，则可以在标记中插入 - 符号，比如说 <code>date '+%-H:%-M:%-S'</code> 会把时分秒中无意义的 0 给去掉，像是原本的 08:09:04 会变为 8:9:4。另外，只有取得权限者(比如说 root)才能设定系统时间。</p>
<p>当您以 root 身分更改了系统时间之后，请记得以 <code>clock -w</code> 来将系统时间写入 CMOS 中，这样下次重新开机时系统时间才会持续抱持最新的正确值。</p>
<p><strong>通过NTP协议校对系统时间</strong>：命令ntpdate</p>
<ul>
<li><code>ntpdate 0.pool.ntp.org</code> (设置时间，必须root用户)</li>
<li><code>ntpdate –q 0.pool.ntp.org</code> (查询时间，普通用户也可以)</li>
</ul>
<p><strong>语法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date [-u] [-d datestr] [-s datestr] [--utc] [--universal] [--date=datestr] [--<span class="built_in">set</span>=datestr] [--<span class="built_in">help</span>] [--version] [+FORMAT] [MMDDhhmm[[CC]YY][.ss]]</span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul>
<li><code>-d datestr</code> : 显示 datestr 中所设定的时间 (非系统时间)</li>
<li><code>--help</code> : 显示辅助讯息</li>
<li><code>-s datestr</code> : 将系统时间设为 datestr 中所设定的时间</li>
<li><code>-u</code>: 显示目前的格林威治时间</li>
<li><code>--version</code>: 显示版本编号</li>
</ul>
<h3 id="cal日历"><a class="markdownIt-Anchor" href="#cal日历"></a> cal：日历</h3>
<p>Linux cal命令用于显示当前日历（公历，或称阳历），或者指定日期的日历。</p>
<p><strong>语法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cal [参数][月份][年份]</span><br></pre></td></tr></table></figure>
<h3 id="bc计算器"><a class="markdownIt-Anchor" href="#bc计算器"></a> bc：计算器</h3>
<p>Linux bc 命令是任意精度计算器语言，通常在Linux下当计算器用。支持变量、函数，条件和循环等编程功能（类似C语言的小编程语言)。</p>
<p>它类似基本的计算器, 使用这个计算器可以做基本的数学运算。</p>
<p><strong>常用的运算：</strong></p>
<ul>
<li>+ 加法</li>
<li>- 减法</li>
<li>* 乘法</li>
<li>/ 除法</li>
<li>^ 指数</li>
<li>% 余数</li>
</ul>
<p><strong>语法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bc (选项)(参数)</span><br></pre></td></tr></table></figure>
<p><strong>选项值</strong>：</p>
<ul>
<li><code>-i</code>：强制进入交互式模式；</li>
<li><code>-l</code>：定义使用的标准数学库;</li>
<li><code>-w</code>：对POSIX bc的扩展给出警告信息；</li>
<li><code>-q</code>：不打印正常的GNU bc环境信息；</li>
<li><code>-v</code>：显示指令版本信息；</li>
<li><code>-h</code>：显示指令的帮助信息。</li>
</ul>
<p><strong>参数</strong>：文件，指定包含计算任务的文件。</p>
<p>缺省精度：</p>
<ul>
<li><code>bc</code> 缺省精度为小数点后0位</li>
<li><code>bc -l</code> 缺省精度为小数点后20位</li>
<li>可以通过设置scale自行决定精度（小数点位数）<code>scale=10000</code>, <code>s(1.0)</code></li>
</ul>
<h3 id="passwd修改口令"><a class="markdownIt-Anchor" href="#passwd修改口令"></a> passwd：修改口令</h3>
<p>Linux passwd命令用来更改使用者的密码。</p>
<p><strong>语法</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd [-k] [-l] [-u [-f]] [-d] [-S] [username]</span><br></pre></td></tr></table></figure>
<p><strong>必要参数</strong>：</p>
<ul>
<li>-d 删除密码</li>
<li>-f 强迫用户下次登录时必须修改口令</li>
<li>-w 口令要到期提前警告的天数</li>
<li>-k 更新只能发送在过期之后</li>
<li>-l 停止账号使用</li>
<li>-S 显示密码信息</li>
<li>-u 启用已被停止的账户</li>
<li>-x 指定口令最长存活期</li>
<li>-g 修改群组密码</li>
<li>-m 指定口令最短存活期</li>
<li>-M 指定口令最长存活期</li>
<li>-i 口令过期后多少天停用账户</li>
</ul>
<p><strong>普通用户</strong>：使用passwd命令更改自己的口令，更改前系统先验证原来的口令</p>
<p><strong>root用户</strong>：修改口令之前不验证旧的口令。可修改自己的口令，还可强迫设置其它用户口令。</p>
<ul>
<li>
<p>超级用户无法读取其它用户的口令；当普通用户忘记口令时，可请求超级用户强设口令。</p>
</li>
<li>
<p>修改超级用户root的口令时要特别注意。</p>
</li>
</ul>
<p><strong>口令信息的保存和验证</strong>：不存明码口令</p>
<img src="https://repo.live.holgerbest.top/img/FLPb9MogdNwKqV2.png" alt="口令信息的保存和验证" style="zoom:80%;" />
<p>安全性：无法由哈希值倒推出口令原文</p>
]]></content>
      <categories>
        <category>Linux笔记</category>
      </categories>
      <tags>
        <tag>Linux用户</tag>
        <tag>Linux命令</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记01：字符终端</title>
    <url>/2021/01/18/linux-01-terminal/</url>
    <content><![CDATA[<h1 id="终端terminal"><a class="markdownIt-Anchor" href="#终端terminal"></a> 终端(Terminal)</h1>
<ul>
<li>UNIX/Linux是多用户系统
<ul>
<li>主机连接多台字符终端</li>
<li>字符终端作为交互式输入输出设备</li>
</ul>
</li>
<li>终端的构成
<ul>
<li>键盘</li>
<li>显示器</li>
<li>RS232串行通信接口</li>
</ul>
</li>
<li>字符终端的历史
<ul>
<li>英文打字机 typewriter</li>
<li>电传打字机 teletypewriter(前缀tele-)，简写tty</li>
<li>字符终端，以屏幕代替卷纸打印机(仍称做tty设备）</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>主机与终端的连接</strong></p>
<p>主机中的串口卡（硬件）引出多个RS232串口，每个RS232接口通过电缆（3芯或更多芯）连接一台终端（同时可以有很多终端同时进入系统）。RS232电缆的长度限制：早期要求小于10米，现在可达百米。</p>
</blockquote>
<h1 id="终端与主机的功能分工"><a class="markdownIt-Anchor" href="#终端与主机的功能分工"></a> 终端与主机的功能分工</h1>
<p><strong>终端</strong>：主机的<strong>输入和输出设备</strong>。终端通过电缆把用户的按键信息送到主机，把主机发来的信息在屏幕上显示。</p>
<p><strong>主机</strong>：程序和数据的<strong>存储及处理</strong>。数据及程序存放在主机的硬盘上，程序的运行也都由主机内的CPU占用主机内存来完成。</p>
<img src="https://repo.live.holgerbest.top/img/aWqUYRAFEvblO7p.png" alt="image.png" style="zoom:50%;" />
<h2 id="行律与驱动程序"><a class="markdownIt-Anchor" href="#行律与驱动程序"></a> 行律与驱动程序</h2>
<ul>
<li>驱动程序
<ul>
<li>不同的硬件需要不同的驱动程序</li>
<li>与行律模块的接口：<strong>上行和下行字符流</strong></li>
</ul>
</li>
<li>行律的作用
<ul>
<li>一行内字符的缓冲、回显与编辑，直到按下回车键</li>
<li>数据加工，如：将<code>\n</code>(换行符)转化为<code>\r\n</code>(回车换行符)</li>
<li>将Ctrl-C字符转化为中止进程运行的<strong>信号</strong>(signal)</li>
</ul>
</li>
</ul>
<blockquote>
<p>例：主机与终端之间的通信过程</p>
<img src="https://repo.live.holgerbest.top/img/UBJhEYZIMPSupFT.png" alt="主机与终端之间的通信过程" style="zoom:80%;" />
<p>其中，行律起到了回显、数据加工（如<code>\b</code>转换为<code>\b \b</code>以实现退格效果，<code>\r</code>和<code>\n</code>转换为<code>\r\n</code>以回车换行）的作用。</p>
</blockquote>
<ul>
<li>行律功能的调整
<ul>
<li>必要性（行律的功能有时是不方便的）
<ul>
<li>在输入口令时不希望回显</li>
<li>不希望行律缓冲信息，而是尽快交给程序</li>
</ul>
</li>
<li>调整方法
<ul>
<li>程序中通过编程的方法</li>
<li>相关命令stty</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ stty erase ^H <span class="comment"># 不支持编辑功能的终端设置Ctrl-H擦去一个字符</span></span><br><span class="line">                <span class="comment"># Ctrl-H对应ASCII值为8，即为backspace</span></span><br><span class="line">$ stty -a       <span class="comment"># 打印行律所有控制信息状态</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="终端转义序列"><a class="markdownIt-Anchor" href="#终端转义序列"></a> 终端转义序列</h2>
<p><strong>转义字符Esc</strong>：ASCII码1B（十进制27，八进制033）</p>
<p><strong>主机发往终端方向数据中的转义序列的功能</strong></p>
<ul>
<li>控制光标位置、字符颜色、字符大小等等</li>
<li>选择终端的字符集</li>
<li>控制终端上的打印机、刷卡机、磁条器、密码键盘</li>
</ul>
<blockquote>
<p>例如：</p>
<ul>
<li>Esc[2J 由主机发送到终端的四字节序列1B 5B 32 4A  功能：<strong>清除屏幕</strong></li>
<li>Esc[8A 四字节序列，光标上移8行</li>
<li>Esc[16;8H 七字节序列，光标移到16行8列</li>
<li>Esc[1;31m 七字节序列，红色字符</li>
</ul>
</blockquote>
<p>终端类型：定义一组转义序列以及相对应的操作。例如：ansi,vt100, vt220等等。</p>
<p>主机和终端之间的类型匹配：主机根据终端类型，实现相应功能时发送对应的控制码；当终端类型设置不对，可能一些全屏幕操作的软件运行失败。</p>
<h2 id="仿真终端和虚拟终端"><a class="markdownIt-Anchor" href="#仿真终端和虚拟终端"></a> 仿真终端和虚拟终端</h2>
<ul>
<li><strong>仿真终端</strong>：PC机RS232串口，运行终端仿真软件来仿一个真正的终端设备的功能
<ul>
<li>例如: 早期DOS操作系统下的CrossTalk；  Windows中的“超级终端”</li>
<li><strong>仿真的内容包括实现终端的转义码序列功能</strong></li>
</ul>
</li>
<li><strong>虚拟终端</strong> (利用网络)
<ul>
<li>主机和终端之间的通信实际上就是一些<strong>字节流</strong>在两个方向上进行传输。</li>
<li>终端与主机之间的通信由串口线替代为一个<strong>TCP连接</strong>，双向传递字节流</li>
<li>虚拟终端的字节流：<img src="https://repo.live.holgerbest.top/img/htM3lCdunQK4fjV.png" alt="虚拟终端的字节流" style="zoom:60%;" /></li>
<li>主机与PC通过网络相连，客户端运行<strong>telnet</strong>，服务器端telnetd，成为Linux的基于TCP通信的<strong>虚拟终端</strong>（早期的使用方式，不安全）</li>
<li>安全终端，在TCP连接上<strong>加密和压缩</strong>数据，如：Windows客户端软件SecureCRT或者putty</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记03：系统状态</title>
    <url>/2021/01/18/linux-03-state/</url>
    <content><![CDATA[<h2 id="who确定有谁在系统中"><a class="markdownIt-Anchor" href="#who确定有谁在系统中"></a> who：确定有谁在系统中</h2>
<p>命令<code>who</code>：列出当前已登录入系统的用户</p>
<p>第一列：用户名；第二列：终端设备的设备文件名</p>
<blockquote>
<p>设备在文件系统中有一个文件名（同普通磁盘文件不同的是文件类型属于特殊文件），设备文件一般放于目录<code>/dev</code>下</p>
</blockquote>
<ul>
<li>命令<code>tty</code>可以打印出当前终端的设备文件名</li>
<li>命令<code>who am i</code>可以列出当前终端上的登录用户</li>
<li>命令<code>whoami</code>仅列出当前终端上的登录用户</li>
</ul>
<p>例如 ：以root用户登录系统，然后执行 <code>su - holger</code> 切换到 holger 用户下，此时 <code>who am i</code> 显示的是root用户，而 <code>whoami</code> 则显示 holger 用户。</p>
<h2 id="uptime已开机时间年龄"><a class="markdownIt-Anchor" href="#uptime已开机时间年龄"></a> uptime：已开机时间(年龄)</h2>
<ul>
<li>系统自启动后到现在的运行时间</li>
<li>当前登录入系统的用户数</li>
<li>近期1分钟，5分钟，15分钟内系统CPU的负载
<ul>
<li>平均调度队列长度</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uptime</span><br><span class="line"> 22:23:49 up  6:58,  1 user,  load average: 0.70, 0.75, 0.77</span><br></pre></td></tr></table></figure>
<h2 id="top列出资源占用排名靠前的进程"><a class="markdownIt-Anchor" href="#top列出资源占用排名靠前的进程"></a> top：列出资源占用排名靠前的进程</h2>
<ul>
<li>VIRT进程逻辑地址空间大小(virtual)</li>
<li>RES驻留内存数(Resident),也就是占用物理内存数</li>
<li>SHR与其他进程共享的内存数(share)</li>
<li>%CPU占用CPU百分比，%MEM占用内存百分比</li>
<li>TIME+占用的CPU时间</li>
</ul>
<img src="https://repo.live.holgerbest.top/img/RCqB8EIwAmDfk5a.png" alt="top" style="zoom:80%;" />
<h2 id="命令-ps"><a class="markdownIt-Anchor" href="#命令-ps"></a> 命令 ps</h2>
<p>功能：查阅进程状态(process status)</p>
<p><strong>实际上就是将内核中进程状态信息有选择地打印出来</strong>。</p>
<p>选项：用于控制列表的行数(进程范围)和列数(每进程列出的属性内容)</p>
<ul>
<li>无选项：只列出在当前终端上启动的进程
<ul>
<li>列出的项目有：PID，TTY，TIME，COMMAND</li>
</ul>
</li>
<li>e选项：列出系统中所有的进程(进程范围)</li>
<li>f选项：以full格式列出每一个进程(控制列的数目)</li>
<li>l选项：以long格式列出每一个进程(控制列的数目)</li>
</ul>
<p>属性：</p>
<ul>
<li>UID：用户ID(注册名)</li>
<li>PID：进程ID</li>
<li>PPID：父进程的</li>
<li>PIDC：CPU占用指数，最近一段时间(秒级别)进程占用CPU情况</li>
<li>STIME：启动时间</li>
<li>SZ：进程逻辑内存大小(Size)</li>
<li>TTY：终端的名字</li>
<li>COMMAND：命令名</li>
<li>WCHAN：进程在内核的何处睡眠(Wait Channel)</li>
<li>TIME：累计执行时间(占用CPU的时间)</li>
<li>PRI：优先级</li>
<li>S：状态，S(Sleep)，R(Run)， Z(Zombie)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line"> 1314 pts/1    00:00:00 bash</span><br><span class="line">14953 pts/1    00:00:00 ps</span><br><span class="line">$ ps -f</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">holger    1314  1301  0 21:51 pts/1    00:00:00 /bin/bash</span><br><span class="line">holger   14956  1314  0 22:30 pts/1    00:00:00 ps -f</span><br><span class="line">$ ps -l</span><br><span class="line">F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD</span><br><span class="line">0 S  1000  1314  1301  0  80   0 -  2789 do_wai pts/1    00:00:00 bash</span><br><span class="line">4 R  1000 14965  1314  0  80   0 -  2897 -      pts/1    00:00:00 ps</span><br></pre></td></tr></table></figure>
<h2 id="free了解内存使用情况"><a class="markdownIt-Anchor" href="#free了解内存使用情况"></a> free：了解内存使用情况</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        7121220     4143332      474140      380300     2503748     2310272</span><br><span class="line">Swap:       8080380      121436     7958944</span><br></pre></td></tr></table></figure>
<ul>
<li>内存总量6.8GB，空闲463MB<br />
Linux为提高效率，利用程序暂时不用的内存，缓冲读写过的磁盘信息。<br />
当前有2.4GB的buffer/cache</li>
<li>不计buffers/cache，系统有实际可利用资源2.2GB</li>
<li>打印了磁盘Swap区的使用情况</li>
</ul>
<h2 id="vmstat了解系统负载"><a class="markdownIt-Anchor" href="#vmstat了解系统负载"></a> vmstat：了解系统负载</h2>
<ul>
<li>Procs r等待运行的进程数；b处在非中断睡眠状态的进程数</li>
<li>Memory free空闲的内存，buff/cache用做缓存的内存数</li>
<li>Swap磁盘/内存的交换页数量，单位：KB/秒</li>
<li>IO块设备I/O块数，单位：块/秒</li>
<li>System
<ul>
<li>in  每秒的硬件中断数(interrupt)，包括时钟中断</li>
<li>cs  每秒的环境切换次数(contextswitch)</li>
</ul>
</li>
<li>CPU 的总使用率  us=user，sy=system，id=idle，wa=wait for disk I/O</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vmstat 1</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st</span><br><span class="line"> 1  0 134748 518644  77972 2338216    0    2    70    86   43  208 10  4 86  0  0</span><br><span class="line"> 0  0 134748 526920  77972 2338216    0    0     0     0 3299 5931  1  1 98  0  0</span><br><span class="line"> 0  0 134748 520220  77988 2338136    0    0     0    72 3978 7908  3  1 96  0  0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux笔记</category>
      </categories>
      <tags>
        <tag>Linux命令</tag>
        <tag>Linux</tag>
        <tag>Linux系统状态</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记04：文本文件及处理工具</title>
    <url>/2021/01/19/linux-04-text/</url>
    <content><![CDATA[<h2 id="linux中的文本信息"><a class="markdownIt-Anchor" href="#linux中的文本信息"></a> Linux中的文本信息</h2>
<ul>
<li>文本文件
<ul>
<li>C语言，Java语言等编程文件的源程序文件</li>
<li>文本格式的数据文件</li>
<li>文本格式的文字信息（使用手册等）</li>
</ul>
</li>
<li>程序输出</li>
<li>系统配置信息：<code>/etc</code> 下的配置文件（功能类似 Windows 的注册表）</li>
<li>文本型网络协议
<ul>
<li>因特网大部分传输层以上的协议是文本型协议</li>
<li><strong>会话层</strong>协议：HTTP(网页传输)；POP3，SMTP，IMAP(电子邮件)</li>
<li><strong>表示层</strong>协议：HTML(网页页面)；XML，JSON(对象状态)；MIME(电子邮件)</li>
</ul>
</li>
<li>文本文件处理的命令
<ul>
<li>Linux提供大量的文本文件处理的命令</li>
<li>多数命令都有复杂的选项</li>
</ul>
</li>
</ul>
<h2 id="进程的标准输入输出"><a class="markdownIt-Anchor" href="#进程的标准输入输出"></a> 进程的标准输入/输出</h2>
<ul>
<li>进程的基本概念
<ul>
<li>进程：简单理解为程序从开始运行到运行结束</li>
<li>程序：磁盘上的可执行文件</li>
<li>进程的生命周期</li>
</ul>
</li>
<li>进程的输入输出
<ul>
<li>标准输入stdin</li>
<li>标准输出stdout</li>
</ul>
</li>
</ul>
<h2 id="重定向与管道"><a class="markdownIt-Anchor" href="#重定向与管道"></a> 重定向与管道</h2>
<ul>
<li><strong>重定向</strong>机制：将标准输入/输出重新定向到文件中
<ul>
<li>输出重定向 <code>ls –l &gt; filelist.txt</code></li>
<li>追加输出重定向：<code>&gt;&gt;</code></li>
<li>输入重定向 <code>sort &lt; filelist.txt</code></li>
</ul>
</li>
<li><strong>管道</strong>机制：连接两个命令，前一个命令的输出作为后一个命令的输入 <code>ls –l | sort</code></li>
<li>重定向机制和管道机制的重要性：组合多个命令，完成重要的功能。</li>
</ul>
<h2 id="文本文件处理命令的特点"><a class="markdownIt-Anchor" href="#文本文件处理命令的特点"></a> 文本文件处理命令的特点</h2>
<p><strong>特点</strong>：</p>
<ul>
<li>不指定处理对象文件名时，从<strong>标准输入</strong>获得数据</li>
<li>指定处理对象文件名时，从<strong>文件</strong>中获取数据</li>
<li>多数命令可以指定<strong>多个文件</strong></li>
<li>处理结果<strong>在标准输出显示</strong></li>
</ul>
<p>这样<strong>考虑的因素</strong>：</p>
<ul>
<li>利用标准输入/标准输出</li>
<li>shell的<strong>文件通配符</strong> -&gt; 处理<strong>多个文件</strong></li>
<li>输入输出重定向</li>
<li>管道</li>
</ul>
<p><strong>灵活性</strong>：工具命令的组合</p>
<ul>
<li>
<p>Linux 倾向于提供独立的多个精巧的工具命令，数据格式为文本信息</p>
</li>
<li>
<p>鼓励使用<strong>重定向或管道机制</strong>将多个工具命令组合在一起，提供灵活的功能</p>
</li>
<li>
<p><strong>应用系统设计</strong>时，也应该考虑到这些特点</p>
<blockquote>
<p>例如：数据库内容的展示，直接输出多列文本，考虑到各种工具软件的使用</p>
</blockquote>
</li>
</ul>
<h2 id="文本文件读取与处理的命令"><a class="markdownIt-Anchor" href="#文本文件读取与处理的命令"></a> 文本文件读取与处理的命令</h2>
<h3 id="moreless逐屏显示文件"><a class="markdownIt-Anchor" href="#moreless逐屏显示文件"></a> more/less：逐屏显示文件</h3>
<p><strong>历史</strong> more 最先由BSD UNIX开发；less 在Linux上广泛使用</p>
<ul>
<li><code>more &lt;文件名&gt;</code>    指定一个文件</li>
<li><code>more *.[ch]</code>    指定多个文件(通配符)</li>
<li><code>ls -l | more</code>    指定0个文件（常用，显示一屏就停下来）</li>
</ul>
<h4 id="more"><a class="markdownIt-Anchor" href="#more"></a> more</h4>
<p>满屏后，显示–more–或--more–(15%)，可以使用more命令：</p>
<ul>
<li>空格：显示下一屏</li>
<li>回车：上滚一行，当所感兴趣的段落内容正好处于当前屏的尾部，另有一部分在下一页中时，可以连续按回车，将感兴趣的部分滚动上来</li>
<li>q：(quit)退出程序，后面的内容不再显示</li>
<li>/pattern：搜索指定模式的字符串，模式描述用正则表达式</li>
<li>/：继续查找指定模式的字符串</li>
<li>h：(Help)帮助信息。打印more命令的所有功能列表</li>
<li>Ctrl-L：屏幕刷新</li>
</ul>
<h4 id="less"><a class="markdownIt-Anchor" href="#less"></a> less</h4>
<p>Linux系统中的命令less</p>
<blockquote>
<p>less is more</p>
</blockquote>
<ul>
<li><strong>回退浏览</strong>的功能更强</li>
<li>可直接使键盘的上下箭头键，或者j,k，类似vi的光标定位键，以及PgUp，PgDn，Home，End键</li>
<li>有的Unix系统不提供less命令，但是可利用more命令的增强功能</li>
</ul>
<h3 id="cat与od列出文件内容"><a class="markdownIt-Anchor" href="#cat与od列出文件内容"></a> cat与od：列出文件内容</h3>
<p>基本功能与命名</p>
<ul>
<li>cat    concatenate 串结，文本格式打印（选项-n：行号）</li>
<li>od    octal dump 逐字节打印
<ul>
<li>-c：逐字符方式打印文件，遇到不可打印字符打印编码</li>
<li>-t c：按字符打印</li>
<li>-t x1：以一个字节为单位打印十六进制</li>
<li>-t d1：以一个字节为单位打印十进制（超过128显示负数）</li>
<li>-t u1：以一个字节为单位打印十进制（无符号整数）</li>
</ul>
</li>
</ul>
<p>举例</p>
<ul>
<li><code>cat tryl.c</code>    命令行参数1个</li>
<li><code>cat –n shudu.c</code>    选项-n：行号</li>
<li><code>cat tryl.c tryx.c try.h</code>    命令行参数3个</li>
<li><code>cat &gt;try</code>    命令行参数0个，从stdin获取数据，直到ctrl-d</li>
<li><code>cat tryl.c try2.c try.h &gt; trysrc</code></li>
<li><code>cat makefile *.[ch] &gt; src</code></li>
<li><code>od –t x1 x.dat</code>   以十六进制打印文件x.dat各字节</li>
<li><code>od –t x1 x.dat | more</code>    以十六进制打印文件x.dat各字节</li>
<li><code>od –c /bin/bash</code>    逐字符方式打印文件，遇到不可打印字符打印编码</li>
<li><code>echo abcdABCD | od –t x1</code>    十六进制显示字符的ASCII码</li>
</ul>
<h3 id="head与tail显示文件的头部或者尾部"><a class="markdownIt-Anchor" href="#head与tail显示文件的头部或者尾部"></a> head与tail：显示文件的头部或者尾部</h3>
<p>默认只选择10行，-n选项可以选择行数</p>
<ul>
<li><code>head –n 15 ab.c</code>    显示文件ab.c中前15行</li>
<li><code>head –n 23 a.c b.c c.c | more</code>    显示三个文件各自的前23行，共显示69行</li>
<li><code>tail –n 40 liu.mail</code></li>
<li><code>head –n -20 msg.c</code>    除去文件尾部20行其余均算“头”</li>
<li><code>tail –n +20 msg.c</code>    除去文件头部20行其余均算作“尾”</li>
<li><code>tail -f debug.txt</code>    <strong>实时打印文件尾部被追加的内容</strong>（选项-f：forever）
<ul>
<li><code>netstat -s -p tcp | head</code></li>
<li><code>ls -s | sort | head –n 20</code>    最大的20个文件</li>
</ul>
</li>
</ul>
<h3 id="tee三通"><a class="markdownIt-Anchor" href="#tee三通"></a> tee：三通</h3>
<p>功能：将从标准输入stdin得到的数据<strong>抄送到标准输出stdout显示，同时存入磁盘文件中</strong></p>
<p>应用举例：<code>./myap | tee myap.log</code></p>
<h3 id="wc字计数word-count"><a class="markdownIt-Anchor" href="#wc字计数word-count"></a> wc：字计数（word count）</h3>
<ul>
<li>列出文件中一共有多少行，有多少个单词，多少字符</li>
<li>当指定的文件数大于1时，最后还列出一个合计</li>
<li><strong>常用选项-l：只列出行计数</strong></li>
</ul>
<p>举例</p>
<ul>
<li><code>wc sum.c</code>（1个文件）</li>
<li><code>wc x.c makefile stat.sh</code>（多个文件）</li>
<li><code>wc -l *.c makefile start.sh</code></li>
<li><code>ps -ef | wc -l</code>（0个）</li>
<li><code>ps -ef | grep liang | wc -l</code>（0个）</li>
<li><code>who | wc -l</code>（0个）</li>
</ul>
<h3 id="sort对文件内容排序"><a class="markdownIt-Anchor" href="#sort对文件内容排序"></a> sort：对文件内容排序</h3>
<p>sort选项</p>
<ul>
<li>-n选项(Numberic)：对于数字按照算术值大小排序，而不是按照字符串比较规则，例如123与67</li>
<li>-k：可以选择行中某一部分作为排序关键字</li>
<li>-r：以相反的顺序来排序。</li>
<li>-f：字符串比较时对字母是否区分大小写</li>
<li><em>内排序外排序等算法参数选择（当数据量较大时，性能调优）</em></li>
</ul>
<p>举例</p>
<ul>
<li><code>sort telno &gt; telno1</code></li>
<li><code>ls -s | sort | tail –10</code></li>
<li><code>ls -s | sort -n | tail –10</code></li>
</ul>
<h3 id="tr翻译字符"><a class="markdownIt-Anchor" href="#tr翻译字符"></a> tr：翻译字符</h3>
<p><strong>用法</strong>：<code>tr string1 string2</code> 把标准输入拷贝到标准输出，string1中出现的字符替换为string2中的对应字符</p>
<ul>
<li><code>cat telnos | tr UVX uvx</code></li>
<li>用 <code>[]</code> 指定一个集合<br />
<code>cat report | tr '[a-z]' '[A-Z]'</code>    将小写字母改为大写字母</li>
<li>用<code>\</code>加三个八进制数字(类似C语言)表示一字符<br />
<code>cat file1 | tr % '\012'</code>    将%改为换行符，注意不要漏掉必需的单引号</li>
</ul>
<h3 id="uniq筛选文件中的重复行"><a class="markdownIt-Anchor" href="#uniq筛选文件中的重复行"></a> uniq：筛选文件中的重复行</h3>
<ul>
<li><code>uniq options</code></li>
<li><code>uniq options input-file</code></li>
<li><code>uniq options input-file output-file</code></li>
</ul>
<p><strong>重复的行</strong>：紧邻的两行内容相同</p>
<ul>
<li>-u（uniqe）只保留没有重复的行</li>
<li>-d（duplicated）只保留有重复的行（但只打印一次）</li>
<li>没有以上两个选项，打印<strong>没有重复的行和有重复的行（但只打印一次)</strong></li>
<li>-c（count）计数同样的行出现几次</li>
</ul>
]]></content>
      <categories>
        <category>Linux笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>文本文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记05：正则表达式与文本处理</title>
    <url>/2021/03/07/linux-05-regex/</url>
    <content><![CDATA[<h2 id="正则表达式的概念"><a class="markdownIt-Anchor" href="#正则表达式的概念"></a> 正则表达式的概念</h2>
<p>正则表达式 RegularExpressions 应用范围：字符串匹配操作和替换操作</p>
<ul>
<li>举例：Linux中的 vimore grep yacc lex awk sed</li>
<li>其他：Visual Studio，Word等文本编辑器</li>
</ul>
<p>正则表达式的功能：描述一个字符串模式</p>
<p>注意：</p>
<ul>
<li>正则表达式规则与文件名通配符规则不同
<ul>
<li>正则表达式规则用于<strong>文本处理</strong>的场合</li>
<li>文件名匹配规则用于<strong>文件处理</strong>的场合</li>
</ul>
</li>
<li>不同软件对正则表达式的定义会有差异</li>
</ul>
<h2 id="元字符和集合"><a class="markdownIt-Anchor" href="#元字符和集合"></a> 元字符和集合</h2>
<p>元字符：正则表达式的特殊字符</p>
<ul>
<li>6个元字符：<code>. * [ \ ^ $</code></li>
<li>其它字符与其自身匹配</li>
</ul>
<p>转义：用反斜线可以取消特殊字符的特殊含义。如：正则表达式 <code>end\.</code> 只与字符串 <code>end.</code> 匹配。</p>
<h3 id="单字符正则表达式"><a class="markdownIt-Anchor" href="#单字符正则表达式"></a> 单字符正则表达式</h3>
<p>长的正则表达式由<strong>单字符正则表达式</strong>构成</p>
<ul>
<li>非特殊字符与其自身匹配</li>
<li>转义字符（<code>\</code>）： <code>\. \* \$ \^ \[ \\</code></li>
<li>转义字符后除以上六种之外的不该出现其他字符，例如:不该出现\u，这样的组合被视为undefined（未定义的），后出的软件有可能会有特殊的解释</li>
<li>圆点（<code>.</code>）：匹配任意单字符</li>
</ul>
<h3 id="定义集合"><a class="markdownIt-Anchor" href="#定义集合"></a> 定义集合</h3>
<p>基本用法：在一对方括号之间的字符为集合的内容，圆点（<code>.</code>），星号（<code>*</code>），反斜线（<code>\</code>）在方括号内时，代表它们自己。</p>
<p>如：单字符正则表达式 <code>[abcd]</code> 与a或b,c,d匹配，<code>[\*.]</code> 可匹配3个单字符</p>
<ul>
<li><strong>用减号 <code>-</code> 定义一个区间</strong>
<ul>
<li>如 <code>[a-d]</code> <code>[A-Z]</code> <code>[a-zA-Z0-9]</code></li>
<li>如 <code>[][]</code> 集合含左右中括号两个字符</li>
<li>减号在最后，则失去表示区间的意义，如 <code>[ad-]</code> 只与3个字符匹配</li>
</ul>
</li>
<li><strong>用 <code>^</code> 表示补集</strong>
<ul>
<li><code>^</code> 在开头，则表示与集合内字符之外的任意字符匹配，如：<code>[^a-z]</code> 匹配任一非小写字母、<code>[^][]</code> 匹配任一非中括号字符</li>
<li><code>^</code> 不在开头,则失去其表示补集的意义，如：<code>[a-z^]</code> 能匹配27个单字符</li>
</ul>
</li>
</ul>
<h2 id="组合与锚点"><a class="markdownIt-Anchor" href="#组合与锚点"></a> 组合与锚点</h2>
<h3 id="单字符正则表达式的组合"><a class="markdownIt-Anchor" href="#单字符正则表达式的组合"></a> 单字符正则表达式的组合</h3>
<p><strong>串结</strong>：多个单字符正则表达式连接在一起。</p>
<p><strong>星号（<code>*</code>）</strong>：单字符正则表达式后跟 <code>*</code>，匹配此单字符正则表达式的0次或任意多次出现</p>
<p>例如</p>
<ul>
<li>正则表达式 <code>12*4</code> 与字符串 1234 不匹配，与 1224，12224，14 匹配</li>
<li>正则表达式 <code>[A-Z][0-9]*</code> 与 A,A1,C45,D768 匹配，与 b64512,T56t 不匹配</li>
<li>正则表达式 <code>[Cc]hapter *[1-4]</code> 在 <code>*</code> 号前有一个空格，允许数字 1-4 之前有多个或者0个空格。可匹配Chapter2, chapter 3等等。</li>
<li>正则表达式 <code>a\[i] *= *b\[j] *\* *c\[k]</code> 匹配字符串 <code>a[i]=b[j]*c[k]</code>，容许等号和星号两侧有空格</li>
<li>在vi中使用 <code>:1,$s/[0-9]*/xx/g</code></li>
</ul>
<h3 id="锚点-与"><a class="markdownIt-Anchor" href="#锚点-与"></a> 锚点：<code>$</code> 与 <code>^</code></h3>
<p><code>$</code> 在尾部时有特殊意义，否则与其自身匹配</p>
<p>例如：</p>
<ul>
<li><code>123$</code> 匹配文件中行尾的 <code>123</code>，不在行尾的 <code>123</code> 字符不匹配</li>
<li><code>$123</code> 与字符串 <code>$123</code> 匹配</li>
<li><code>.$</code> 匹配行尾的任意字符</li>
</ul>
<p><code>^</code> 在首部时有特殊意义，否则与其自身匹配</p>
<p>例如：</p>
<ul>
<li><code>^printf</code> 匹配行首的 <code>printf</code> 字符串，不在行首的 <code>printf</code> 串不匹配</li>
<li><code>Hel^lo</code> 与字符串 <code>Hel^lo</code> 匹配</li>
<li>在vi中使用 <code>:10,50s/^ //g</code> 删除10-50行的每行行首的4个空格</li>
</ul>
<h2 id="正则表达式扩展"><a class="markdownIt-Anchor" href="#正则表达式扩展"></a> 正则表达式扩展</h2>
<ul>
<li>ERE：扩展的正则表达式</li>
<li>PCRE: Perl-compatible regular expression</li>
</ul>
<p>对**基本正则表达式（BRE）**进行了改进：</p>
<ul>
<li>表示<strong>分组</strong>：圆括号<code>()</code></li>
<li>表示逻辑运算：表示逻辑 “或” 的符号<code>|</code>
<ul>
<li><code>(xy)*</code> 可匹配空字符串，xy，xyxy，xyxyxy</li>
<li><code>(pink|green)</code> 与pink或green匹配</li>
</ul>
</li>
<li>重复次数定义：与星号地位类似的 <code>+</code> 和 <code>?</code>，限定重复次数 <code>\&#123;m,n\&#125;</code>
<ul>
<li><code>*</code> 号表示它左边的单字符正则表达式的0次或多次重复</li>
<li><code>+</code> 号表示1次或多次：<code>[0-9]+</code> 匹配长度至少为1数字串</li>
<li><code>?</code> 表示0次或一次： <code>a?</code>匹配零个或一个a</li>
<li>限定重复次数 <code>\&#123;m,n\&#125;</code>，例如：<code>[1-9][0-9]\&#123;6,8\&#125;</code>匹配7-9位数字，首位非0</li>
</ul>
</li>
<li>命名的预定义集合 <code>[[:xdigit:]]</code> 十六进制数字；<code>\d</code> 数字 <code>\D</code>非数字</li>
<li>比 <code>^</code> 和 <code>$</code> 更灵活的锚点定义</li>
</ul>
<h2 id="行筛选-grep"><a class="markdownIt-Anchor" href="#行筛选-grep"></a> 行筛选 grep</h2>
<ul>
<li>grep/egrep/fgrep：在文件中查找字符串（筛选）</li>
<li>sed：流编辑（加工）</li>
<li>awk：逐行扫描进行文本处理的一门语言（筛选与加工）</li>
</ul>
<h3 id="grep-在文件中查找字符串"><a class="markdownIt-Anchor" href="#grep-在文件中查找字符串"></a> grep 在文件中查找字符串</h3>
<p>grep: Global regular expression print</p>
<p>语法: grep 模式 文件名列表</p>
<p>举例:</p>
<ul>
<li><code>grep O_RDWR *.h</code></li>
<li><code>ps -ef | grep liang</code></li>
<li><code>ls -l / | grep '^d' | wc –l</code></li>
<li><code>grep '[0-9]*' shudu.c</code></li>
<li><code>grep'[0-9][0-9]*' shudu.c</code></li>
</ul>
<p>egrep 使用扩展正则表达式ERE描述模式，在指定模式方面比grep更灵活。</p>
<p>fgrep快速搜索指定字符串，按字符串搜索而不是按模式搜索。</p>
<p>grep选项：</p>
<ul>
<li>-F, --fixed-strings    <strong>Fixed strings (instead of regular expressions)</strong></li>
<li>-G, --basic-regexp    <strong>Basic regular expression (BRE)</strong></li>
<li>-E, --extended-regexp    <strong>Extended regular expression (ERE)</strong></li>
<li>-P, --perl-regexp    <strong>Perl-compatible regular expression (PCRE)</strong></li>
<li>查PCRE语法：<code>man pcresyntax</code></li>
<li>-n  <strong>显示时每行前面显示行号</strong></li>
<li>-v  <strong>显示所有不包含模式的行</strong></li>
<li>-i  <strong>字母比较时忽略字母的大小写</strong></li>
</ul>
<p>例：</p>
<ul>
<li><code>grep -n main *.c</code> ：查找含有正则表达式main的行，并打印行号；当文件数超过一个时，除了输出行号，还输出文件名。</li>
<li><code>grep -v '[Dd]isable' dev.stat&gt;dev.active</code> ：不输出文件中所有含有指定模式的行，生成新文件。</li>
<li><code>grep-i richard telnos</code> ：在文件中检索字符串 richard ，不区分字母的大小写。</li>
</ul>
<h2 id="流编辑-sed-和正则表达式替换"><a class="markdownIt-Anchor" href="#流编辑-sed-和正则表达式替换"></a> 流编辑 sed 和正则表达式替换</h2>
<h3 id="sed流编辑"><a class="markdownIt-Anchor" href="#sed流编辑"></a> sed：流编辑</h3>
<p>用法：</p>
<ul>
<li>sed ‘命令’ 文件名列表</li>
<li>sed –e ‘命令1’ –e ‘命令2’ –e ‘命令3’ 文件名列表</li>
<li>sed -f 命令文件 文件名列表</li>
</ul>
<p>举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f pppd.log | sed <span class="string">&#x27;s/145\.37\.23\.26/桥西/g&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f pppd.log | sed -f sed.cmd</span><br></pre></td></tr></table></figure>
<p>其中sed.cmd文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s&#x2F;145\.37\.23\.26&#x2F;桥西&#x2F;g</span><br><span class="line">s&#x2F;102\.157\.23\.109&#x2F;柳荫街&#x2F;g</span><br><span class="line">s&#x2F;145\.37\.123\.57&#x2F;大山子&#x2F;g</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat pm.txt | sed <span class="string">&#x27;s/\[[^][]*]//g&#x27;</span></span><br></pre></td></tr></table></figure>
<p>模式描述中增加 <code>\(</code> 和 <code>\)</code> ：在正则表达式中圆括号，仍然代表它自身,在正则表达式中出现的 <code>\(</code> 和 <code>\)</code> 不影响匹配操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[a-zA-Z_][a-zA-Z0-9_]*-&gt;number</span><br><span class="line">\([a-zA-Z_][a-zA-Z0-9_]*\)-&gt;number</span><br></pre></td></tr></table></figure>
<p>替换字符串中的 <code>\0</code> <code>\1</code> <code>\2</code> ……</p>
<p>举例：</p>
<ul>
<li><code>s/\([a-zA-Z_][a-zA-Z0-9_]*\)-&gt;number/\1-&gt;num/g</code></li>
<li>将日期格式“月-日-年”改为“年.月.日”, 比如：将04-26-1997替换为1997.04.26使用命令:<code>s/\([0-9][0-9]\)-\([0-9][0-9]\)-\([0-9][0-9]*\)/\3.\1.\2/g</code></li>
<li>生成文件改名的命令<code>[快视频www.kuai-vdo.com]-电视剧《三国演义》中文字幕_1080p高清_央视1994版-69.rmvb</code>：<code>sed 's/.*-\([0-9][0-9]\).rmvb/mv \0第\1集.rmvb/'</code></li>
</ul>
<h2 id="复杂筛选及加工-awk"><a class="markdownIt-Anchor" href="#复杂筛选及加工-awk"></a> 复杂筛选及加工 awk</h2>
<p>awk：逐行扫描进行文本处理的一门语言</p>
<blockquote>
<p>a.w.k 分别为该程序的三位设计者姓氏的第一个字母</p>
</blockquote>
<p>用法：</p>
<ul>
<li>awk ‘程序’ 文件名列表</li>
<li>awk -f 程序文件名 文件名列表</li>
<li>程序 条件｛动作｝</li>
<li>awk 自动对每行文本执行条件判断，满足条件执行动作（内置循环）</li>
<li>允许多段程序：多段程序间用空格或分号隔开</li>
</ul>
<p>处理方式：</p>
<ul>
<li>输入文件的每行作为一个“记录”，变量NR就是行号</li>
<li>每行用空格分隔开的部分，叫做记录的“域”
<ul>
<li>内置变量 <code>$1</code> 是第1域内容，依次，<code>$2</code> 是第2域内容，……</li>
<li>特别的，<code>$0</code> 指的是整个这一行的内容</li>
</ul>
</li>
<li>awk 的处理为：符合条件的行，执行相应的动作</li>
</ul>
<p>awk 描述条件的方法：</p>
<ul>
<li>使用与C语言类似的关系算符</li>
<li>使用与C语言类似的逻辑算符</li>
<li>正则表达式的模式匹配 <code>/regexpr/</code>：包含该模式的行，执行动作</li>
<li>特殊的条件
<ul>
<li>不指定任何条件，对所有文本行执行动作</li>
<li>BEGIN 开始处理所有文本行之前执行动作</li>
<li>END 处理完所有文本行之后执行动作</li>
</ul>
</li>
</ul>
<p>awk 描述动作的方法：</p>
<ul>
<li>自定义变量</li>
<li>加减乘除等算术逻辑运算</li>
<li>正则表达式匹配运算符（用作条件判断）<code>~</code> <code>!~</code> 例如：<code>$2 ~ &quot;[1-9][0-9]*&quot;</code></li>
<li>流程控制（与C语言类似）： if for</li>
<li>print 变量1， 变量2，……</li>
<li>printf(”格式串”，变量1，变量2，……)</li>
</ul>
<p>awk 举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -ef | grep guest</span><br><span class="line">    guest   669 668 0   11:27:13    ttyp1   00:00:00    -sh</span><br><span class="line">    guest   678 669 0   11:27:18    ttyp1   00:00:00    vi</span><br><span class="line">$ ps -ef | awk<span class="string">&#x27;/guest/&#123; printf(&quot;%s &quot;,$2); &#125;&#x27;</span></span><br><span class="line">669 678</span><br><span class="line">$ awk <span class="string">&#x27;&#123;printf(&quot;%d: %s\n&quot;,NR,$0); &#125;&#x27;</span> test.c</span><br><span class="line">1: main()</span><br><span class="line">2: &#123;</span><br><span class="line">3:      <span class="built_in">printf</span>(<span class="string">&quot;Hello!\n&quot;</span>);</span><br><span class="line">4: &#125;</span><br><span class="line">$ date</span><br><span class="line">Thu May 27 22:02:22 BEIDT 2004</span><br><span class="line">$ date | awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span></span><br><span class="line">22:02:42</span><br><span class="line">$ ls -s | awk <span class="string">&#x27;$1 &gt; 2000 &#123; print $2 &#125;&#x27;</span></span><br><span class="line">disk.img5document.pdf</span><br><span class="line">linux-src.tar.Z</span><br><span class="line">pppd.log</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记</title>
    <url>/2022/04/28/linux-study/</url>
    <content><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2>
<h3 id="gui"><a class="markdownIt-Anchor" href="#gui"></a> GUI</h3>
<h3 id="远程登录"><a class="markdownIt-Anchor" href="#远程登录"></a> 远程登录</h3>
<h2 id="文件和目录管理"><a class="markdownIt-Anchor" href="#文件和目录管理"></a> 文件和目录管理</h2>
<h3 id="linux文件系统"><a class="markdownIt-Anchor" href="#linux文件系统"></a> Linux文件系统</h3>
<h3 id="文件与目录的权限"><a class="markdownIt-Anchor" href="#文件与目录的权限"></a> 文件与目录的权限</h3>
<h3 id="文件属性"><a class="markdownIt-Anchor" href="#文件属性"></a> 文件属性</h3>
<h3 id="文档的压缩与打包"><a class="markdownIt-Anchor" href="#文档的压缩与打包"></a> 文档的压缩与打包</h3>
<table>
<thead>
<tr>
<th>后缀</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>gz</td>
<td>由gzip压缩的文件</td>
</tr>
<tr>
<td>bz2</td>
<td>由bzip2压缩的文件</td>
</tr>
<tr>
<td>xz</td>
<td>由xz压缩的文件</td>
</tr>
<tr>
<td>tar</td>
<td>由tar程序打包的文件（tar并没有压缩功能, 只是把一个目录合并成一个文件）</td>
</tr>
<tr>
<td>tar.gz</td>
<td>先经tar程序打包，再经gzip压缩</td>
</tr>
<tr>
<td>tar.bz2</td>
<td>先经tar程序打包，再经bzip2压缩</td>
</tr>
<tr>
<td>tar.xz</td>
<td>先经tar程序打包，再经xz压缩</td>
</tr>
</tbody>
</table>
<h4 id="gzip"><a class="markdownIt-Anchor" href="#gzip"></a> gzip</h4>
<ul>
<li>-c ：将压缩的数据输出到屏幕上，可通过重定向来处理；</li>
<li>-d ：解压缩的参数；</li>
<li>-t ：可以用来检验一个压缩档的一致性；</li>
<li>-v ：可以显示出原文件 / 压缩文件的压缩比等；</li>
<li>-k : 不删除原文件（默认会删除原文件）</li>
<li>-数字 ：压缩等级，-1 最快，但是压缩比最差、-9 最慢，但是压缩比 最好！默认是 -6</li>
</ul>
<h4 id="bzip2"><a class="markdownIt-Anchor" href="#bzip2"></a> bzip2</h4>
<p>bzip 2 比 gzip 提供更佳的压缩比.</p>
<ul>
<li>-c ：将压缩的数据输出到屏幕上，可通过重定向来处理；</li>
<li>-d ：解压缩的参数；</li>
<li>-t ：可以用来检验一个压缩档的一致性；</li>
<li>-v ：可以显示出原文件 / 压缩文件的压缩比等；</li>
<li>-k : 不删除原文件（默认会删除原文件）</li>
<li>-数字 ：压缩等级，-1 最快，但是压缩比最差、-9 最慢，但是压缩比 最好！默认是 -6</li>
</ul>
<h4 id="xz"><a class="markdownIt-Anchor" href="#xz"></a> xz</h4>
<ul>
<li>-d ：解压缩的参数；</li>
<li>-v ：可以显示出原文件 / 压缩文件的压缩比等；</li>
<li>-k : 不删除原文件（默认会删除原文件）</li>
<li>-z ：压缩的参数</li>
</ul>
<h4 id="tar"><a class="markdownIt-Anchor" href="#tar"></a> tar</h4>
<p>用来建立，还原备份文件的工具程序，可以将多个目录或文件打包成一个大文件，同时还可以使用 gzip/bzip2/xz 将该文件同时进行压缩。常用的参数有：</p>
<ul>
<li>-c或–create  建立新的备份文件。</li>
<li>-f&lt;备份文件&gt;或–file=&lt;备份文件&gt;  指定备份文件，可以搭配 -C ( 大写 ) 在特定目录解开。</li>
<li>-v或–verbose  显示指令执行过程。</li>
<li>-t  查看tar包里的文件</li>
<li>-x或–extract或–get 从备份文件中还原文件。</li>
<li>-z或–gzip或–ungzip  通过gzip指令处理备份文件。</li>
<li>-j  通过bzip2指令处理备份文件。</li>
<li>-J  通过xz指令处理备份文件。</li>
</ul>
<h4 id="zipunzip"><a class="markdownIt-Anchor" href="#zipunzip"></a> zip/unzip</h4>
<ul>
<li>-r 递归处理，将指定目录下的所有文件和子目录一并处理。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> zip 1.txt.zip 1.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zip -r test111.zip test111</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> unzip 1.txt.zip</span></span><br></pre></td></tr></table></figure>
<h3 id="文档压缩的练习"><a class="markdownIt-Anchor" href="#文档压缩的练习"></a> 文档压缩的练习</h3>
<p>1、gzip, bzip2 能否直接压缩目录呢？</p>
<p>不能直接压缩目录</p>
<p>2、请快速写出，使用gzip和bzip2压缩和解压一个文件的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gzip 1.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gzip -d 1.txt.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bzip2 1.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bzip2 -d 1.txt.bz2</span></span><br></pre></td></tr></table></figure>
<p>3、tar 在打包的时候，如果想排除多个文件或者目录如何操作？</p>
<p><code>tar cvf 123.tar --exclude a.txt --exclude b.txt 123/</code></p>
<p>4、请实验，如果不加 “<code>-</code>” 是否正确， 如 tar zcvf 1.tar.gz 1.txt 2.txt ?</p>
<p>不加 <code>-</code> 一样没有问题</p>
<p>5、如何使用tar打包和解包 .tar.gz, .tar.bz2 的压缩包？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar zcvf 1.tar.gz 1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar zxvf 1.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar jcvf 1.tar.bz2 1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar jxvf 1.tar.bz2</span></span><br></pre></td></tr></table></figure>
<p>6、找一个大点的文件，使用tar 分别把这个文件打成 .tar.gz和.tar.bz2 压缩包，比较一下哪个包会更小，从而得出结论，是gzip压缩效果好还是bzip2压缩效果好？</p>
<p>理论上.tar.bz2的压缩包小一些，但个别时候，有相反的情况。但大多时候bzip2压缩效果好。</p>
<p>7、使用tar打包并压缩的时候，默认压缩级别为几？ 想一想如何能够改变压缩级别呢？（提示，tar本身没有这个功能哦，可以尝试拆分打包和压缩）</p>
<p>tar打包压缩时，是按照gzip和bzip2的默认压缩级别来的，gzip工具默认压缩级别为6，bzip2默认压缩级别为9.</p>
<p>改变默认压缩级别可以这样来做，首先tar打包，然后再使用gzip或者bzip2压缩工具来压缩，压缩的时候指定压缩级别。如： <code>tar cvf 1.tar 123/; gzip -2 1.tar</code></p>
<h2 id="系统用户与用户组管理"><a class="markdownIt-Anchor" href="#系统用户与用户组管理"></a> 系统用户与用户组管理</h2>
<h3 id="用户"><a class="markdownIt-Anchor" href="#用户"></a> 用户</h3>
<h4 id="etcpasswd"><a class="markdownIt-Anchor" href="#etcpasswd"></a> /etc/passwd</h4>
<h4 id="etcshadow"><a class="markdownIt-Anchor" href="#etcshadow"></a> /etc/shadow</h4>
<h4 id="登录的用户"><a class="markdownIt-Anchor" href="#登录的用户"></a> 登录的用户</h4>
<h4 id="创建用户"><a class="markdownIt-Anchor" href="#创建用户"></a> 创建用户</h4>
<h4 id="修改密码"><a class="markdownIt-Anchor" href="#修改密码"></a> 修改密码</h4>
<h4 id="修改用户信息"><a class="markdownIt-Anchor" href="#修改用户信息"></a> 修改用户信息</h4>
<h4 id="删除用户"><a class="markdownIt-Anchor" href="#删除用户"></a> 删除用户</h4>
<h3 id="群组"><a class="markdownIt-Anchor" href="#群组"></a> 群组</h3>
<h4 id="etcgroup"><a class="markdownIt-Anchor" href="#etcgroup"></a> /etc/group</h4>
<h4 id="etcgshadow"><a class="markdownIt-Anchor" href="#etcgshadow"></a> /etc/gshadow</h4>
<h4 id="新增删除群组"><a class="markdownIt-Anchor" href="#新增删除群组"></a> 新增/删除群组</h4>
<h3 id="acl"><a class="markdownIt-Anchor" href="#acl"></a> ACL</h3>
<h3 id="使用者身份切换"><a class="markdownIt-Anchor" href="#使用者身份切换"></a> 使用者身份切换</h3>
<h3 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h3>
<p>1、查看配置文件/etc/shadow第一行中root账号的第三个字段（以’:'分隔）中的数字，请算一下这个数字是怎么来的？</p>
<p>距离19700101到修改密码的时间</p>
<p>2、写出一个您认为很强悍的密码.</p>
<p>3、查资料搞明白 /sbin/nologin 和 /bin/false 的区别，你知道他们用在什么场合吗？</p>
<ul>
<li>/sbin/nologin: 不允许登录</li>
<li>/bin/false: 任何服务都不允许</li>
</ul>
<p>4、请想一想，当我们创建一个新的账号时，系统会修改哪几个文件呢？</p>
<ul>
<li>/etc/passwd</li>
<li>/etc/shadow</li>
<li>/etc/group</li>
<li>/etc/gshadow</li>
</ul>
<p>5、假如我们已经创建了一个普通用户user1, 默认这个用户的家目录为/home/user1, 做实验证明能否直接修改/etc/passwd配置文件中user1的家目录那个字段而改变user1的家目录呢？ （提示: 您可以使用 “cd ~ ”命令来进入当前用户家目录的方法来验证）</p>
<p>可以直接修改/etc/passwd配置文件中user1的家目录</p>
<p>6、/etc/passwd 文件以&quot;:&quot;为分隔符，第三和第四个字段表示什么含义？如果把某一行的第三个字段改为’0’ 会发生什么？</p>
<p>如果修改为0，则表示该用户为超级用户</p>
<p>7、 先新增一个组group11，然后再新增一个账号user12, 使该账号所属组为刚刚新增的组。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd group11</span><br><span class="line">useradd –g group11 user12</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-g主组, -G附属组</p>
</blockquote>
<p>8、如果删除一个组时报错: “cannot remove the primary group of user ‘aming’” 这是什么意思？如何解决该问题呢？</p>
<p>因为待删除的组，是用户aming的主组，因此无法删除。 需要先将aming这个用户删除（或者将aming用户的主组修改为其他组）</p>
<p>9、如何删除某个账户时，连带这个账户的家目录一并删除？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel –r user0</span><br></pre></td></tr></table></figure>
<p>10、普通账户可以修改自己的密码吗？</p>
<p>11、使用su时，后面加了 ‘-’ 表示什么含义？</p>
<p>12、sudo的作用是什么呢？</p>
<p>13、创建系统账号时，帐户名要符合什么样的规范？</p>
<h2 id="磁盘管理"><a class="markdownIt-Anchor" href="#磁盘管理"></a> 磁盘管理</h2>
<h3 id="linux下的磁盘"><a class="markdownIt-Anchor" href="#linux下的磁盘"></a> Linux下的磁盘</h3>
<h3 id="df"><a class="markdownIt-Anchor" href="#df"></a> df</h3>
<h3 id="du"><a class="markdownIt-Anchor" href="#du"></a> du</h3>
<h3 id="fdisk"><a class="markdownIt-Anchor" href="#fdisk"></a> fdisk</h3>
<h3 id="mke2fs"><a class="markdownIt-Anchor" href="#mke2fs"></a> mke2fs</h3>
<h3 id="mkfs"><a class="markdownIt-Anchor" href="#mkfs"></a> mkfs</h3>
<h3 id="dumpe2fs"><a class="markdownIt-Anchor" href="#dumpe2fs"></a> dumpe2fs</h3>
<h3 id="e2label"><a class="markdownIt-Anchor" href="#e2label"></a> e2label</h3>
<h3 id="mountumount"><a class="markdownIt-Anchor" href="#mountumount"></a> mount/umount</h3>
<h2 id="shell编程"><a class="markdownIt-Anchor" href="#shell编程"></a> Shell编程</h2>
<h3 id="shell基础"><a class="markdownIt-Anchor" href="#shell基础"></a> Shell基础</h3>
<p>Shell程序（壳程序）的功能只是提供用户操作系统的一个接口。</p>
<p>命令(如ls, cp, mkdir等)都是独立的应用程序， 但是我们可以通过shell程序 (就是命令列模式) 来操作这些应用程序，让这些应用程序呼叫核心来运行所需的工作。</p>
<p>查看有哪些Shell：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/shells</span></span><br></pre></td></tr></table></figure>
<p>查看使用的是哪个Shell：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd</span></span><br></pre></td></tr></table></figure>
<p>Bash（Bourne-Again SHell）是一个命令处理器，通常运行于文本窗口中，并能执行用户直接输入的命令。/bin/bash 是 Linux 默认的 shell。</p>
<p>提示符：</p>
<ul>
<li><code>$</code> 普通用户</li>
<li><code>#</code> 超级用户（root）</li>
</ul>
<p>命令一般由三个部分组成：命令 选项 参数</p>
<p>bash 主要的优点:</p>
<ol>
<li>命令编修能力 (history)</li>
<li>命令与文件补全功能: (tab 按键的好处)</li>
<li>命令别名配置功能</li>
<li>工作控制、前景背景控制</li>
<li>程序化脚本</li>
<li>通配符</li>
</ol>
<p>特殊符号：</p>
<ul>
<li><code>*</code> (代表零个或多个任意字符)</li>
<li><code>?</code> (只代表一个任意的字符)</li>
<li><code>#</code> (注释符号)</li>
<li><code>\</code> (脱义字符)</li>
</ul>
<h4 id="历史记录"><a class="markdownIt-Anchor" href="#历史记录"></a> 历史记录</h4>
<p>按『上下键』就可以找到前/后一个输入的命令，还可以查看文件 <code>∼/.bash_history</code></p>
<ul>
<li><code>!!</code> 重复前一个命令</li>
<li><code>!字符</code> 重复前一个以‘字符’开头的命令</li>
<li><code>!num</code> 按照历史记录的序号执行命令</li>
<li><code>!?abc</code> 重复之前包含’abc’的命令</li>
<li><code>!-n</code> 重复前第n个命令</li>
<li>通过 Ctrl+R 在历史记录中搜索命令</li>
<li>重新调用前一个命令中的参数: 按esc之后再按.</li>
</ul>
<h4 id="补全功能"><a class="markdownIt-Anchor" href="#补全功能"></a> 补全功能</h4>
<p>Tab 接在一串命令的第一个字的后面，则为命令补全;</p>
<p>Tab 接在一串命令的第二个字以后时，则为『文件补齐』。</p>
<h4 id="命令别名"><a class="markdownIt-Anchor" href="#命令别名"></a> 命令别名</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias 别名=&#x27;命令&#x27;</span><br></pre></td></tr></table></figure>
<p>将linux下的rm命令改造成移动文件至回收站：</p>
<p>步骤1：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ∼/.trash</span><br><span class="line">vim ∼/.bashrc</span><br></pre></td></tr></table></figure>
<p>步骤2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> rm=<span class="string">&#x27;trash&#x27;</span></span><br><span class="line"><span class="function"><span class="title">trash</span></span>() &#123;</span><br><span class="line">  mv <span class="variable">$@</span> ∼/.trash/ </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="工作控制-前景背景控制"><a class="markdownIt-Anchor" href="#工作控制-前景背景控制"></a> 工作控制、前景背景控制</h4>
<ul>
<li>
<p>在后台运行进程：在命令后添加一个<code>&amp;</code></p>
</li>
<li>
<p>暂停某个程序：Ctrl+Z</p>
</li>
<li>
<p>管理后台作业：jobs、bg、fg</p>
</li>
</ul>
<h4 id="通配符"><a class="markdownIt-Anchor" href="#通配符"></a> 通配符</h4>
<ul>
<li><code>*</code> 匹配0个或多个</li>
<li><code>?</code> 匹配任意一个字符</li>
<li><code>[list]</code> 匹配list中任意一个字符</li>
<li><code>[!list]</code> 或 <code>[^list]</code> 匹配除了list中任意一个字符</li>
<li><code>[c1-c2]</code> 匹配区间内的任何一个字符</li>
<li><code>[!c1-c2]</code> 或 <code>[^c1-c2]</code>匹配区间外的任何一个字符</li>
<li><code>&#123;str1,str2,...&#125;</code> 匹配str1,str2,…其一</li>
</ul>
<blockquote>
<p>注意通配符中不能出现空格。</p>
</blockquote>
<h4 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h4>
<ul>
<li>定义: <code>变量名=变量值</code><br />
注意: 等号前后<strong>不能存在空格</strong></li>
<li>使用：<code>$变量名</code>、<code>$&#123;变量名&#125;</code>，或使用反单引号</li>
</ul>
<p>双引号: <strong>允许</strong>引用、转义</p>
<p>单引号: <strong>禁止</strong>引用、转义</p>
<p>反撇号, 或者<code>$()</code>: 以命令<strong>输出进行替换</strong></p>
<p><strong>环境变量</strong>：用来记录、设置运行参数</p>
<ul>
<li>HOME: 代表用户的家目录。</li>
<li>SHELL: 目前这个环境使用的 SHELL 是哪个程序. Linux 默认使用 /bin/bash</li>
<li>HISTSIZE: 命令历史记录数量。</li>
<li>MAIL: 使用 mail 这个命令在收信时，系统会去读取的邮件信箱文件。</li>
<li>PATH: 就是运行文件搜寻的路径，目录与目录中间以冒号(<code>:</code>)分隔，由于文件的搜寻是依序由 PATH 的变量内的目录来查询，所以，目录的顺序也是重要的。</li>
<li>PWD：当前工作目录。</li>
<li>LANG：系统语言以及字符编码。</li>
<li>LOGNAME：登录用户名。</li>
</ul>
<blockquote>
<p>基本上，在 Linux 默认的情况中，使用大写的字母来配置的变量一般为系统内定需要的变量.</p>
</blockquote>
<ul>
<li>env：观察<strong>环境变量</strong>与常见环境变量说明</li>
<li>set：观察所有变量 (含<strong>环境变量与自定义变量</strong>).</li>
<li>export：自定义变量转成环境变量</li>
</ul>
<p><strong>特殊变量</strong>：（由系统或脚本控制, 不能直接赋值）</p>
<ul>
<li><code>$?</code>: 前一条命令的状态值: 0为正常, 非0为异常.</li>
<li><code>$0</code>: 脚本自身的程序名.</li>
<li><code>$1</code> - <code>$9</code>: 第1 - 第9个位置参数</li>
<li><code>$*</code>: 命令行的所有位置参数内容</li>
<li><code>$#</code>: 命令行的位置参数个数</li>
</ul>
<ol>
<li>若该变量需要在其他子程序运行，则需要以 export 来使变量变成环境变量.</li>
<li>通常大写字符为系统默认变量，自行配置变量可 以使用小写字符，方便判断</li>
<li>取消变量的方法为使用 unset</li>
</ol>
<hr />
<p>在 PATH 这个变量当中添加：/home/dmtsai/bin</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> PATH=<span class="variable">$PATH</span>:/home/dmtsai/bin</span></span><br></pre></td></tr></table></figure>
<p>将name的内容多出“yes”</p>
<h2 id="-code11-"><a class="markdownIt-Anchor" href="#-code11-"></a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> name=<span class="string">&quot;<span class="variable">$name</span>&quot;</span>yes</span></span><br></pre></td></tr></table></figure></h2>
<h4 id="命令的运行顺序"><a class="markdownIt-Anchor" href="#命令的运行顺序"></a> 命令的运行顺序</h4>
<ol>
<li>以相对/绝对路径执行命令，例如<code>/bin/ls</code>或<code>./ls</code></li>
<li>由alias找到该命令来执行</li>
<li>由bash内置的(builtin)命令来执行</li>
<li>通过<code>$PATH</code>这个变量的顺序找到第一个命令来执行</li>
<li>都没有找到：提示“command not found”</li>
</ol>
<h3 id="管道与重定向"><a class="markdownIt-Anchor" href="#管道与重定向"></a> 管道与重定向</h3>
<p>大多数 UNIX/Linux 系统命令从<strong>终端接受输入</strong>并将所产生的输出<strong>发送回到终端</strong>.</p>
<ul>
<li>标准输入: 键盘</li>
<li>标准输出: 显示屏</li>
</ul>
<p>两种标准输出：</p>
<ul>
<li>标准输出 (STDOUT), 文件描述符 <strong>1</strong></li>
<li>标准错误输出 (STDERR), 文件描述符 <strong>2</strong></li>
</ul>
<p>一种标准输入:</p>
<ul>
<li>标准输入 (STDIN), 文件描述符为 <strong>0</strong></li>
</ul>
<h4 id="重定向"><a class="markdownIt-Anchor" href="#重定向"></a> 重定向</h4>
<p><strong>重定向</strong>:改变程序运行的<strong>输入源</strong>和<strong>输出地点</strong>.</p>
<p><strong>文件重定向</strong>:改变程序运行的<strong>输入源为某个文件</strong>, <strong>输出地点为某个文件</strong>.</p>
<ul>
<li><code>&gt;</code>：输出重定向 文件不存在则创建 存在会覆盖原有文件</li>
<li><code>&gt;&gt;</code>：输出重定向 文件不存在则创建 存在在原有文件后追加</li>
<li><code>&lt;</code>：输入重定向</li>
</ul>
<p>特殊文件 /dev/null：写入到它的内容都会被丢弃，将命令的输出重定向到它，会起到”禁止输出”的效果.</p>
<p>同时重定位标准输出和标准错误输出到统一文件：<code>&amp;&gt;file</code></p>
<h4 id="管道"><a class="markdownIt-Anchor" href="#管道"></a> 管道</h4>
<p><strong>管道</strong>是可以看作是一种特殊的重定向，将一个命令的输出重定向为另一个命令的输入。<br />
格式: <code>命令1|命令2|...|命令n</code>。操作符<code>|</code>右侧命令必须能够接受标准输入。管道不会使用标准错误输出。</p>
<h4 id="here-document-与-here-string"><a class="markdownIt-Anchor" href="#here-document-与-here-string"></a> Here Document 与 Here String</h4>
<p>Here Document 以两个连续的小于号<code>&lt;&lt;</code>开始，紧跟着一个特殊的字符序列，该字符序列在文档结尾处再次出现。它可以保存文字里面的换行或是缩进等空白字符。</p>
<p>Here String 以3个连续的小于号<code>&lt;&lt;&lt;</code>开始，紧跟着一个字符串。</p>
<p>在Unix shell里，Here Document 和 Here String 通常用于给命令提供输入内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tr a-z A-Z &lt;&lt;<span class="string">END_TEXT</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> one two three</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> uno dos tres</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> END_TEXT</span></span><br><span class="line">ONE TWO THREE</span><br><span class="line">UNO DOS TRES</span><br></pre></td></tr></table></figure>
<p><code>END_TEXT</code>被用作标识符，它指定了Here Document的开始和结束。</p>
<p>在<code>&lt;&lt;</code>后面添加一个减号，可以使TAB被忽略。这允许在shell脚本中缩进Here Document而不改变它们的值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tr a-z A-Z &lt;&lt;-<span class="string">END_TEXT</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         one two three</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">         uno dos tres</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> END_TEXT</span></span><br><span class="line">ONE TWO THREE</span><br><span class="line">UNO DOS TRES</span><br></pre></td></tr></table></figure>
<p>默认地，会进行变量替换和命令替换：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt; <span class="string">EOF</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Working dir <span class="variable">$PWD</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> EOF</span></span><br><span class="line">Working dir /home/user</span><br></pre></td></tr></table></figure>
<p>这可以通过使用引号包裹标识符来禁用。可以使用单引号或双引号：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt; <span class="string">&quot;EOF&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Working dir <span class="variable">$PWD</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> EOF</span></span><br><span class="line">Working dir $PWD</span><br></pre></td></tr></table></figure>
<p>bash，ksh或zsh中也可以用Here String：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tr a-z A-Z &lt;&lt;&lt;<span class="string">&quot;Yes it is a string&quot;</span></span></span><br><span class="line">YES IT IS A STRING</span><br></pre></td></tr></table></figure>
<h3 id="cut"><a class="markdownIt-Anchor" href="#cut"></a> cut</h3>
<p>将一行中的一段信息“切”出来, 处理的信息是以“行”为单位.</p>
<ul>
<li><code>-d</code>：自定义分隔符，默认为tab。</li>
<li><code>-c</code>：以字符为单位进行分割，指定字符范围。</li>
<li><code>-f</code>：指定显示哪个区域（字段）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将PATH变量取出，找出第5个路径.</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$PATH</span> | cut -d <span class="string">&#x27;:&#x27;</span> -f 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将PATH变量取出，找出第3, 第5个路径.</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$PATH</span> | cut -d <span class="string">&#x27;:&#x27;</span> -f 3,5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将<span class="variable">$PATH</span>输出的信息取得第12字符以后的所有字符串</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$PATH</span> | cut -c 12-</span></span><br></pre></td></tr></table></figure>
<h3 id="sort"><a class="markdownIt-Anchor" href="#sort"></a> sort</h3>
<p>按行排序</p>
<p>选项与参数:</p>
<ul>
<li><code>-f</code> :忽略大小写的差异，例如 A 与 a 视为编码相同;</li>
<li><code>-b</code> :忽略最前面的空格符部分;</li>
<li><code>-M</code> :以月份的名字来排序，例如 JAN, DEC 等等的排序方法;</li>
<li><code>-n</code> :使用『纯<strong>数字</strong>』进行排序(默认是以<strong>文字</strong>型态来排序的);</li>
<li><code>-r</code> :<strong>反向</strong>排序;</li>
<li><code>-u</code> :就是 uniq ，相同的数据中，仅出现一行代表;</li>
<li><code>-t</code> :分隔符，默认是用 [tab] 键来分隔;</li>
<li><code>-k</code> :以那个区间 (field) 来进行排序的意思</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 个人账号都记录在 /etc/passwd 下，请将账号进行排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd | sort -t <span class="string">&#x27;:&#x27;</span> -k1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sort -t <span class="string">&#x27;:&#x27;</span> -k1 /etc/passwd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sort -t <span class="string">&#x27;:&#x27;</span> -k1 &lt; /etc/passwd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/passwd 内容是以 : 来分隔的，我想以第三栏按数字大小来排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd | sort -t <span class="string">&#x27;:&#x27;</span> -k3 -n</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 利用 last ，将输出的数据仅取账号，并加以去重排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> last | cut -d <span class="string">&#x27; &#x27;</span> -f1 | sort -u</span></span><br></pre></td></tr></table></figure>
<h3 id="uniq"><a class="markdownIt-Anchor" href="#uniq"></a> uniq</h3>
<p>uniq 可检查文本文件中（相邻）重复出现的行。</p>
<ul>
<li><code>-c</code>或<code>--count</code> 在每列旁边显示该行重复出现的次数。</li>
<li><code>-d</code>或<code>--repeated</code> 仅显示<strong>重复出现</strong>的行。</li>
<li><code>-i</code>忽略大小写。</li>
<li><code>-u</code>或<code>--unique</code> 仅显示出<strong>一次</strong>的行。</li>
</ul>
<h3 id="wc"><a class="markdownIt-Anchor" href="#wc"></a> wc</h3>
<p>计算输出的信息的整体数据(默认输出行数、字数、字符数)</p>
<ul>
<li><code>-l</code>:仅列出<strong>行</strong>;</li>
<li><code>-w</code> :仅列出多少<strong>字</strong>(英文单字);</li>
<li><code>-m</code> :多少<strong>字符</strong>;</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以一行命令取得这个月份登陆系统的总人次</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> last | grep <span class="string">&quot;[a-zA-Z]&quot;</span> | grep -v <span class="string">&#x27;wtmp&#x27;</span> | wc -l</span></span><br></pre></td></tr></table></figure>
<h3 id="tee"><a class="markdownIt-Anchor" href="#tee"></a> tee</h3>
<p>同时将数据流分送到文件去与屏幕 (stdout)</p>
<ul>
<li><code>-a</code> : 追加到文件</li>
</ul>
<h3 id="tr"><a class="markdownIt-Anchor" href="#tr"></a> tr</h3>
<p>用来删除一段信息当中的文字，或者是进行文字信息的替换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tr [OPTION] SET1 [SET2]</span><br></pre></td></tr></table></figure>
<p>当SET1和SET2给出, 并且没有给出-d选项, 替换SET1中的每一个字符为<strong>相应</strong>SET2中的字符.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tr [:lower:] [:upper:]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tr a-z A-Z</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tr ’ &#123;&#125; ’ ’()’ &lt;inputfile&gt; outputfile</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;This is for testing&quot;</span> | tr [:space:] <span class="string">&#x27;.&#x27;</span></span></span><br><span class="line">This.is.for.testing.</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;This  is  for  testing&quot;</span> | tr [:space:] <span class="string">&#x27;.&#x27;</span></span> </span><br><span class="line">This..is..for..testing.</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;This  is  for  testing&quot;</span> | tr -s [:space:] <span class="string">&#x27;.&#x27;</span></span></span><br><span class="line">This.is.for.testing.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除某个字符</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;the geek stuff&quot;</span> | tr -d <span class="string">&#x27;t&#x27;</span></span></span><br><span class="line">he geek suff</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;my username is 432234&quot;</span> | tr -d [:digit:]</span></span><br><span class="line">my username is</span><br><span class="line"><span class="meta">#</span><span class="bash"> 仅保留可打印字符</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tr -<span class="built_in">cd</span> [:<span class="built_in">print</span>:] &lt; file.txt</span></span><br></pre></td></tr></table></figure>
<h3 id="paste"><a class="markdownIt-Anchor" href="#paste"></a> paste</h3>
<p>paste 将两个文件中的每一行合并为一行, 中间以 [tab] 键隔开. <code>paste [-d] file1 file2</code></p>
<p>选项与参数：</p>
<ul>
<li><code>-d</code> ：后面可以接分隔字符。默认是以 [tab] 来分隔</li>
<li><code>-</code>：如果 file 部分写成 <code>-</code> ，表示来自 standard input 的数据。</li>
</ul>
<h3 id="expand"><a class="markdownIt-Anchor" href="#expand"></a> expand</h3>
<p>将 [tab] 按键转成空格键</p>
<ul>
<li><code>-t</code>：后面接数字。默认一个 tab 按键用 8 个空格键取代。</li>
</ul>
<h3 id="split"><a class="markdownIt-Anchor" href="#split"></a> split</h3>
<p>将一个大文件依据文件大小或行数来分割. <code>split [-bl] file PREFIX</code></p>
<ul>
<li><code>-b</code> ：后面可接欲分割成的文件大小，可加单位，例如 b, k, m 等；</li>
<li><code>-l</code> ：以行数来进行分割。</li>
<li><code>PREFIX</code> ：代表前导符的意思，可作为分割后文件的前导文字。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> split -b 300k /etc/termcap termcap</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -al / | split -l 10 - lsroot</span></span><br></pre></td></tr></table></figure>
<h3 id="shell基础练习"><a class="markdownIt-Anchor" href="#shell基础练习"></a> Shell基础练习</h3>
<p>1、设置环境变量 HISTSIZE , 使其能够保存10000条命令历史。</p>
<p>修改/etc/profile文件里抽HISTSIZE的值为10000</p>
<p>2、为什么如果这样设置PS1 (<code>PS1=&quot;[\u@\h \W]\$ &quot;</code>) 显示的结果和我们预想的不一样，那要如何设置才能恢复原来默认的？</p>
<p><code>PS1='[\u@\h \W]\$'</code></p>
<p>3、想办法把当前目录下的文件的文件名中的小写字母全部替换为大写字母。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for f in `ls`; do </span><br><span class="line">  if echo $f | grep -q &#x27;[a-z]&#x27;; then </span><br><span class="line">    mv $f `echo $f | tr [a-z] [A-Z]`; </span><br><span class="line">  fi; </span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>4、使用sort以&quot;<code>:</code>&quot;为分隔符，对/etc/passwd文件的第5段排序。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort -k5 -t: /etc/passwd</span><br></pre></td></tr></table></figure>
<p>5、使用cut以&quot;<code>:</code>&quot;为分隔符，截出/etc/passwd的第三段字符。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -d : -f 3 /etc/passwd</span><br></pre></td></tr></table></figure>
<p>6、简述这几个文件的作用：</p>
<p>系统环境变量 与 个人环境变量</p>
<ul>
<li>
<p>/etc/profile: 预设了几个重要的变量，例如 PATH, USER, LOGNAME…</p>
</li>
<li>
<p>/etc/bashrc: 预设umask和PS1</p>
</li>
<li>
<p>~/.bashrc: 专属于当前用户shell的bash信息</p>
</li>
<li>
<p>~/.bash_profile: 当前用户的个性化路径与环境变量的文件</p>
</li>
</ul>
<p>7、export 的作用是什么？</p>
<p>将局部变量转换为全局变量</p>
<p>局部变量: 仅在当前的shell下有效</p>
<p>全局变量: 在当前的shell以及其各子shell下均有效</p>
<p>8、linux下自定义变量要符合什么样的规则呢？</p>
<p>变量名: 以字母数字和下划线, 但不能以数字开头</p>
<p>变量定义的格式如: <code>a=b</code>, 其中a表示变量, b表示变量的内容，=号前后不能出现空格.</p>
<p>变量的引用: <code>$a</code>, 前在需要加<code>$</code>符号, 或者 <code>$&#123;a&#125;</code></p>
<p>9、如何把要运行的命令丢到后台跑？又如何把后台跑的进程给调到前台？</p>
<p><strong>把正在前台运行的命令放到后台</strong>:</p>
<p>(1) Ctrl + Z 暂停 (会打印作业编号); (2) bg 作业编号</p>
<p><strong>把还未运行的作业放到后台</strong>:</p>
<p>在命令后面加个<code>&amp;</code>, 如：<code>sleep 60 &amp;</code></p>
<p><strong>后台命令放到前台</strong>：</p>
<p>fg 作业编号</p>
<p>10、 列出当前目录下以&quot;test&quot;开头的文件和目录。</p>
<p><code>ls test*</code></p>
<p>11、 如何把一个命令的输出内容不仅打印到屏幕上而且还可以重定向到一个文件内？</p>
<p>使用tee 命令. 举例: <code>ls ./ | tee abc.txt</code></p>
<p>12、假如有个命令很长，我们如何使用一个简单的字符串代替这个复杂的命令呢？请举例说明。</p>
<p>使用alias别名</p>
<p><code>alias abc=&quot;………………&quot;</code></p>
<p>后面执行 abc</p>
<p>13、我如何实现这样的功能，把一条命令丢到后台运行，而且把其正确输出和错误输出同时重定向到一个文件内？</p>
<p><code>perl test.pl 1&gt; a.txt 2&gt;&amp;1 &amp;</code></p>
<p>14、如何按照大小（假如按照10M)分隔一个大文件，又如何按照行数(假如10000行)分隔？</p>
<p>使用split命令</p>
<p><code>split -b 10M abc.txt abc</code></p>
<p><code>split -l 10000 abc.txt abc</code></p>
<p>15、做实验，搞明白 ; &amp;&amp; || 这三个符号的含义。</p>
<p><code>命令1 ; 命令2</code> : 命令1和命令2之间没有什么关系，两个命令都会执行，先执行命令1再执行命令2</p>
<p><code>命令1 &amp;&amp; 命令2</code> : 如果命令1执行不成功, 那么不会执行命令2；如果命令1执行成功，执行命令2</p>
<blockquote>
<p>是否执行成功，返回值是否为0 (0表示成功)</p>
</blockquote>
<p><code>命令1 || 命令2</code> : 如果命令1执行成功, 则不执行命令2; 否则执行命令2</p>
<p>16、如果只想让某个用户使用某个变量如何做？</p>
<p><strong>个人环境变量</strong>的配置</p>
<p>可以去修改该用户的 <code>~/.bashrc</code>文件, 比如增加一行 <code>abc=123</code></p>
<p>然后再执行<code>source ~/.bashrc</code></p>
<p>17、使用哪个命令会把系统当中所有的变量以及当前用户定义的自定义变量列出来？</p>
<p>使用set命令</p>
<p>18、统计当前价目录中符号连接文件的个数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -lah | grep <span class="string">&quot;^l&quot;</span> | wc -l</span></span><br></pre></td></tr></table></figure>
<h3 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h3>
<p>正则表达式是与一组字符串匹配的模式。 模式由运算符，文字字符和元字符组成，它们具有特殊的含义。</p>
<p><code>^</code>符号与一行<strong>开头</strong>的字符串匹配。 <code>$</code>符号与行的<strong>结尾</strong>字符串匹配。</p>
<p>匹配所有<strong>空行</strong>的<code>^$</code>模式，即开头与结束都没有内容。</p>
<p><code>.</code>符号是与<strong>任何单个字符</strong>（除换行符）匹配的元字符。</p>
<p><code>[]</code>中括号表达式允许将字符括在中括号<code>[]</code>来匹配一组字符，可以在括号内指定一系列字符，如果方括号内的第一个字符是符号<code>^</code>，则它将匹配方括号中未括起来的任何字符。</p>
<table>
<thead>
<tr>
<th style="text-align:left">预定义字符</th>
<th style="text-align:left">字符类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>[:alnum:]</code></td>
<td style="text-align:left">字母数字字符 。</td>
</tr>
<tr>
<td style="text-align:left"><code>[:alpha:]</code></td>
<td style="text-align:left">字母字符。</td>
</tr>
<tr>
<td style="text-align:left"><code>[:blank:]</code></td>
<td style="text-align:left">空格和制表符。</td>
</tr>
<tr>
<td style="text-align:left"><code>[:digit:]</code></td>
<td style="text-align:left">数字。</td>
</tr>
<tr>
<td style="text-align:left"><code>[:lower:]</code></td>
<td style="text-align:left">小写字母。</td>
</tr>
<tr>
<td style="text-align:left"><code>[:upper:]</code></td>
<td style="text-align:left">大写字母。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">量词</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>*</code></td>
<td style="text-align:left">将前一项匹配零次或多次。</td>
</tr>
<tr>
<td style="text-align:left"><code>?</code></td>
<td style="text-align:left">将前一项匹配零或一次。</td>
</tr>
<tr>
<td style="text-align:left"><code>+</code></td>
<td style="text-align:left">匹配前一项一次或多次。</td>
</tr>
<tr>
<td style="text-align:left"><code>&#123;n&#125;</code></td>
<td style="text-align:left">精确匹配前一项<code>n次</code></td>
</tr>
<tr>
<td style="text-align:left"><code>&#123;n,&#125;</code></td>
<td style="text-align:left">至少匹配<code>n</code>次。</td>
</tr>
<tr>
<td style="text-align:left"><code>&#123;,m&#125;</code></td>
<td style="text-align:left">最多匹配前一项<code>m</code>次。</td>
</tr>
<tr>
<td style="text-align:left"><code>&#123;n,m&#125;</code></td>
<td style="text-align:left">匹配前一项从<code>n</code>至<code>m</code> 次。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">反斜杠表达式</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>\b</code></td>
<td style="text-align:left">匹配单词边界。</td>
</tr>
<tr>
<td style="text-align:left"><code>\&lt;</code></td>
<td style="text-align:left">匹配单词开头的空字符串。</td>
</tr>
<tr>
<td style="text-align:left"><code>\&gt;</code></td>
<td style="text-align:left">在单词末尾匹配一个空字符串。</td>
</tr>
<tr>
<td style="text-align:left"><code>\w</code></td>
<td style="text-align:left">匹配一个单词。</td>
</tr>
<tr>
<td style="text-align:left"><code>\s</code></td>
<td style="text-align:left">匹配空格。</td>
</tr>
</tbody>
</table>
<h3 id="grep"><a class="markdownIt-Anchor" href="#grep"></a> grep</h3>
<p>分析一行信息，如果当中有我们所需要的信息，就将该行拿出来.</p>
<p><code>grep [-acinv] [- -color=auto] '查找字符串' filename</code></p>
<p>选项与参数：</p>
<ul>
<li>-a : 将 binary 文件以 text 文件的方式搜寻数据</li>
<li>-c : 计算找到 ’搜寻字符串’ 的次数</li>
<li>-i : 忽略大小写的不同，所以大小写视为相同</li>
<li>-n : 顺便输出行号</li>
<li>-v : 反向选择，亦即显示出没有 ’搜寻字符串’ 内容的那一行</li>
<li>-w : 匹配整词</li>
<li>–color=auto : 可以将找到的关键词部分加上颜色的显示</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 last 当中，有出现 root 的那一行就取出来;</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> last: 登录到这台机器的用户记录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> last | grep <span class="string">&#x27;root&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 与上一条相反，只要没有 root 的就取出.</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> last | grep -v <span class="string">&#x27;root&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 last 的输出信息中，只要有 root 就取出，并且仅取第一栏.</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> last | grep <span class="string">&#x27;root&#x27;</span> | cut -d <span class="string">&#x27; &#x27;</span> -f1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取出 /etc/man.config 内含 MANPATH 的那几行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">&#x27;MANPATH&#x27;</span> /etc/man.config</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/man.config | grep <span class="string">&#x27;MANPATH&#x27;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">&#x27;MANPATH&#x27;</span> &lt; /etc/man.config</span></span><br></pre></td></tr></table></figure>
<p>GNU <code>grep</code> 支持三种正则表达式语法Basic，Extended和Perl-compatible。</p>
<p>当没有给出正则表达式类型时，<code>grep</code> 以Basic的形式调用，<code>grep</code>将搜索模式解释为Basic正则表达式。 要将模式解释为Extended的正则表达式，请使用<code>-E</code>（或<code>--extended-regexp</code>）选项。</p>
<blockquote>
<p>在Basic正则表达式中，元字符<code>?</code>，<code>+</code>，<code>&#123;</code>，<code>|</code>，<code>(</code> 和 <code>)</code> 被解释为<strong>文字字符</strong>。 为了在使用基本正则表达式时保持元字符的特殊含义，必须使用<strong>反斜杠</strong>（<code>\</code>）对字符进行转义。（扩展不需要转义）</p>
</blockquote>
<p>应始终将正则表达式括在单引号中，以避免shell解释和扩展元字符。</p>
<p>如果搜索包含空格的字符串，则需要将其用<strong>单引号或双引号</strong>引起来。</p>
<h3 id="awk编程语言数据处理引擎"><a class="markdownIt-Anchor" href="#awk编程语言数据处理引擎"></a> awk（编程语言/数据处理引擎）</h3>
<p><code>awk '模式 [操作]' 文件1 文件2 ......</code></p>
<p>-F 选项：设置分割字段当字符。</p>
<p>每个awk程序都是 <strong>一个或多个 模式-操作</strong> 语句的序列。awk 的基本操作是一行一行的扫描输入，搜索匹配任意程序中模式的行。“匹配”的准确意义是视具体的模式而言，对于模式 $3&gt;0 来说，意思是“条件为真”。 每个模式依次测试每个输入行。对于匹配到行的模式，其对应的动作（也许包含多步）得到执行，然后读取下一行并继续匹配，直到所有的输入读取完毕。</p>
<p><strong>由于模式和动作两者任一都是可选的，所以需要使用大括号包围动作用以区分其他模式。</strong></p>
<p>假设存在一个文件 emp.data，其中包含员工的姓名、薪资（美元/小时）以及小时数，一个员工一行数据，其内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Beth	4.00	0</span><br><span class="line">Dan	3.75	0</span><br><span class="line">kathy	4.00	10</span><br><span class="line">Mark	5.00	20</span><br><span class="line">Mary	5.50	22</span><br><span class="line">Susie	4.25	18</span><br></pre></td></tr></table></figure>
<p>打印工作时长超过0小时的员工姓名和工资(薪资乘以时间)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$3&gt;0 &#123;print $1, $2*$3&#125;&#x27;</span>  emp.data</span></span><br><span class="line">kathy 40</span><br><span class="line">Mark 100</span><br><span class="line">Mary 121</span><br><span class="line">Susie 76.5</span><br></pre></td></tr></table></figure>
<p>打印没有工作过的员工姓名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$3==0 &#123;print $1&#125;&#x27;</span>  emp.data</span></span><br><span class="line">Beth</span><br><span class="line">Dan</span><br></pre></td></tr></table></figure>
<p>也可以省略命令行中的输入文件，仅仅输入： <code>awk 'program codes'</code> 在这种情况下，awk 将会应用于你在终端接着输入的任意数据行，直到你输入一个文件结束信号（Unix系统上为control-d）。示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$3&gt;0 &#123;print $1&#125;&#x27;</span></span></span><br><span class="line">Mary 20 1000   #输入该行回车</span><br><span class="line">Mary  # 计算机输出，匹配到了信息</span><br><span class="line">Belly 30 3000  #继续输入改行</span><br><span class="line">Belly #计算机输出</span><br></pre></td></tr></table></figure>
<p><strong>注意事项：</strong> 命令行中的程序是用单引号包围着的。这会防止shell解释程序中<code>$</code> 这样的字符，也允许程序的长度超过一行。 <strong>当程序比较长的时候，可以将程序写入到一个文件</strong>，以下命令行： <code>awk -f programfile optional list of input files</code></p>
<p>其中 -f 选项指示 awk 从指定文件中获取程序。可以使用任意文件名替换 programfile。</p>
<p>awk中仅仅只有两种类型 <strong>数值</strong>、 <strong>字符</strong> 构成的字符串。通常情况下，一个字段是一个不包含任何空格或制表符的连续字符序列。 当前输入的 行中的第一个字段被称作 <code>$1</code>，第二个是 <code>$2</code>，以此类推。 整个行的内容被定义为 <code>$0</code>。 每一行的字段数量可以不同。</p>
<h4 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出</h4>
<p>如果一个动作没有任何模式，这个动作针对所有输入的行进行操作，print 语句用来打印（输出）当前输入的行，<code>&#123;print&#125;</code> 等效于 <code>&#123;print $0&#125;</code>。</p>
<p>也可以指定特定的表达式： <code>&#123;print $1,$3&#125;</code>。在 print 语句中被逗号分隔的表达式，在默认情况下他们将会用一个空格分割来输出。每一行print生成的内容都会以一个换行符作为结束。还可以在字段中间或者计算的值中间打印输出想要的内容： <code>&#123;print &quot;total pay for&quot;, $1, &quot;is&quot;, $2*$3&#125;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;&#123;print &quot;total pay for&quot;, $1, &quot;is&quot;, $2*$3&#125;&#x27;</span> emp.data</span></span><br><span class="line">total pay for Beth is 0</span><br><span class="line">total pay for Dan is 0</span><br><span class="line">total pay for kathy is 40</span><br><span class="line">total pay for Mark is 100</span><br><span class="line">total pay for Mary is 121</span><br><span class="line">total pay for Susie is 76.5</span><br></pre></td></tr></table></figure>
<p><strong>NF</strong>： AWK 会对当前输入的行<strong>有多少字段</strong>进行计数，并且将当前行的字段数量存储在一个内建的称为 <strong>NF</strong> 的变量中。因此 <code>&#123;print NF,$1,$NF&#125;</code> 会打印出 <u>每一行的字段数量、第一个字段的值、最后一个字段的值</u>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;&#123;print NF,$1,$NF&#125;&#x27;</span> emp.data</span></span><br><span class="line">3 Beth 0</span><br><span class="line">3 Dan 0</span><br><span class="line">3 kathy 10</span><br><span class="line">3 Mark 20</span><br><span class="line">3 Mary 22</span><br><span class="line">3 Susie 18</span><br></pre></td></tr></table></figure>
<p><strong>NR</strong>：存储了当前已经读取了多少行的计数。可以使用 NR 和<code>$0</code>给emp.data的每一行加上行号： <code>&#123;print NR,$0&#125;</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;&#123;print NR,$0&#125;&#x27;</span> emp.data</span></span><br><span class="line">1 Beth  4.00    0</span><br><span class="line">2 Dan   3.75    0</span><br><span class="line">3 kathy 4.00    10</span><br><span class="line">4 Mark  5.00    20</span><br><span class="line">5 Mary  5.50    22</span><br><span class="line">6 Susie 4.25    18</span><br></pre></td></tr></table></figure>
<p><strong>printf 语句</strong>：<code>printf(format, value1, value2, ..., valueN)</code></p>
<p>其中 format 是字符串，包含要逐字打印的文本，穿插在 format 之后的每个值该如何打印的规格。一个规格是一个 % 符，后面跟着一些字符，用来控制一个 value 的格式。因此，有过少个 value 要打印，在 format 中就要有多少个 % 规格。 打印每个员工的总薪酬：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;&#123;printf(&quot;total pay for %s is $%.2f\n&quot;, $1, $2*$3)&#125;&#x27;</span>  emp.data</span></span><br><span class="line">total pay for Beth is $0.00</span><br><span class="line">total pay for Dan is $0.00</span><br><span class="line">total pay for kathy is $40.00</span><br><span class="line">total pay for Mark is $100.00</span><br><span class="line">total pay for Mary is $121.00</span><br><span class="line">total pay for Susie is $76.50</span><br></pre></td></tr></table></figure>
<p><strong>排序</strong>：</p>
<p>以薪酬递增的方式输出每一行：将awk的输出通过管道传给 **sort **命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;&#123;printf(&quot;%6.2f %s\n&quot;, $2*$3, $0)&#125;&#x27;</span> emp.data | sort</span></span><br><span class="line">  0.00  Beth    4.00    0</span><br><span class="line">  0.00  Dan     3.75    0</span><br><span class="line">100.00  Mark    5.00    20</span><br><span class="line">121.00  Mary    5.50    22</span><br><span class="line"> 40.00  kathy   4.00    10</span><br><span class="line"> 76.50  Susie   4.25    18</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若要按照第一列的数值大小排序，sort需要添加 <code>-k1n</code> 选项。</p>
</blockquote>
<h4 id="选择"><a class="markdownIt-Anchor" href="#选择"></a> 选择</h4>
<h5 id="通过对比选择"><a class="markdownIt-Anchor" href="#通过对比选择"></a> 通过对比选择</h5>
<p>使用一个对比模式来选择每小时赚5美元或更多的员工记录，亦即第二个字段大于等于5的行： <code>$2&gt;=5</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$2&gt;=5&#x27;</span>  emp.data</span></span><br><span class="line">Mark    5.00    20</span><br><span class="line">Mary    5.50    22</span><br></pre></td></tr></table></figure>
<h5 id="通过计算选择"><a class="markdownIt-Anchor" href="#通过计算选择"></a> 通过计算选择</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$2*$3&gt;50 &#123;printf(&quot;$%.2f for %s\n&quot;, $2*$3, $1)&#125;&#x27;</span> emp.data</span></span><br><span class="line"><span class="meta">$</span><span class="bash">100.00 <span class="keyword">for</span> Mark</span></span><br><span class="line"><span class="meta">$</span><span class="bash">121.00 <span class="keyword">for</span> Mary</span></span><br><span class="line"><span class="meta">$</span><span class="bash">76.50 <span class="keyword">for</span> Susie</span></span><br></pre></td></tr></table></figure>
<h5 id="通过文本内容选择"><a class="markdownIt-Anchor" href="#通过文本内容选择"></a> 通过文本内容选择</h5>
<p>除了数值测试，还可以选择包含特定单词或短语的输入行。这个程序会打印所有第一个字段为 Susie 的行：<code>$1==&quot;Susie&quot;</code></p>
<p>操作符 == 用于测试相等性。 也可以使用<strong>正则表达式</strong>的模式查找包含任意任意字母组合，单词或短语的文本。如以下可以匹配到任意位置包含Susie的行： <code>/Susie/</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;/Susie/&#x27;</span>  emp.data</span></span><br><span class="line">Susie   4.25    18</span><br></pre></td></tr></table></figure>
<h5 id="模式组合"><a class="markdownIt-Anchor" href="#模式组合"></a> 模式组合</h5>
<p>可以使用括号和逻辑操作符号与<code>&amp;&amp;</code>、或<code>||</code>，以及非<code>!</code> 对模式进行组合。 <code>$2&gt;=4||$3&gt;=20</code> 会打印第二个字段大于等于4或者第三个字段大于等于20的行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$2&gt;=4||$3&gt;=20&#x27;</span>  emp.data</span></span><br><span class="line">Beth    4.00    0</span><br><span class="line">kathy   4.00    10</span><br><span class="line">Mark    5.00    20</span><br><span class="line">Mary    5.50    22</span><br><span class="line">Susie   4.25    18</span><br></pre></td></tr></table></figure>
<h4 id="begin-与-end"><a class="markdownIt-Anchor" href="#begin-与-end"></a> BEGIN 与 END</h4>
<p>特殊模式 BEGIN 用于匹配第一个输入文件的第一行之前的位置。END 则用于匹配处理过的最后一个文件的最后一行的位置。</p>
<p>这个程序使用 BEGIN 来输出一个标题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;BEGIN &#123;print &quot;Name RATE HOURS&quot;; print &quot;&quot;&#125; &#123;print&#125;&#x27;</span> emp.data</span></span><br><span class="line">Name RATE HOURS</span><br><span class="line"></span><br><span class="line">Beth    4.00    0</span><br><span class="line">Dan     3.75    0</span><br><span class="line">kathy   4.00    10</span><br><span class="line">Mark    5.00    20</span><br><span class="line">Mary    5.50    22</span><br><span class="line">Susie   4.25    18</span><br></pre></td></tr></table></figure>
<p><strong>注意事项：</strong></p>
<ul>
<li>awk 可以在一行上放多个语句，使用分号<code>;</code>进行分隔。</li>
<li>普通的 <code>print</code>是打印当前输入行，<code>print &quot;&quot;</code> 则会打印一个空行。</li>
</ul>
<p>AWK 是按一行一行地读取输入的。</p>
<ul>
<li>1.首先执行 <strong>BEGIN</strong> 块</li>
<li>2.从输入中读取一行</li>
<li>3.在这次读取的这一行中执行 AWK 命令</li>
<li>4.如果文件还没有读取完毕，则重复步骤2、3</li>
<li>5.执行 <strong>END</strong> 块中的 awk 命令</li>
</ul>
<h4 id="使用-awk-进行计算"><a class="markdownIt-Anchor" href="#使用-awk-进行计算"></a> 使用 AWK 进行计算</h4>
<h5 id="计数"><a class="markdownIt-Anchor" href="#计数"></a> 计数</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$3 &gt; 15 &#123;emp = emp + 1&#125; END &#123;print emp, &quot;employees worked more than 15 hours&quot;&#125;&#x27;</span> emp.data</span></span><br><span class="line">3 employees worked more than 15 hours</span><br></pre></td></tr></table></figure>
<p>用作数字的 awk 变量的默认初始值为0， 所以不需要初始化 emp。创建一个变量emp初始值为0，如果读入的那一行的第三个字段大于15，则emp在自身值的基础上自增1，读完最后一行后输出存在多少个员工工作时长超过15个小时的语句。</p>
<h5 id="求和与平均值"><a class="markdownIt-Anchor" href="#求和与平均值"></a> 求和与平均值</h5>
<p>为计算员工数目，可以使用内置变量 NR，保存了当前位置读取的行数；在所有输入的结尾它的值就是所读行的总行数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;END &#123;print NR, &quot;employees&quot;&#125;&#x27;</span>  emp.data</span></span><br><span class="line">6 employees</span><br></pre></td></tr></table></figure>
<p>如下是一个使用 NR 来计算薪酬均值的程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;&#123;pay = pay + $2*$3&#125; \</span></span></span><br><span class="line"><span class="bash">END &#123;<span class="built_in">print</span> NR, <span class="string">&quot;employees&quot;</span> \</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span> <span class="string">&quot;total pay is&quot;</span>, pay \</span></span><br><span class="line"><span class="bash"><span class="built_in">print</span> <span class="string">&quot;average pay is&quot;</span>, pay/NR \</span></span><br><span class="line"><span class="bash">&#125;<span class="string">&#x27; emp.data</span></span></span><br><span class="line">6 employees</span><br><span class="line">total pay is 337.5</span><br><span class="line">average pay is 56.25</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意awk程序中变量不需要以<code>$</code>开头!</p>
</blockquote>
<h4 id="处理文本"><a class="markdownIt-Anchor" href="#处理文本"></a> 处理文本</h4>
<p>awk 的优势之一是能像大多数语言处理数字一样方便地处理字符串。 awk 可以保存数字也可以保存字符。找出时薪最高的员工:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;$2 &gt; maxrate &#123; maxrate = $2; maxemp = $1 &#125; \</span></span></span><br><span class="line"><span class="bash">END &#123; <span class="built_in">print</span> <span class="string">&quot;highest hourly rate:&quot;</span>, maxrate, <span class="string">&quot;for&quot;</span>, maxemp &#125;<span class="string">&#x27; emp.data</span></span></span><br><span class="line">highest hourly rate: 5.50 for Mary</span><br><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;&#123;names = names $1 &quot; &quot;&#125; END &#123;print names&#125;&#x27;</span> emp.data</span></span><br><span class="line">Beth Dan kathy Mark Mary Susie </span><br></pre></td></tr></table></figure>
<h4 id="打印最后一个输入行"><a class="markdownIt-Anchor" href="#打印最后一个输入行"></a> 打印最后一个输入行</h4>
<p>虽然在 END 动作中 NR 还保留着它的值， 但 $0 没有。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27; &#123;last = $0&#125; END &#123;print last&#125;&#x27;</span> emp.data</span></span><br><span class="line">Susie   4.25    18</span><br></pre></td></tr></table></figure>
<h3 id="sed"><a class="markdownIt-Anchor" href="#sed"></a> sed</h3>
<p>sed全名叫stream editor，流编辑器，用程序的方式来编辑文本。</p>
<h4 id="用s命令替换"><a class="markdownIt-Anchor" href="#用s命令替换"></a> 用s命令替换</h4>
<p>使用下面的这段文本做演示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat pets.txt</span></span><br><span class="line">This is my cat</span><br><span class="line">  my cat&#x27;s name is betty</span><br><span class="line">This is my dog</span><br><span class="line">  my dog&#x27;s name is frank</span><br><span class="line">This is my fish</span><br><span class="line">  my fish&#x27;s name is george</span><br><span class="line">This is my goat</span><br><span class="line">  my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<p>把其中的my字符串替换成Hao Chen’s（<code>s</code>表示替换命令，<code>/my/</code>表示匹配my，<code>/Hao Chen’s/</code>表示把匹配替换成Hao Chen’s，<code>/g</code> 表示一行上的替换所有的匹配）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&quot;s/my/Hao Chen&#x27;s/g&quot;</span> pets.txt</span></span><br><span class="line">This is Hao Chen&#x27;s cat</span><br><span class="line">  Hao Chen&#x27;s cat&#x27;s name is betty</span><br><span class="line">This is Hao Chen&#x27;s dog</span><br><span class="line">  Hao Chen&#x27;s dog&#x27;s name is frank</span><br><span class="line">This is Hao Chen&#x27;s fish</span><br><span class="line">  Hao Chen&#x27;s fish&#x27;s name is george</span><br><span class="line">This is Hao Chen&#x27;s goat</span><br><span class="line">  Hao Chen&#x27;s goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<p>注意：如果你要使用单引号，那么你没办法通过<code>\’</code>这样来转义，就有双引号就可以了，在双引号内可以用<code>\”</code>来转义。</p>
<p>再注意：上面的sed并没有对文件的内容改变，只是把处理过后的内容输出，如果要写回文件可以使用<strong>重定向</strong>，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&quot;s/my/Hao Chen&#x27;s/g&quot;</span> pets.txt &gt; hao_pets.txt</span></span><br></pre></td></tr></table></figure>
<p>或使用 <code>-i</code> 参数直接修改文件内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">&quot;s/my/Hao Chen&#x27;s/g&quot;</span> pets.txt</span></span><br></pre></td></tr></table></figure>
<p>在每一行最前面加点东西：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;s/^/#/g&#x27;</span> pets.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash">This is my cat</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  my cat<span class="string">&#x27;s name is betty</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">This is my dog</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  my dog<span class="string">&#x27;s name is frank</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">This is my fish</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  my fish<span class="string">&#x27;s name is george</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">This is my goat</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  my goat<span class="string">&#x27;s name is adam</span></span></span><br></pre></td></tr></table></figure>
<p>在每一行最后面加点东西：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;s/$/ --- /g&#x27;</span> pets.txt</span></span><br><span class="line">This is my cat ---</span><br><span class="line">  my cat&#x27;s name is betty ---</span><br><span class="line">This is my dog ---</span><br><span class="line">  my dog&#x27;s name is frank ---</span><br><span class="line">This is my fish ---</span><br><span class="line">  my fish&#x27;s name is george ---</span><br><span class="line">This is my goat ---</span><br><span class="line">  my goat&#x27;s name is adam ---</span><br></pre></td></tr></table></figure>
<p>要去掉某html中的tags：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>This<span class="tag">&lt;/<span class="name">b</span>&gt;</span> is what <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: underline;&quot;</span>&gt;</span>I<span class="tag">&lt;/<span class="name">span</span>&gt;</span> meant. Understand?</span><br></pre></td></tr></table></figure>
<p>sed命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果你这样搞的话，就会有问题</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;s/&lt;.*&gt;//g&#x27;</span> html.txt</span></span><br><span class="line"> Understand?</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 要解决上面的那个问题，就得像下面这样。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其中的<span class="string">&#x27;[^&gt;]&#x27;</span> 指定了除了&gt;的字符重复0次或多次。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;s/&lt;[^&gt;]*&gt;//g&#x27;</span> html.txt</span></span><br><span class="line">This is what I meant. Understand?</span><br></pre></td></tr></table></figure>
<p>指定需要替换的内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&quot;3s/my/your/g&quot;</span> pets.txt</span></span><br><span class="line">This is my cat</span><br><span class="line">  my cat&#x27;s name is betty</span><br><span class="line">This is your dog</span><br><span class="line">  my dog&#x27;s name is frank</span><br><span class="line">This is my fish</span><br><span class="line">  my fish&#x27;s name is george</span><br><span class="line">This is my goat</span><br><span class="line">  my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<p>下面的命令只替换第3到第6行的文本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&quot;3,6s/my/your/g&quot;</span> pets.txt</span></span><br><span class="line">This is my cat</span><br><span class="line">  my cat&#x27;s name is betty</span><br><span class="line">This is your dog</span><br><span class="line">  your dog&#x27;s name is frank</span><br><span class="line">This is your fish</span><br><span class="line">  your fish&#x27;s name is george</span><br><span class="line">This is my goat</span><br><span class="line">  my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br><span class="line">This is my dog, my dog&#x27;s name is frank</span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br><span class="line">This is my goat, my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<p>只替换每一行的第一个s：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;s/s/S/1&#x27;</span> my.txt</span></span><br><span class="line">ThiS is my cat, my cat&#x27;s name is betty</span><br><span class="line">ThiS is my dog, my dog&#x27;s name is frank</span><br><span class="line">ThiS is my fish, my fish&#x27;s name is george</span><br><span class="line">ThiS is my goat, my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<p>只替换每一行的第二个s：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;s/s/S/2&#x27;</span> my.txt</span></span><br><span class="line">This iS my cat, my cat&#x27;s name is betty</span><br><span class="line">This iS my dog, my dog&#x27;s name is frank</span><br><span class="line">This iS my fish, my fish&#x27;s name is george</span><br><span class="line">This iS my goat, my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<p>只替换每一行的第3个以后的s：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;s/s/S/3g&#x27;</span> my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;S name iS betty</span><br><span class="line">This is my dog, my dog&#x27;S name iS frank</span><br><span class="line">This is my fiSh, my fiSh&#x27;S name iS george</span><br><span class="line">This is my goat, my goat&#x27;S name iS adam</span><br></pre></td></tr></table></figure>
<h4 id="多个匹配"><a class="markdownIt-Anchor" href="#多个匹配"></a> 多个匹配</h4>
<p>如果我们需要一次替换多个模式，可参看下面的示例：（第一个模式把第一行到第三行的my替换成your，第二个则把第3行以后的This替换成了That）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;1,3s/my/your/g; 3,$s/This/That/g&#x27;</span> my.txt</span></span><br><span class="line">This is your cat, your cat&#x27;s name is betty</span><br><span class="line">This is your dog, your dog&#x27;s name is frank</span><br><span class="line">That is your fish, your fish&#x27;s name is george</span><br><span class="line">That is my goat, my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<p>上面的命令等价于：（注：下面使用的是sed的-e命令行参数）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -e <span class="string">&#x27;1,3s/my/your/g&#x27;</span> -e <span class="string">&#x27;3,$s/This/That/g&#x27;</span> my.txt</span></span><br></pre></td></tr></table></figure>
<p>我们可以使用**&amp;**来当做被匹配的变量，然后可以在基本左右加点东西。如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;s/my/[&amp;]/g&#x27;</span> my.txt</span></span><br><span class="line">This is [my] cat, [my] cat&#x27;s name is betty</span><br><span class="line">This is [my] dog, [my] dog&#x27;s name is frank</span><br><span class="line">This is [my] fish, [my] fish&#x27;s name is george</span><br><span class="line">This is [my] goat, [my] goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<h4 id="圆括号匹配"><a class="markdownIt-Anchor" href="#圆括号匹配"></a> 圆括号匹配</h4>
<p>使用圆括号匹配的示例：（圆括号括起来的正则表达式所匹配的字符串会可以当成变量来使用，sed中使用的是<code>\1</code>,<code>\2</code>…）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;s/This is my \([^,&amp;]*\),.*is \(.*\)/\1:\2/g&#x27;</span> my.txt</span></span><br><span class="line">cat:betty</span><br><span class="line">dog:frank</span><br><span class="line">fish:george</span><br><span class="line">goat:adam</span><br></pre></td></tr></table></figure>
<p>上面这个例子中的正则表达式有点复杂，解开如下（去掉转义字符）：</p>
<p>正则为：<code>This is my ([^,]*),.*is (.*)</code><br />
匹配为：<code>This is my (cat),......is (betty)</code></p>
<p>然后：<code>\1</code>就是<code>cat</code>，<code>\2</code>就是<code>betty</code></p>
<h4 id="sed命令"><a class="markdownIt-Anchor" href="#sed命令"></a> sed命令</h4>
<h5 id="n命令"><a class="markdownIt-Anchor" href="#n命令"></a> N命令</h5>
<p>先来看N命令 —— 把下一行的内容纳入当成缓冲区做匹配。</p>
<p>下面的的示例会把原文本中的偶数行纳入奇数行匹配，而s只匹配并替换一次，所以，就成了下面的结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;N;s/my/your/&#x27;</span> pets.txt</span></span><br><span class="line">This is your cat</span><br><span class="line">  my cat&#x27;s name is betty</span><br><span class="line">This is your dog</span><br><span class="line">  my dog&#x27;s name is frank</span><br><span class="line">This is your fish</span><br><span class="line">  my fish&#x27;s name is george</span><br><span class="line">This is your goat</span><br><span class="line">  my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<p>也就是说，原来的文件成了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is my cat\n  my cat&#39;s name is betty</span><br><span class="line">This is my dog\n  my dog&#39;s name is frank</span><br><span class="line">This is my fish\n  my fish&#39;s name is george</span><br><span class="line">This is my goat\n  my goat&#39;s name is adam</span><br></pre></td></tr></table></figure>
<p>这样一来，下面的例子你就明白了，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;N;s/\n/,/&#x27;</span> pets.txt</span></span><br><span class="line">This is my cat,  my cat&#x27;s name is betty</span><br><span class="line">This is my dog,  my dog&#x27;s name is frank</span><br><span class="line">This is my fish,  my fish&#x27;s name is george</span><br><span class="line">This is my goat,  my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<h5 id="a命令和i命令"><a class="markdownIt-Anchor" href="#a命令和i命令"></a> a命令和i命令</h5>
<p>a命令就是append， i命令就是insert，它们是用来添加行的。如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 其中的1 i表明，其要在第1行前插入一行（insert）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&quot;1 i This is my monkey, my monkey&#x27;s name is wukong&quot;</span> my.txt</span></span><br><span class="line">This is my monkey, my monkey&#x27;s name is wukong</span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br><span class="line">This is my dog, my dog&#x27;s name is frank</span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br><span class="line">This is my goat, my goat&#x27;s name is adam</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其中的1 a表明，其要在最后一行后追加一行（append）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&quot;1 a This is my monkey, my monkey&#x27;s name is wukong&quot;</span> my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br><span class="line">This is my monkey, my monkey&#x27;s name is wukong</span><br><span class="line">This is my dog, my dog&#x27;s name is frank</span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br><span class="line">This is my goat, my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<p>我们可以运用匹配来添加文本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意其中的/fish/a，这意思是匹配到/fish/后就追加一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&quot;/fish/a This is my monkey, my monkey&#x27;s name is wukong&quot;</span> my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br><span class="line">This is my dog, my dog&#x27;s name is frank</span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br><span class="line">This is my monkey, my monkey&#x27;s name is wukong</span><br><span class="line">This is my goat, my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<p>下面这个例子是对每个存在my的行都新插入一行<code>----</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&quot;/my/a ----&quot;</span> my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br><span class="line">----</span><br><span class="line">This is my dog, my dog&#x27;s name is frank</span><br><span class="line">----</span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br><span class="line">----</span><br><span class="line">This is my goat, my goat&#x27;s name is adam</span><br><span class="line">----</span><br></pre></td></tr></table></figure>
<h5 id="c命令"><a class="markdownIt-Anchor" href="#c命令"></a> c命令</h5>
<p>c 命令是替换匹配行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&quot;2 c This is my monkey, my monkey&#x27;s name is wukong&quot;</span> my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br><span class="line">This is my monkey, my monkey&#x27;s name is wukong</span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br><span class="line">This is my goat, my goat&#x27;s name is adam</span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&quot;/fish/c This is my monkey, my monkey&#x27;s name is wukong&quot;</span> my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br><span class="line">This is my dog, my dog&#x27;s name is frank</span><br><span class="line">This is my monkey, my monkey&#x27;s name is wukong</span><br><span class="line">This is my goat, my goat&#x27;s name is adam</span><br></pre></td></tr></table></figure>
<h5 id="d命令"><a class="markdownIt-Anchor" href="#d命令"></a> d命令</h5>
<p>删除匹配行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;/fish/d&#x27;</span> my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br><span class="line">This is my dog, my dog&#x27;s name is frank</span><br><span class="line">This is my goat, my goat&#x27;s name is adam</span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;2d&#x27;</span> my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br><span class="line">This is my goat, my goat&#x27;s name is adam</span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;2,**$d**&#x27;</span> my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br></pre></td></tr></table></figure>
<h5 id="p命令"><a class="markdownIt-Anchor" href="#p命令"></a> p命令</h5>
<p>打印命令，可以把这个命令当成grep式的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匹配fish并输出，可以看到fish的那一行被打了两遍，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这是因为sed处理时会把处理的信息输出</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;/fish/p&#x27;</span> my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br><span class="line">This is my dog, my dog&#x27;s name is frank</span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br><span class="line">This is my goat, my goat&#x27;s name is adam</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用n参数就好了</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -n <span class="string">&#x27;/fish/p&#x27;</span> my.txt</span></span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从一个模式到另一个模式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -n <span class="string">&#x27;/dog/,/fish/p&#x27;</span> my.txt</span></span><br><span class="line">This is my dog, my dog&#x27;s name is frank</span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">从第一行打印到匹配fish成功的那一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -n <span class="string">&#x27;1,/fish/p&#x27;</span> my.txt</span></span><br><span class="line">This is my cat, my cat&#x27;s name is betty</span><br><span class="line">This is my dog, my dog&#x27;s name is frank</span><br><span class="line">This is my fish, my fish&#x27;s name is george</span><br></pre></td></tr></table></figure>
<h5 id="命令打包"><a class="markdownIt-Anchor" href="#命令打包"></a> 命令打包</h5>
<p>第二个是cmd可以是多个，它们可以用分号分开，可以用大括号括起来作为嵌套命令。下面是几个例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat pets.txt</span></span><br><span class="line">This is my cat</span><br><span class="line">  my cat&#x27;s name is betty</span><br><span class="line">This is my dog</span><br><span class="line">  my dog&#x27;s name is frank</span><br><span class="line">This is my fish</span><br><span class="line">  my fish&#x27;s name is george</span><br><span class="line">This is my goat</span><br><span class="line">  my goat&#x27;s name is adam</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对3行到第6行，执行命令/This/d</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;3,6 &#123;/This/d&#125;&#x27;</span> pets.txt</span></span><br><span class="line">This is my cat</span><br><span class="line">  my cat&#x27;s name is betty</span><br><span class="line">  my dog&#x27;s name is frank</span><br><span class="line">  my fish&#x27;s name is george</span><br><span class="line">This is my goat</span><br><span class="line">  my goat&#x27;s name is adam</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对3行到第6行，匹配/This/成功后，再匹配/fish/，成功后执行d命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;3,6 &#123;/This/&#123;/fish/d&#125;&#125;&#x27;</span> pets.txt</span></span><br><span class="line">This is my cat</span><br><span class="line">  my cat&#x27;s name is betty</span><br><span class="line">This is my dog</span><br><span class="line">  my dog&#x27;s name is frank</span><br><span class="line">  my fish&#x27;s name is george</span><br><span class="line">This is my goat</span><br><span class="line">  my goat&#x27;s name is adam</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从第一行到最后一行，如果匹配到This，则删除之；如果前面有空格，则去除空格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed <span class="string">&#x27;1,$&#123;/This/d;s/^ *//g&#125;&#x27;</span> pets.txt</span></span><br><span class="line">my cat&#x27;s name is betty</span><br><span class="line">my dog&#x27;s name is frank</span><br><span class="line">my fish&#x27;s name is george</span><br><span class="line">my goat&#x27;s name is adam </span><br></pre></td></tr></table></figure>
<h3 id="正则表达式练习"><a class="markdownIt-Anchor" href="#正则表达式练习"></a> 正则表达式练习</h3>
<p>1、如何把 /etc/passwd 中用户uid 大于500 的行给打印出来？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -F &#x27;:&#x27; &#x27;$3&gt;500 &#123;print&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>
<p>2、awk中 NR，NF两个变量表示什么含义？<code>awk -F ':' '&#123;print $NR&#125;' /etc/passwd</code> 会打印出什么结果出来？</p>
<p>NR表示行数，NF表示一共有多少段。会打印出/etc/passwd文件中每行中和行数相同的列; 如果不存在，会输出空串.</p>
<p>3、用grep把1.txt文档中包含’abc’或者’123’的行过滤出来，并在过滤出来的行前面加上行号.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -E -n &#x27;123|abc&#x27; 1.txt</span><br></pre></td></tr></table></figure>
<p>4、<code>grep -v '^$' 1.txt</code> 这样会过滤出哪些行？</p>
<p>过滤出不为空行的行（非空白行）</p>
<p>5、<code>'.'</code>  <code>'*'</code> 和 <code>'.*'</code>  分别表示什么含义？<code>'+'</code>和<code>'?'</code>表示什么含义，这五个符号是否可以在grep中使用，是否可以在grep、sed以及awk中使用？</p>
<p><code>'.'</code>：匹配任意单个字符</p>
<p><code>'*'</code>：将前一项匹配零次或多次</p>
<p><code>'.*'</code>：匹配任意零至多个字符</p>
<p><code>'+'</code>：将前一项匹配一次或多次</p>
<p><code>'?'</code>：将前一项匹配零次或一次</p>
<p>都可以在grep中使用，其中<code>?</code>，<code>+</code>需要使用反斜杠转义或使用-E选项。</p>
<p>都可以在awk中使用，需使用<code>//</code>包裹。</p>
<p>6、grep 里面用到一个 <code>&#123;&#125;</code> ，它在什么情况下使用？</p>
<table>
<thead>
<tr>
<th>用法</th>
<th>情况</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&#123;n&#125;</code></td>
<td>精确匹配前一项n次</td>
</tr>
<tr>
<td><code>&#123;n,&#125;</code></td>
<td>至少匹配n次。</td>
</tr>
<tr>
<td><code>&#123;,m&#125;</code></td>
<td>最多匹配前一项m次。</td>
</tr>
<tr>
<td><code>&#123;n,m&#125;</code></td>
<td>匹配前一项从n至m 次。</td>
</tr>
</tbody>
</table>
<p>7、截取日志1.log的第一段(以空格为分隔符), 按数字排序、然后去重，但是需要保留重复的数量如何做？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;&#123;print $1&#125;&#x27; 1.log | sort -n | uniq -c</span><br></pre></td></tr></table></figure>
<p>8、使用awk过滤出1.log中第7段(空格分隔)为’200’ 并且第8段为’11897’的行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;$7==200&amp;&amp;$8==11897 &#123;print&#125;&#x27; 1.log</span><br></pre></td></tr></table></figure>
<p>9、请比较这两个命令的异同：<code>grep -v '^[0-9]' 1.txt</code> 和 <code>grep '^[^0-9]' 1.txt</code></p>
<p><code>grep -v '^[0-9]' 1.txt</code>会过滤出1.txt中除了以0-9开头的行以外的所有行；</p>
<p><code>grep '^[^0-9]' 1.txt</code>会过滤出1.txt中不以0-9开头的行。</p>
<p>两者输出结果中都不包含以0-9开头的行，但前者输出中包含空行，后者不包含。</p>
<p>10、awk中的<code>$0</code>表示什么？为什么以下两条命令的<code>$0</code>结果不一致呢？ <code>awk -F ':' '&#123;print $0&#125;' 1.txt</code>  和 <code>awk -F ':' '$7=1 &#123;print $0&#125;' 1.txt</code></p>
<p><code>$0</code> 表示整个行的内容</p>
<p><code>awk -F ':' '&#123;print $0&#125;' 1.txt</code> 会原样输出每一行</p>
<p><code>awk -F ':' '$7=1 &#123;print $0&#125;' 1.txt</code> 会将第7列替换为1，输出时不会输出分割字符串</p>
<p>11、使用grep过滤某个关键词时，如何把包含关键词的行连同上面一行打印出来，那下面一行呢？同时上面和下面都打印出来呢？</p>
<p>连同上面一行：-A1</p>
<p>下面一行：-B1</p>
<p>同时上面和下面都打印出来：-C1</p>
<p>12、假设stu.data的内容为如下所示，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Name Course1 Course2 Course3</span><br><span class="line">Mary 89 87 76</span><br><span class="line">Tom 98 78 89</span><br><span class="line">Tony 89 78 87</span><br><span class="line">Adam 90 76 87</span><br></pre></td></tr></table></figure>
<p>请使用awk编程，打印出平均分最高的学生姓名及其平均分.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27;BEGIN &#123; max_score=0; name=&quot;&quot;; &#125;</span></span></span><br><span class="line">&#123; if (NR &gt;= 2) &#123;</span><br><span class="line">    score=($2+$3+$4)/3;</span><br><span class="line">    if (score &gt; max_score) &#123;</span><br><span class="line">        max_score=score;</span><br><span class="line">        name=$1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; &#125;</span><br><span class="line">END &#123;print name,max_score&#125;&#x27; stu.data</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">&#x27; BEGIN &#123; score=0 &#125;</span></span></span><br><span class="line">&#123; if (NR &gt; 1 &amp;&amp; ($2+$3+$4) &gt; score) &#123; score=$2+$3+$4; name=$1 &#125; &#125;</span><br><span class="line">END &#123;print name,score/3&#125;&#x27; stu.data</span><br></pre></td></tr></table></figure>
<p>13、sed有一个选项，可以直接更改文本文件，是哪个选项？</p>
<p><code>-i</code> 选项</p>
<p>14、<code>sed -i 's/.*ie//;s/[&quot;|&amp;].*//' file</code>  这条命令表示什么操作呢？</p>
<p>删除文档中以ie结尾的字符串和以<code>&quot;</code>或<code>|</code>或<code>&amp;</code>开头的字符串</p>
<p>15、如何删除一个文档中的所有数字或者字母？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/[a-zA-Z0-9]//g&#x27; filename</span><br></pre></td></tr></table></figure>
<p>16、<strong>实现两个集合的交并差</strong>。假设两个文本文件a.txt和b.txt作为集合，每一行可以看作一个集合元素（每个文本中每行不重复）。</p>
<ul>
<li>
<p>A交B：<code>cat a.txt b.txt | sort | uniq -d</code></p>
<blockquote>
<p><code>-d</code> 表示的是输出出现次数大于1的内容</p>
</blockquote>
</li>
<li>
<p>A并B：<code>cat a.txt b.txt | sort | uniq</code></p>
</li>
<li>
<p>A-B：<code>cat a.txt b.txt b.txt | sort | uniq -u</code></p>
<blockquote>
<p><code>-u</code> 表示的是输出出现次数为1的内容</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统课程报告3：中央处理器与存储器系统速度及影响因素的探究</title>
    <url>/2022/01/14/os-report-3/</url>
    <content><![CDATA[<blockquote>
<p>操作系统是方便用户管理和控制计算机软硬件资源的程序集合，在用户和计算机硬件间充当中介的角色。操作系统在计算机系统之上完成了进程管理、内存管理、文件管理和 I/O 设备管理这四大任务，其中与计算机硬件设备中的 CPU 和存储器系统密切相关。因此，了解中央处理器与存储器系统速度及影响因素，以及对于不平衡的速度差距是如何解决的是必要的。</p>
</blockquote>


	<div class="row">
    <embed src="https://repo.live.holgerbest.top/pdf/os-report-3.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程报告</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统课程报告1：虚拟机的安装与使用</title>
    <url>/2021/09/28/os-report-1/</url>
    <content><![CDATA[<blockquote>
<p>虚拟机指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。本文基于工作站虚拟机软件 Oracle VM Virtual Box ，介绍了虚拟机的安装与使用，并根据实际操作的过程中遇到的问题进行了总结和整理。</p>
</blockquote>


	<div class="row">
    <embed src="https://repo.live.holgerbest.top/pdf/os-report-1.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程报告</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统课程报告2：多线程矩阵乘法</title>
    <url>/2021/10/30/os-report-2/</url>
    <content><![CDATA[<h2 id="数据"><a class="markdownIt-Anchor" href="#数据"></a> 数据</h2>
<p><code>64*64</code>,<code>128*128</code>, <code>512*512</code>和<code>1024*1024</code>双精度浮点数矩阵。</p>
<p><a href="http://get.holgerbest.top/data/mx.rar">下载</a></p>
<h2 id="要求"><a class="markdownIt-Anchor" href="#要求"></a> 要求</h2>
<ul>
<li>所有数据文件存放在和可执行文件相同的目录下</li>
<li>程序命名：学号.exe（Windows下）或学号.c（Linux下）</li>
<li>时间比赛程序输入：以上mx.rar中的两个<code>1024*1024</code>矩阵；输出：学号.txt，格式和<code>M1024A.txt</code>一致</li>
<li>所有同学的程序按照随机程序运行三遍，取平均值为最终时间。</li>
<li>运行环境：CPU：i7-6700K, 内存64GB，64位 Windows 10/Ubuntu, 所有文件存放在RAMDISK（用内存模拟硬盘）上。</li>
</ul>
<h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> THREADS = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> DATA_SIZE = N / THREADS;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* MATRIX_A_FILE = <span class="string">&quot;M1024A.txt&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* MATRIX_B_FILE = <span class="string">&quot;M1024B.txt&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* RESULT_FILE = <span class="string">&quot;1927405160.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* global variables */</span></span><br><span class="line"><span class="keyword">double</span> matrix_a[N][N];</span><br><span class="line"><span class="keyword">double</span> matrix_b[N][N];</span><br><span class="line"><span class="keyword">double</span> result[N][N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">THR_FUNC_PARAM</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a_start; </span><br><span class="line">    <span class="keyword">int</span> a_end; </span><br><span class="line">    <span class="keyword">int</span> b_start; </span><br><span class="line">    <span class="keyword">int</span> b_end;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* thread function */</span></span><br><span class="line"><span class="function">DWORD <span class="title">thr_func_calc</span><span class="params">(LPVOID IpParam)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  args *arg = (args *) _arg;</span></span><br><span class="line">    THR_FUNC_PARAM* pmd = (THR_FUNC_PARAM*) IpParam;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = pmd-&gt;a_start; i &lt; pmd-&gt;a_end; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = pmd-&gt;b_start; j &lt; pmd-&gt;b_end; ++j) &#123;</span><br><span class="line">            result[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; N; ++k) &#123;</span><br><span class="line">                result[i][j] += matrix_a[i][k] * matrix_b[j][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">thr_read_matrix_A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">double</span> number;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ifstream <span class="title">fin</span><span class="params">(MATRIX_A_FILE)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fin.is_open()) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;can&#x27;t read file:&quot;</span> &lt;&lt; MATRIX_A_FILE &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            fin &gt;&gt; number;</span><br><span class="line">            matrix_a[i][j] = number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fin.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">thr_read_matrix_B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">double</span> number;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ifstream <span class="title">fin</span><span class="params">(MATRIX_B_FILE)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fin.is_open()) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;can&#x27;t read file:&quot;</span> &lt;&lt; MATRIX_B_FILE &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            fin &gt;&gt; number;</span><br><span class="line">            matrix_b[j][i] = number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fin.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write_matrix</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* file_name, <span class="keyword">double</span> matrix[N][N])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ofstream <span class="title">out</span><span class="params">(file_name, <span class="built_in">std</span>::ios::out)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!out.is_open()) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;can&#x27;t write file:&quot;</span> &lt;&lt; file_name &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; <span class="built_in">std</span>::setiosflags(<span class="built_in">std</span>::ios::fixed);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            out &lt;&lt; matrix[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        out &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_matrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HANDLE hThread[<span class="number">2</span>];</span><br><span class="line">    hThread[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)thr_read_matrix_A, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    hThread[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)thr_read_matrix_B, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);;</span><br><span class="line">    WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">THR_FUNC_PARAM params[THREADS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> i, start, end;</span><br><span class="line">    <span class="comment">/* read matrix a and b */</span></span><br><span class="line">    read_matrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create threads */</span></span><br><span class="line">    HANDLE threads[THREADS];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; THREADS / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">// 2 * i , 2 * i + 1</span></span><br><span class="line">        start = i * DATA_SIZE * <span class="number">2</span>;</span><br><span class="line">        end = (i + <span class="number">1</span>) * DATA_SIZE * <span class="number">2</span>;</span><br><span class="line">        params[<span class="number">2</span> * i].a_start = start;</span><br><span class="line">        params[<span class="number">2</span> * i].a_end = end;</span><br><span class="line">        params[<span class="number">2</span> * i].b_start = <span class="number">0</span>;</span><br><span class="line">        params[<span class="number">2</span> * i].b_end = N / <span class="number">2</span>;</span><br><span class="line">        params[<span class="number">2</span> * i + <span class="number">1</span>].a_start = start;</span><br><span class="line">        params[<span class="number">2</span> * i + <span class="number">1</span>].a_end = end;</span><br><span class="line">        params[<span class="number">2</span> * i + <span class="number">1</span>].b_start = N / <span class="number">2</span>;</span><br><span class="line">        params[<span class="number">2</span> * i + <span class="number">1</span>].b_end = N;</span><br><span class="line">        threads[<span class="number">2</span> * i] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)thr_func_calc, &amp;params[<span class="number">2</span> * i], <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        threads[<span class="number">2</span> * i + <span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)thr_func_calc, &amp;params[<span class="number">2</span> * i + <span class="number">1</span>], <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* join threads */</span></span><br><span class="line">    WaitForMultipleObjects(THREADS, threads, TRUE, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* write result */</span></span><br><span class="line">    write_matrix(RESULT_FILE, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>课程报告</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>数字电路（第三部分）</title>
    <url>/2021/01/02/verilog/</url>
    <content><![CDATA[<h1 id="数字电路第三部分verilog设计"><a class="markdownIt-Anchor" href="#数字电路第三部分verilog设计"></a> 数字电路（第三部分：Verilog设计）</h1>
<h2 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h2>
<ul>
<li>模块定义：<code>module 模块名(端口1,端口2,端口3,...);</code></li>
<li>模块定义结束：<code>endmodule</code></li>
<li>I/O说明：输入 <code>input 端口名1,端口名2,...,端口名N;</code> ，输出 <code>output 端口名1,端口名2,...,端口名N;</code></li>
<li>register型变量（在always块中被赋值的信号）定义：<code>reg 数据名1,数据名2,...,数据名n;</code>。定义8位宽的数据：<code>reg[7:0] data;</code></li>
<li>assign语句：<code>assign 方程式;</code>，一般适合于对<strong>组合逻<br />
辑</strong>进行赋值。</li>
<li>数字：<code>&lt;位宽&gt;'&lt;进制&gt; &lt;数字&gt;</code> 位宽为对应二进制数的宽度；十进制的数可以缺省位宽和进制说明（二进制b，十六进制h）；x代表不定值,z代表高阻值。</li>
<li><code>if-else</code>语句、<code>case-endcase</code>语句，要在always块内；如执行的语句为多句时，要用<code>begin-end</code>语句括起来。</li>
<li>位拼接运算符 <code>&#123; &#125;</code>：将两个或多个信号的某些位拼接起来，如<code>&#123;信号1的某几位,信号2的某几位,...,信号n的某几位&#125;</code></li>
</ul>
<h3 id="always块"><a class="markdownIt-Anchor" href="#always块"></a> always块</h3>
<p>当括号内的表达式的值改变时，就会执行一遍块内语句。（一般用于<strong>时序逻辑</strong>）</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span> @(...)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">// 过程赋值</span></span><br><span class="line">        <span class="comment">// if语句</span></span><br><span class="line">        <span class="comment">// case语句</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>posedge与negedge关键字：事件由时钟边沿触发，分别表示信号的上升沿和下降沿。如：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)  <span class="comment">// 表示时钟信号clk的上升沿</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">negedge</span> clk)  <span class="comment">// 表示时钟信号clk的下降沿</span></span><br></pre></td></tr></table></figure>
<p>always块内是按照指定的顺序执行的；两个或更多个always块之间、always块与assign语句之间，是同时执行（并行执行）的。</p>
<h2 id="设计举例"><a class="markdownIt-Anchor" href="#设计举例"></a> 设计举例</h2>
<p>4位全加器</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> add4(cout, sum, a, b, cin);</span><br><span class="line">    <span class="keyword">output</span> cout;</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] sum;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] a, b;</span><br><span class="line">    <span class="keyword">input</span> cin;</span><br><span class="line">    <span class="keyword">assign</span> &#123;cout, sum&#125; = a + b + cin;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>3-8译码器</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> decoder_38(out,in,en);</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] in;</span><br><span class="line">    <span class="keyword">input</span> en;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">always</span> @(in <span class="keyword">or</span> en)</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (en) out=<span class="number">8&#x27;b11111111</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">case</span>(in)</span><br><span class="line">            <span class="number">3&#x27;b000</span>: out=<span class="number">8&#x27;b11111110</span>;</span><br><span class="line">            <span class="number">3&#x27;b001</span>: out=<span class="number">8&#x27;b11111101</span>;</span><br><span class="line">            <span class="number">3&#x27;b010</span>: out=<span class="number">8&#x27;b11111011</span>;</span><br><span class="line">            <span class="number">3&#x27;b011</span>: out=<span class="number">8&#x27;b11110111</span>;</span><br><span class="line">            <span class="number">3&#x27;b100</span>: out=<span class="number">8&#x27;b11101111</span>;</span><br><span class="line">            <span class="number">3&#x27;b101</span>: out=<span class="number">8&#x27;b11011111</span>;</span><br><span class="line">            <span class="number">3&#x27;b110</span>: out=<span class="number">8&#x27;b10111111</span>;</span><br><span class="line">            <span class="number">3&#x27;b111</span>: out=<span class="number">8&#x27;b01111111</span>;</span><br><span class="line">          <span class="keyword">endcase</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>4位<strong>同步清0、同步预置</strong>二进制计数器</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> counter4(out, cout, data, load, clr, clk);</span><br><span class="line">    <span class="keyword">output</span>[<span class="number">3</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">output</span> cout;</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">3</span>:<span class="number">0</span>] data;</span><br><span class="line">    <span class="keyword">input</span> load, clr, clk;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">3</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!clr)  out=<span class="number">0</span>;  <span class="comment">// 清零</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (load)  out=data;  <span class="comment">// 置数</span></span><br><span class="line">        <span class="keyword">else</span>  out=out+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">assign</span> cout=&amp;out;  <span class="comment">// 进位（各位与运算）</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>4位<strong>异步清0、同步预置</strong>二进制计数器（注意这里异步清零的方法）</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> counter4(out, cout, data, load, clr, clk);</span><br><span class="line">    <span class="keyword">output</span>[<span class="number">3</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">output</span> cout;</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">3</span>:<span class="number">0</span>] data;</span><br><span class="line">    <span class="keyword">input</span> load, clr, clk;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">3</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (load)  out=data;  <span class="comment">// 置数</span></span><br><span class="line">        <span class="keyword">else</span>  out=out+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span> @(clr) </span><br><span class="line">      <span class="keyword">begin</span> </span><br><span class="line">        <span class="keyword">if</span> (!clr)  out=<span class="number">0</span>;  <span class="comment">// 清零</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">assign</span> cout=&amp;out;  <span class="comment">// 进位（各位与运算）</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>4位<strong>同步清0、同步预置</strong>十进制计数器</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span>   counter10(out,cout,data,load,clr,clk);</span><br><span class="line">    <span class="keyword">output</span>[<span class="number">3</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">output</span> cout;</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">3</span>:<span class="number">0</span>] data;</span><br><span class="line">    <span class="keyword">input</span> load, clr, clk;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">3</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!clr)  out=<span class="number">0</span>;  <span class="comment">// 清零</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (load)  out=data;  <span class="comment">// 置数</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (out==<span class="number">9</span>)  out=<span class="number">0</span>;  <span class="comment">// 十进制进位</span></span><br><span class="line">        <span class="keyword">else</span>  out=out+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">assign</span>  cout = (out==<span class="number">9</span>) ? <span class="number">1</span> : <span class="number">0</span>;  <span class="comment">// 进位</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>4位<strong>异步清0、同步预置</strong>十进制计数器</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span>   counter10(out,cout,data,load,clr,clk);</span><br><span class="line">    <span class="keyword">output</span>[<span class="number">3</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">output</span> cout;</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">3</span>:<span class="number">0</span>] data;</span><br><span class="line">    <span class="keyword">input</span> load, clr, clk;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">3</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (load)  out=data;  <span class="comment">// 置数</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (out==<span class="number">9</span>)  out=<span class="number">0</span>;  <span class="comment">// 十进制进位</span></span><br><span class="line">        <span class="keyword">else</span>  out=out+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span> @(clr) </span><br><span class="line">      <span class="keyword">begin</span> </span><br><span class="line">        <span class="keyword">if</span> (!clr)  out=<span class="number">0</span>;  <span class="comment">// 清零</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">assign</span>  cout = (out==<span class="number">9</span>) ? <span class="number">1</span> : <span class="number">0</span>;  <span class="comment">// 进位</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>8位移位寄存器（同步清0，左移）</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> shifter8(dout, din, clk, clr);</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] dout;</span><br><span class="line">    <span class="keyword">input</span> din, clk, clr;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] dout;</span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (clr)  dout=<span class="number">0</span>;  <span class="comment">// 清零</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                dout=dout&lt;&lt;<span class="number">1</span>;  <span class="comment">// 输出信号左移一位</span></span><br><span class="line">                dout[<span class="number">0</span>]=din;  <span class="comment">// 输入信号补到输出信号的最低位</span></span><br><span class="line">             <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>▲ 4选1数据选择器</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mux4_1(out, in0, in1, in2, in3, sel);</span><br><span class="line">    <span class="keyword">output</span> out;</span><br><span class="line">    <span class="keyword">input</span> in0,in1,in2,in3;</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">1</span>:<span class="number">0</span>] sel;  <span class="comment">// 选择信号</span></span><br><span class="line">    <span class="keyword">reg</span> out;</span><br><span class="line">    <span class="keyword">always</span> @(in0 <span class="keyword">or</span> in1 <span class="keyword">or</span> in2 <span class="keyword">or</span> in3 <span class="keyword">or</span> sel)</span><br><span class="line">        <span class="keyword">case</span>(sel)</span><br><span class="line">            <span class="number">2&#x27;b00</span>: out=in0;</span><br><span class="line">            <span class="number">2&#x27;b01</span>: out=in1;</span><br><span class="line">            <span class="number">2&#x27;b10</span>: out=in2;</span><br><span class="line">            <span class="number">2&#x27;b11</span>: out=in3;</span><br><span class="line">            <span class="keyword">default</span>: out=<span class="number">2&#x27;bx</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>▲ 可变模k加法/减法计数器（同步清0，同步预置）</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> updown_count(data, clk, clr, load, up_down, out, cout);</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">7</span>:<span class="number">0</span>] data;</span><br><span class="line">    <span class="keyword">input</span> clk, clr, load;</span><br><span class="line">    <span class="keyword">input</span> up_down;</span><br><span class="line">    <span class="keyword">output</span>[<span class="number">7</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">output</span> cout;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">7</span>:<span class="number">0</span>] out;</span><br><span class="line">    <span class="keyword">reg</span> cout;</span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!clr) out = <span class="number">0</span>; <span class="comment">// 同步清0，低电平有效</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (load) out = data; <span class="comment">// 同步预置</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (up_down)  <span class="keyword">begin</span>  <span class="comment">// 加法计数</span></span><br><span class="line">            <span class="keyword">if</span> (out==k-<span class="number">1</span>)  <span class="keyword">begin</span> <span class="comment">// 进位</span></span><br><span class="line">                out = <span class="number">0</span>;</span><br><span class="line">                cout = <span class="number">1</span>;</span><br><span class="line">              <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span>  <span class="keyword">begin</span> </span><br><span class="line">                out = out + <span class="number">1</span>;</span><br><span class="line">                cout = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span>  <span class="keyword">begin</span>  <span class="comment">// 减法计数</span></span><br><span class="line">            <span class="keyword">if</span> (out==<span class="number">0</span>)  <span class="keyword">begin</span> <span class="comment">// 进位</span></span><br><span class="line">                out = k-<span class="number">1</span>;</span><br><span class="line">                cout = <span class="number">1</span>;</span><br><span class="line">              <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span>  <span class="keyword">begin</span> </span><br><span class="line">                out = out - <span class="number">1</span>;</span><br><span class="line">                cout = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数字电路</category>
      </categories>
      <tags>
        <tag>考试不挂科</tag>
        <tag>课堂</tag>
        <tag>学习笔记</tag>
        <tag>数字电路</tag>
        <tag>Verilog</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Python Selenium 的表单填写自动化程序</title>
    <url>/2021/01/19/python-selenium/</url>
    <content><![CDATA[<div class="note success flat"><p>完整代码：<a href="https://github.com/HolgerZhang/DailyReport">GitHub</a></p>
</div>
<h2 id="selenium-简介"><a class="markdownIt-Anchor" href="#selenium-简介"></a> Selenium 简介</h2>
<p>Selenium是一个用于测试网站的自动化测试工具，支持各种浏览器包括Chrome、Firefox、Safari等主流界面浏览器，同时也支持phantomJS无界面浏览器。</p>
<p>框架底层使用JavaScript模拟真实用户对浏览器进行操作。测试脚本执行时，浏览器自动按照脚本代码做出点击，输入，打开，验证等操作，就像真实用户所做的一样，从终端用户的角度测试应用程序。</p>
<p>这里使用 Python 的 Selenium 库实现一个表单填写自动化程序。</p>
<h2 id="安装配置-selenium-环境"><a class="markdownIt-Anchor" href="#安装配置-selenium-环境"></a> 安装配置 Selenium 环境</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install selenium</span><br></pre></td></tr></table></figure>
<p>Selenium3.x 调用浏览器必须有一个 webdriver 驱动文件：</p>
<ul>
<li>Chrome 驱动文件下载：<a href="https://chromedriver.storage.googleapis.com/index.html">chromedrive</a></li>
<li>Firefox 驱动文件下载：<a href="https://github.com/mozilla/geckodriver/releases">geckodriver</a></li>
<li>IE浏览器驱动：<a href="http://selenium-release.storage.googleapis.com/index.html">IEDriverServer</a></li>
<li>Edge浏览器驱动：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver">MicrosoftWebDriver</a></li>
<li>Opera浏览器驱动：<a href="https://github.com/operasoftware/operachromiumdriver/releases">operadriver</a></li>
<li>PhantomJS浏览器驱动：<a href="http://phantomjs.org/">phantomjs</a></li>
</ul>
<p>这里使用的是 Chrome 驱动文件。</p>
<blockquote>
<p>下载Driver要注意和你当前已有的浏览器的版本是否一致。</p>
</blockquote>
<p>添加到环境变量：</p>
<ul>
<li>如果你使用的是 Windows 操作系统：手动创建一个存放浏览器驱动的目录，如： <code>C:\driver</code> , 将下载的浏览器驱动文件（例如：chromedriver、geckodriver）丢到该目录下。转到 此电脑-&gt;属性-&gt;系统设置-&gt;高级-&gt;环境变量-&gt;系统变量-&gt;Path，将 <code>C:\driver</code> 目录添加到 Path 的值中。</li>
<li>如果你使用的是 Linux/Unix/macOS 操作系统：直接将解压得到的驱动文件（如：chromedriver、geckodriver）拷贝到 <code>/usr/loacl/bin</code> 目录下即可。</li>
</ul>
<blockquote>
<p>环境变量path中加入路径后还是报错，建议先重启一下编辑器。</p>
</blockquote>
<p>简单验证不同的浏览器驱动是否正常使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()   <span class="comment"># Firefox浏览器</span></span><br><span class="line">driver = webdriver.Chrome()    <span class="comment"># Chrome浏览器</span></span><br><span class="line">driver = webdriver.Ie()        <span class="comment"># Internet Explorer浏览器</span></span><br><span class="line">driver = webdriver.Edge()      <span class="comment"># Edge浏览器</span></span><br><span class="line">driver = webdriver.Opera()     <span class="comment"># Opera浏览器</span></span><br><span class="line">driver = webdriver.PhantomJS()   <span class="comment"># PhantomJS</span></span><br></pre></td></tr></table></figure>
<h2 id="selenium-使用"><a class="markdownIt-Anchor" href="#selenium-使用"></a> Selenium 使用</h2>
<p>使用 selenium.webdriver 来创建一个对象，调用浏览器驱动。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br></pre></td></tr></table></figure>
<p>通过 get 方法访问表单地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser.get(<span class="string">&quot;http://xx.xxxx.edu.cn/xxx/xxx/xxx/jkxxtb/jkxxcj.jsp&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="selenium-定位元素的方式"><a class="markdownIt-Anchor" href="#selenium-定位元素的方式"></a> Selenium 定位元素的方式</h4>
<table>
<thead>
<tr>
<th>定位一个元素</th>
<th>定位多个元素</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>find_element_by_id</td>
<td>find_elements_by_id</td>
<td style="text-align:center">通过元素id定位</td>
</tr>
<tr>
<td>find_element_by_name</td>
<td>find_elements_by_name</td>
<td style="text-align:center">通过元素name定位</td>
</tr>
<tr>
<td>find_element_by_xpath</td>
<td>find_elements_by_xpath</td>
<td style="text-align:center">通过xpath表达式定位</td>
</tr>
<tr>
<td>find_element_by_link_text</td>
<td>find_elements_by_link_tex</td>
<td style="text-align:center">通过完整超链接定位</td>
</tr>
<tr>
<td>find_element_by_partial_link_text</td>
<td>find_elements_by_partial_link_text</td>
<td style="text-align:center">通过部分链接定位</td>
</tr>
<tr>
<td>find_element_by_tag_name</td>
<td>find_elements_by_tag_name</td>
<td style="text-align:center">通过标签定位</td>
</tr>
<tr>
<td>find_element_by_class_name</td>
<td>find_elements_by_class_name</td>
<td style="text-align:center">通过类名进行定位</td>
</tr>
<tr>
<td>find_elements_by_css_selector</td>
<td>find_elements_by_css_selector</td>
<td style="text-align:center">通过css选择器进行定位</td>
</tr>
</tbody>
</table>
<div class="note success flat"><p>这里主要使用到了元素 id、元素 name、类名和 xpath 表达式来定位元素。</p>
</div>
<h4 id="控制浏览器操作的一些方法"><a class="markdownIt-Anchor" href="#控制浏览器操作的一些方法"></a> 控制浏览器操作的一些方法</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>set_window_size()</td>
<td>设置浏览器的大小</td>
</tr>
<tr>
<td>back()</td>
<td>控制浏览器后退</td>
</tr>
<tr>
<td>forward()</td>
<td>控制浏览器前进</td>
</tr>
<tr>
<td>refresh()</td>
<td>刷新当前页面</td>
</tr>
<tr>
<td>clear()</td>
<td>清除文本</td>
</tr>
<tr>
<td>send_keys(value)</td>
<td>模拟按键输入</td>
</tr>
<tr>
<td>click()</td>
<td>单击元素</td>
</tr>
<tr>
<td>submit()</td>
<td>用于提交表单</td>
</tr>
<tr>
<td>get_attribute(name)</td>
<td>获取元素属性值</td>
</tr>
<tr>
<td>is_displayed()</td>
<td>设置该元素是否用户可见</td>
</tr>
<tr>
<td>size</td>
<td>返回元素的尺寸</td>
</tr>
<tr>
<td>text</td>
<td>获取元素的文本</td>
</tr>
</tbody>
</table>
<div class="note success flat"><p>这里主要使用到了 send_keys(value)  和 click() 。</p>
</div>
<h4 id="鼠标事件"><a class="markdownIt-Anchor" href="#鼠标事件"></a> 鼠标事件</h4>
<p>在 WebDriver 中， 将这些关于鼠标操作的方法封装在 ActionChains 类提供。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ActionChains(driver)</td>
<td>构造ActionChains对象</td>
</tr>
<tr>
<td>context_click()</td>
<td>执行鼠标悬停操作</td>
</tr>
<tr>
<td>move_to_element(above)</td>
<td>右击</td>
</tr>
<tr>
<td>double_click()</td>
<td>双击</td>
</tr>
<tr>
<td>drag_and_drop()</td>
<td>拖动</td>
</tr>
<tr>
<td>move_to_element(above)</td>
<td>执行鼠标悬停操作</td>
</tr>
<tr>
<td>context_click()</td>
<td>用于模拟鼠标右键操作， 在调用时需要指定元素定位</td>
</tr>
<tr>
<td>perform()</td>
<td>执行所有 ActionChains 中存储的行为，可以理解成是对整个操作的提交动作</td>
</tr>
</tbody>
</table>
<h4 id="键盘事件"><a class="markdownIt-Anchor" href="#键盘事件"></a> 键盘事件</h4>
<p>Selenium中的Key模块为我们提供了模拟键盘按键的方法，那就是send_keys()方法。它不仅可以模拟键盘输入，也可以模拟键盘的操作。</p>
<p>常用的键盘操作如下：</p>
<table>
<thead>
<tr>
<th>模拟键盘按键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>send_keys(Keys.BACK_SPACE)</td>
<td>删除键（BackSpace）</td>
</tr>
<tr>
<td>send_keys(Keys.SPACE)</td>
<td>空格键（Space）</td>
</tr>
<tr>
<td>send_keys(Keys.TAB)</td>
<td>制表键（Tab）</td>
</tr>
<tr>
<td>send_keys(Keys.ESCAPE)</td>
<td>回退键（Esc）</td>
</tr>
<tr>
<td>send_keys(Keys.ENTER)</td>
<td>回车键（Enter）</td>
</tr>
</tbody>
</table>
<p>组合键的使用</p>
<table>
<thead>
<tr>
<th>模拟键盘按键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>send_keys(Keys.CONTROL, ‘a’)</td>
<td>全选（Ctrl+A）</td>
</tr>
<tr>
<td>send_keys(Keys.CONTROL, ‘c’)</td>
<td>复制（Ctrl+C）</td>
</tr>
<tr>
<td>send_keys(Keys.CONTROL, ‘x’)</td>
<td>剪切（Ctrl+X）</td>
</tr>
<tr>
<td>send_keys(Keys.CONTROL, ‘v’)</td>
<td>粘贴（Ctrl+V）</td>
</tr>
<tr>
<td>send_keys(Keys.F1…Fn)</td>
<td>键盘 F1…Fn</td>
</tr>
</tbody>
</table>
<blockquote>
<p>更多详见<a href="https://blog.csdn.net/weixin_36279318/article/details/79475388">参考资料</a>。</p>
</blockquote>
<h2 id="问题解决"><a class="markdownIt-Anchor" href="#问题解决"></a> 问题解决</h2>
<blockquote>
<p>将各个操作封装到类 DailyReport 中。</p>
</blockquote>
<h3 id="定位固定的元素"><a class="markdownIt-Anchor" href="#定位固定的元素"></a> 定位（固定的）元素</h3>
<p>在类中封装 __find_by 方法用于根据元素 id、元素 name、类名来定位元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__find_by</span>(<span class="params">self, key: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 元素选择器 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="keyword">lambda</span> locator: self.__browser.find_element_by_id(locator),</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="keyword">lambda</span> locator: self.__browser.find_element_by_name(locator),</span><br><span class="line">        <span class="string">&#x27;class&#x27;</span>: <span class="keyword">lambda</span> locator: self.__browser.find_element_by_class_name(locator)</span><br><span class="line">    &#125;[key]</span><br></pre></td></tr></table></figure>
<h3 id="填写文本框"><a class="markdownIt-Anchor" href="#填写文本框"></a> 填写文本框</h3>
<p>传入元素，清空原有内容并输入新的内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__send_text</span>(<span class="params">elem, key: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 填写文本框 &quot;&quot;&quot;</span></span><br><span class="line">    elem.clear()</span><br><span class="line">    elem.send_keys(key.strip())</span><br></pre></td></tr></table></figure>
<h3 id="模糊定位元素"><a class="markdownIt-Anchor" href="#模糊定位元素"></a> 模糊定位元素</h3>
<blockquote>
<p>世界上最远的距离大概就是明明看到一个页面元素站在那里，但是我却定位不到！！</p>
</blockquote>
<p>在测试使用的网站中，有一些元素是动态加载的，其 id 属性不断变化，这就需要利用 xpath 来模糊定位元素。</p>
<blockquote>
<p>XPath 使用路径表达式来选取 XML 文档中的节点或者节点集。这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似。</p>
</blockquote>
<p>xpath可以以标签定位，也可以@任意属性：</p>
<ul>
<li>如：以input标签定位：<code>driver.find_element_by_xpath(&quot;//input[@id='kw']&quot;)</code></li>
<li>如：@type属性：<code>driver.find_elements_by_xpath(&quot;//input[@type='text']&quot;)</code></li>
</ul>
<p>其中 contains 方法可以实现模糊匹配：<code>driver.find_elements_by_xpath(&quot;//*[contains(@id, '省份')]&quot;)</code></p>
<blockquote>
<p>关于 xpath 的具体用法可以参考<a href="https://www.cnblogs.com/zhongyehai/p/10646194.html">资料</a>。</p>
</blockquote>
<p>在测试使用的网站中，省份和地级市的标签是在点击了 <code>select2-select_***-container</code> 的 span 标签后才显示的，如下：</p>
<p><img src="https://repo.live.holgerbest.top/img/pJGsLC6NkPSxOoB.png" alt="image.png" /></p>
<p>并且id属性是变化的，只能通过模糊匹配的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__fuzzy_click</span>(<span class="params">self, val: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 模糊点击，xpath模糊查找id &quot;&quot;&quot;</span></span><br><span class="line">    self.__browser.find_element_by_xpath(<span class="string">&#x27;//*[contains(@id,\&#x27;&#123;&#125;\&#x27;)]&#x27;</span>.<span class="built_in">format</span>(val)).click()</span><br><span class="line">    <span class="comment"># val 为传入的要匹配的字段</span></span><br></pre></td></tr></table></figure>
<p><s><em>智障操作</em>：debug一晚上，结果发现上面的匹配完忘记 <code>.click()</code> 了。</s></p>
<h3 id="登录"><a class="markdownIt-Anchor" href="#登录"></a> 登录</h3>
<p>在测试使用的网站中，首次打开会转到登录页面。解决方案：先定位一个表单中的元素，如果未找到则说明进入了登录页面，执行登录操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    self.__find_by(<span class="string">&#x27;name&#x27;</span>)(<span class="string">&#x27;swtw&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    login()</span><br></pre></td></tr></table></figure>
<p>具体的登录操作就是用 <code>__find_by</code> 方法定位到学号和姓名的输入框，把信息用 <code>__send_text</code> 方法输入进去，定位并点击登录按钮即可。</p>
<h3 id="复选框的选择"><a class="markdownIt-Anchor" href="#复选框的选择"></a> 复选框的选择</h3>
<p>首先寻找所有的已经被选中的元素全都点击一遍。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__uncheck</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 将所有勾选的复选框取消勾选 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.__click_class(<span class="string">&#x27;icheckbox_square-green checked&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>之后根据唯一的元素 id 找到并点击（<code>__click_id</code> 方法）即可。</p>
<h3 id="下拉列表选择"><a class="markdownIt-Anchor" href="#下拉列表选择"></a> 下拉列表选择</h3>
<p>首先点击下拉列表 <code>self.__click_id('select2-select_***-container')</code>；</p>
<p>之后模糊定位要点击的元素 <code>self.__fuzzy_click(...)</code> 即可。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Selenium</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Word排版的艺术</title>
    <url>/2020/03/28/word/</url>
    <content><![CDATA[<img src="https://repo.live.holgerbest.top/img/mPlDHTSwRnAB4Er.png" alt="Word排版的艺术" />
<div class="note success flat"><p>写文章、写报告、写论文，我们的学习和工作几乎离不开Word。然而Word的排版却又是一件让人头疼的事情。同样，一个排版精致的Word文件不仅仅会让写作者感到舒适，还会使阅读者感到清晰明了。所以，接下来我们来粗浅地谈一谈Word排版的艺术。</p>
</div>
<p>传送门：请下载 <code>WordArt.pdf</code>，下载地址：<a href="https://get.holgerbest.top">https://get.holgerbest.top</a></p>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
      <tags>
        <tag>Office</tag>
        <tag>Word</tag>
      </tags>
  </entry>
</search>
